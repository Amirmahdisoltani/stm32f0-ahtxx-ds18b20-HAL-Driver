
ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000014  0800323c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800323c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002707  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f86c  00000000  00000000  000350b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b53  00000000  00000000  0004491c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d14a  00000000  00000000  0005946f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b65b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002318  00000000  00000000  000b660c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000cef5  00000000  00000000  000b8924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003158 	.word	0x08003158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003158 	.word	0x08003158

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0244      	lsls	r4, r0, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a64      	lsrs	r4, r4, #9
 8000230:	1c0f      	adds	r7, r1, #0
 8000232:	0e2d      	lsrs	r5, r5, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2d00      	cmp	r5, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x1c>
 800023a:	e08d      	b.n	8000358 <__aeabi_fmul+0x138>
 800023c:	2dff      	cmp	r5, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fmul+0x22>
 8000240:	e092      	b.n	8000368 <__aeabi_fmul+0x148>
 8000242:	2300      	movs	r3, #0
 8000244:	2080      	movs	r0, #128	; 0x80
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	00e4      	lsls	r4, r4, #3
 800024c:	04c0      	lsls	r0, r0, #19
 800024e:	4304      	orrs	r4, r0
 8000250:	3d7f      	subs	r5, #127	; 0x7f
 8000252:	0278      	lsls	r0, r7, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	007b      	lsls	r3, r7, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fff      	lsrs	r7, r7, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d100      	bne.n	8000264 <__aeabi_fmul+0x44>
 8000262:	e070      	b.n	8000346 <__aeabi_fmul+0x126>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d100      	bne.n	800026a <__aeabi_fmul+0x4a>
 8000268:	e086      	b.n	8000378 <__aeabi_fmul+0x158>
 800026a:	4642      	mov	r2, r8
 800026c:	00d0      	lsls	r0, r2, #3
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	18ed      	adds	r5, r5, r3
 8000274:	2300      	movs	r3, #0
 8000276:	04d2      	lsls	r2, r2, #19
 8000278:	4302      	orrs	r2, r0
 800027a:	4690      	mov	r8, r2
 800027c:	469c      	mov	ip, r3
 800027e:	0031      	movs	r1, r6
 8000280:	464b      	mov	r3, r9
 8000282:	4079      	eors	r1, r7
 8000284:	1c68      	adds	r0, r5, #1
 8000286:	2b0f      	cmp	r3, #15
 8000288:	d81c      	bhi.n	80002c4 <__aeabi_fmul+0xa4>
 800028a:	4a76      	ldr	r2, [pc, #472]	; (8000464 <__aeabi_fmul+0x244>)
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	58d3      	ldr	r3, [r2, r3]
 8000290:	469f      	mov	pc, r3
 8000292:	0039      	movs	r1, r7
 8000294:	4644      	mov	r4, r8
 8000296:	46e2      	mov	sl, ip
 8000298:	4653      	mov	r3, sl
 800029a:	2b02      	cmp	r3, #2
 800029c:	d00f      	beq.n	80002be <__aeabi_fmul+0x9e>
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d100      	bne.n	80002a4 <__aeabi_fmul+0x84>
 80002a2:	e0d7      	b.n	8000454 <__aeabi_fmul+0x234>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d137      	bne.n	8000318 <__aeabi_fmul+0xf8>
 80002a8:	2000      	movs	r0, #0
 80002aa:	2400      	movs	r4, #0
 80002ac:	05c0      	lsls	r0, r0, #23
 80002ae:	4320      	orrs	r0, r4
 80002b0:	07c9      	lsls	r1, r1, #31
 80002b2:	4308      	orrs	r0, r1
 80002b4:	bce0      	pop	{r5, r6, r7}
 80002b6:	46ba      	mov	sl, r7
 80002b8:	46b1      	mov	r9, r6
 80002ba:	46a8      	mov	r8, r5
 80002bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002be:	20ff      	movs	r0, #255	; 0xff
 80002c0:	2400      	movs	r4, #0
 80002c2:	e7f3      	b.n	80002ac <__aeabi_fmul+0x8c>
 80002c4:	0c26      	lsrs	r6, r4, #16
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c22      	lsrs	r2, r4, #16
 80002ca:	4644      	mov	r4, r8
 80002cc:	0424      	lsls	r4, r4, #16
 80002ce:	0c24      	lsrs	r4, r4, #16
 80002d0:	4643      	mov	r3, r8
 80002d2:	0027      	movs	r7, r4
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	4357      	muls	r7, r2
 80002d8:	4374      	muls	r4, r6
 80002da:	435a      	muls	r2, r3
 80002dc:	435e      	muls	r6, r3
 80002de:	1912      	adds	r2, r2, r4
 80002e0:	0c3b      	lsrs	r3, r7, #16
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	429c      	cmp	r4, r3
 80002e6:	d903      	bls.n	80002f0 <__aeabi_fmul+0xd0>
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0252      	lsls	r2, r2, #9
 80002ec:	4694      	mov	ip, r2
 80002ee:	4466      	add	r6, ip
 80002f0:	043f      	lsls	r7, r7, #16
 80002f2:	041a      	lsls	r2, r3, #16
 80002f4:	0c3f      	lsrs	r7, r7, #16
 80002f6:	19d2      	adds	r2, r2, r7
 80002f8:	0194      	lsls	r4, r2, #6
 80002fa:	1e67      	subs	r7, r4, #1
 80002fc:	41bc      	sbcs	r4, r7
 80002fe:	0c1b      	lsrs	r3, r3, #16
 8000300:	0e92      	lsrs	r2, r2, #26
 8000302:	199b      	adds	r3, r3, r6
 8000304:	4314      	orrs	r4, r2
 8000306:	019b      	lsls	r3, r3, #6
 8000308:	431c      	orrs	r4, r3
 800030a:	011b      	lsls	r3, r3, #4
 800030c:	d400      	bmi.n	8000310 <__aeabi_fmul+0xf0>
 800030e:	e09b      	b.n	8000448 <__aeabi_fmul+0x228>
 8000310:	2301      	movs	r3, #1
 8000312:	0862      	lsrs	r2, r4, #1
 8000314:	401c      	ands	r4, r3
 8000316:	4314      	orrs	r4, r2
 8000318:	0002      	movs	r2, r0
 800031a:	327f      	adds	r2, #127	; 0x7f
 800031c:	2a00      	cmp	r2, #0
 800031e:	dd64      	ble.n	80003ea <__aeabi_fmul+0x1ca>
 8000320:	0763      	lsls	r3, r4, #29
 8000322:	d004      	beq.n	800032e <__aeabi_fmul+0x10e>
 8000324:	230f      	movs	r3, #15
 8000326:	4023      	ands	r3, r4
 8000328:	2b04      	cmp	r3, #4
 800032a:	d000      	beq.n	800032e <__aeabi_fmul+0x10e>
 800032c:	3404      	adds	r4, #4
 800032e:	0123      	lsls	r3, r4, #4
 8000330:	d503      	bpl.n	800033a <__aeabi_fmul+0x11a>
 8000332:	0002      	movs	r2, r0
 8000334:	4b4c      	ldr	r3, [pc, #304]	; (8000468 <__aeabi_fmul+0x248>)
 8000336:	3280      	adds	r2, #128	; 0x80
 8000338:	401c      	ands	r4, r3
 800033a:	2afe      	cmp	r2, #254	; 0xfe
 800033c:	dcbf      	bgt.n	80002be <__aeabi_fmul+0x9e>
 800033e:	01a4      	lsls	r4, r4, #6
 8000340:	0a64      	lsrs	r4, r4, #9
 8000342:	b2d0      	uxtb	r0, r2
 8000344:	e7b2      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000346:	4643      	mov	r3, r8
 8000348:	2b00      	cmp	r3, #0
 800034a:	d13d      	bne.n	80003c8 <__aeabi_fmul+0x1a8>
 800034c:	464a      	mov	r2, r9
 800034e:	3301      	adds	r3, #1
 8000350:	431a      	orrs	r2, r3
 8000352:	4691      	mov	r9, r2
 8000354:	469c      	mov	ip, r3
 8000356:	e792      	b.n	800027e <__aeabi_fmul+0x5e>
 8000358:	2c00      	cmp	r4, #0
 800035a:	d129      	bne.n	80003b0 <__aeabi_fmul+0x190>
 800035c:	2304      	movs	r3, #4
 800035e:	4699      	mov	r9, r3
 8000360:	3b03      	subs	r3, #3
 8000362:	2500      	movs	r5, #0
 8000364:	469a      	mov	sl, r3
 8000366:	e774      	b.n	8000252 <__aeabi_fmul+0x32>
 8000368:	2c00      	cmp	r4, #0
 800036a:	d11b      	bne.n	80003a4 <__aeabi_fmul+0x184>
 800036c:	2308      	movs	r3, #8
 800036e:	4699      	mov	r9, r3
 8000370:	3b06      	subs	r3, #6
 8000372:	25ff      	movs	r5, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e76c      	b.n	8000252 <__aeabi_fmul+0x32>
 8000378:	4643      	mov	r3, r8
 800037a:	35ff      	adds	r5, #255	; 0xff
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10b      	bne.n	8000398 <__aeabi_fmul+0x178>
 8000380:	2302      	movs	r3, #2
 8000382:	464a      	mov	r2, r9
 8000384:	431a      	orrs	r2, r3
 8000386:	4691      	mov	r9, r2
 8000388:	469c      	mov	ip, r3
 800038a:	e778      	b.n	800027e <__aeabi_fmul+0x5e>
 800038c:	4653      	mov	r3, sl
 800038e:	0031      	movs	r1, r6
 8000390:	2b02      	cmp	r3, #2
 8000392:	d000      	beq.n	8000396 <__aeabi_fmul+0x176>
 8000394:	e783      	b.n	800029e <__aeabi_fmul+0x7e>
 8000396:	e792      	b.n	80002be <__aeabi_fmul+0x9e>
 8000398:	2303      	movs	r3, #3
 800039a:	464a      	mov	r2, r9
 800039c:	431a      	orrs	r2, r3
 800039e:	4691      	mov	r9, r2
 80003a0:	469c      	mov	ip, r3
 80003a2:	e76c      	b.n	800027e <__aeabi_fmul+0x5e>
 80003a4:	230c      	movs	r3, #12
 80003a6:	4699      	mov	r9, r3
 80003a8:	3b09      	subs	r3, #9
 80003aa:	25ff      	movs	r5, #255	; 0xff
 80003ac:	469a      	mov	sl, r3
 80003ae:	e750      	b.n	8000252 <__aeabi_fmul+0x32>
 80003b0:	0020      	movs	r0, r4
 80003b2:	f000 fd65 	bl	8000e80 <__clzsi2>
 80003b6:	2576      	movs	r5, #118	; 0x76
 80003b8:	1f43      	subs	r3, r0, #5
 80003ba:	409c      	lsls	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	426d      	negs	r5, r5
 80003c0:	4699      	mov	r9, r3
 80003c2:	469a      	mov	sl, r3
 80003c4:	1a2d      	subs	r5, r5, r0
 80003c6:	e744      	b.n	8000252 <__aeabi_fmul+0x32>
 80003c8:	4640      	mov	r0, r8
 80003ca:	f000 fd59 	bl	8000e80 <__clzsi2>
 80003ce:	4642      	mov	r2, r8
 80003d0:	1f43      	subs	r3, r0, #5
 80003d2:	409a      	lsls	r2, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	1a2d      	subs	r5, r5, r0
 80003d8:	4690      	mov	r8, r2
 80003da:	469c      	mov	ip, r3
 80003dc:	3d76      	subs	r5, #118	; 0x76
 80003de:	e74e      	b.n	800027e <__aeabi_fmul+0x5e>
 80003e0:	2480      	movs	r4, #128	; 0x80
 80003e2:	2100      	movs	r1, #0
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	03e4      	lsls	r4, r4, #15
 80003e8:	e760      	b.n	80002ac <__aeabi_fmul+0x8c>
 80003ea:	2301      	movs	r3, #1
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	2b1b      	cmp	r3, #27
 80003f0:	dd00      	ble.n	80003f4 <__aeabi_fmul+0x1d4>
 80003f2:	e759      	b.n	80002a8 <__aeabi_fmul+0x88>
 80003f4:	0022      	movs	r2, r4
 80003f6:	309e      	adds	r0, #158	; 0x9e
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4084      	lsls	r4, r0
 80003fc:	0013      	movs	r3, r2
 80003fe:	1e62      	subs	r2, r4, #1
 8000400:	4194      	sbcs	r4, r2
 8000402:	431c      	orrs	r4, r3
 8000404:	0763      	lsls	r3, r4, #29
 8000406:	d004      	beq.n	8000412 <__aeabi_fmul+0x1f2>
 8000408:	230f      	movs	r3, #15
 800040a:	4023      	ands	r3, r4
 800040c:	2b04      	cmp	r3, #4
 800040e:	d000      	beq.n	8000412 <__aeabi_fmul+0x1f2>
 8000410:	3404      	adds	r4, #4
 8000412:	0163      	lsls	r3, r4, #5
 8000414:	d51a      	bpl.n	800044c <__aeabi_fmul+0x22c>
 8000416:	2001      	movs	r0, #1
 8000418:	2400      	movs	r4, #0
 800041a:	e747      	b.n	80002ac <__aeabi_fmul+0x8c>
 800041c:	2080      	movs	r0, #128	; 0x80
 800041e:	03c0      	lsls	r0, r0, #15
 8000420:	4204      	tst	r4, r0
 8000422:	d009      	beq.n	8000438 <__aeabi_fmul+0x218>
 8000424:	4643      	mov	r3, r8
 8000426:	4203      	tst	r3, r0
 8000428:	d106      	bne.n	8000438 <__aeabi_fmul+0x218>
 800042a:	4644      	mov	r4, r8
 800042c:	4304      	orrs	r4, r0
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0039      	movs	r1, r7
 8000432:	20ff      	movs	r0, #255	; 0xff
 8000434:	0a64      	lsrs	r4, r4, #9
 8000436:	e739      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000438:	2080      	movs	r0, #128	; 0x80
 800043a:	03c0      	lsls	r0, r0, #15
 800043c:	4304      	orrs	r4, r0
 800043e:	0264      	lsls	r4, r4, #9
 8000440:	0031      	movs	r1, r6
 8000442:	20ff      	movs	r0, #255	; 0xff
 8000444:	0a64      	lsrs	r4, r4, #9
 8000446:	e731      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000448:	0028      	movs	r0, r5
 800044a:	e765      	b.n	8000318 <__aeabi_fmul+0xf8>
 800044c:	01a4      	lsls	r4, r4, #6
 800044e:	2000      	movs	r0, #0
 8000450:	0a64      	lsrs	r4, r4, #9
 8000452:	e72b      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000454:	2080      	movs	r0, #128	; 0x80
 8000456:	03c0      	lsls	r0, r0, #15
 8000458:	4304      	orrs	r4, r0
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	20ff      	movs	r0, #255	; 0xff
 800045e:	0a64      	lsrs	r4, r4, #9
 8000460:	e724      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	08003170 	.word	0x08003170
 8000468:	f7ffffff 	.word	0xf7ffffff

0800046c <__aeabi_fsub>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	0243      	lsls	r3, r0, #9
 8000474:	0a5b      	lsrs	r3, r3, #9
 8000476:	024e      	lsls	r6, r1, #9
 8000478:	00da      	lsls	r2, r3, #3
 800047a:	4694      	mov	ip, r2
 800047c:	0a72      	lsrs	r2, r6, #9
 800047e:	4691      	mov	r9, r2
 8000480:	0045      	lsls	r5, r0, #1
 8000482:	004a      	lsls	r2, r1, #1
 8000484:	b580      	push	{r7, lr}
 8000486:	0e2d      	lsrs	r5, r5, #24
 8000488:	001f      	movs	r7, r3
 800048a:	0fc4      	lsrs	r4, r0, #31
 800048c:	0e12      	lsrs	r2, r2, #24
 800048e:	0fc9      	lsrs	r1, r1, #31
 8000490:	09b6      	lsrs	r6, r6, #6
 8000492:	2aff      	cmp	r2, #255	; 0xff
 8000494:	d05b      	beq.n	800054e <__aeabi_fsub+0xe2>
 8000496:	2001      	movs	r0, #1
 8000498:	4041      	eors	r1, r0
 800049a:	428c      	cmp	r4, r1
 800049c:	d039      	beq.n	8000512 <__aeabi_fsub+0xa6>
 800049e:	1aa8      	subs	r0, r5, r2
 80004a0:	2800      	cmp	r0, #0
 80004a2:	dd5a      	ble.n	800055a <__aeabi_fsub+0xee>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d06a      	beq.n	800057e <__aeabi_fsub+0x112>
 80004a8:	2dff      	cmp	r5, #255	; 0xff
 80004aa:	d100      	bne.n	80004ae <__aeabi_fsub+0x42>
 80004ac:	e0d9      	b.n	8000662 <__aeabi_fsub+0x1f6>
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4316      	orrs	r6, r2
 80004b4:	281b      	cmp	r0, #27
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_fsub+0x4e>
 80004b8:	e0e9      	b.n	800068e <__aeabi_fsub+0x222>
 80004ba:	2001      	movs	r0, #1
 80004bc:	4663      	mov	r3, ip
 80004be:	1a18      	subs	r0, r3, r0
 80004c0:	0143      	lsls	r3, r0, #5
 80004c2:	d400      	bmi.n	80004c6 <__aeabi_fsub+0x5a>
 80004c4:	e0b4      	b.n	8000630 <__aeabi_fsub+0x1c4>
 80004c6:	0180      	lsls	r0, r0, #6
 80004c8:	0987      	lsrs	r7, r0, #6
 80004ca:	0038      	movs	r0, r7
 80004cc:	f000 fcd8 	bl	8000e80 <__clzsi2>
 80004d0:	3805      	subs	r0, #5
 80004d2:	4087      	lsls	r7, r0
 80004d4:	4285      	cmp	r5, r0
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fsub+0x6e>
 80004d8:	e0cc      	b.n	8000674 <__aeabi_fsub+0x208>
 80004da:	1a2d      	subs	r5, r5, r0
 80004dc:	48b5      	ldr	r0, [pc, #724]	; (80007b4 <__aeabi_fsub+0x348>)
 80004de:	4038      	ands	r0, r7
 80004e0:	0743      	lsls	r3, r0, #29
 80004e2:	d004      	beq.n	80004ee <__aeabi_fsub+0x82>
 80004e4:	230f      	movs	r3, #15
 80004e6:	4003      	ands	r3, r0
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d000      	beq.n	80004ee <__aeabi_fsub+0x82>
 80004ec:	3004      	adds	r0, #4
 80004ee:	0143      	lsls	r3, r0, #5
 80004f0:	d400      	bmi.n	80004f4 <__aeabi_fsub+0x88>
 80004f2:	e0a0      	b.n	8000636 <__aeabi_fsub+0x1ca>
 80004f4:	1c6a      	adds	r2, r5, #1
 80004f6:	2dfe      	cmp	r5, #254	; 0xfe
 80004f8:	d100      	bne.n	80004fc <__aeabi_fsub+0x90>
 80004fa:	e08d      	b.n	8000618 <__aeabi_fsub+0x1ac>
 80004fc:	0180      	lsls	r0, r0, #6
 80004fe:	0a47      	lsrs	r7, r0, #9
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	05d0      	lsls	r0, r2, #23
 8000504:	4338      	orrs	r0, r7
 8000506:	07e4      	lsls	r4, r4, #31
 8000508:	4320      	orrs	r0, r4
 800050a:	bcc0      	pop	{r6, r7}
 800050c:	46b9      	mov	r9, r7
 800050e:	46b0      	mov	r8, r6
 8000510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000512:	1aa8      	subs	r0, r5, r2
 8000514:	4680      	mov	r8, r0
 8000516:	2800      	cmp	r0, #0
 8000518:	dd45      	ble.n	80005a6 <__aeabi_fsub+0x13a>
 800051a:	2a00      	cmp	r2, #0
 800051c:	d070      	beq.n	8000600 <__aeabi_fsub+0x194>
 800051e:	2dff      	cmp	r5, #255	; 0xff
 8000520:	d100      	bne.n	8000524 <__aeabi_fsub+0xb8>
 8000522:	e09e      	b.n	8000662 <__aeabi_fsub+0x1f6>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	04db      	lsls	r3, r3, #19
 8000528:	431e      	orrs	r6, r3
 800052a:	4643      	mov	r3, r8
 800052c:	2b1b      	cmp	r3, #27
 800052e:	dc00      	bgt.n	8000532 <__aeabi_fsub+0xc6>
 8000530:	e0d2      	b.n	80006d8 <__aeabi_fsub+0x26c>
 8000532:	2001      	movs	r0, #1
 8000534:	4460      	add	r0, ip
 8000536:	0143      	lsls	r3, r0, #5
 8000538:	d57a      	bpl.n	8000630 <__aeabi_fsub+0x1c4>
 800053a:	3501      	adds	r5, #1
 800053c:	2dff      	cmp	r5, #255	; 0xff
 800053e:	d06b      	beq.n	8000618 <__aeabi_fsub+0x1ac>
 8000540:	2301      	movs	r3, #1
 8000542:	4a9d      	ldr	r2, [pc, #628]	; (80007b8 <__aeabi_fsub+0x34c>)
 8000544:	4003      	ands	r3, r0
 8000546:	0840      	lsrs	r0, r0, #1
 8000548:	4010      	ands	r0, r2
 800054a:	4318      	orrs	r0, r3
 800054c:	e7c8      	b.n	80004e0 <__aeabi_fsub+0x74>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d020      	beq.n	8000594 <__aeabi_fsub+0x128>
 8000552:	428c      	cmp	r4, r1
 8000554:	d023      	beq.n	800059e <__aeabi_fsub+0x132>
 8000556:	0028      	movs	r0, r5
 8000558:	38ff      	subs	r0, #255	; 0xff
 800055a:	2800      	cmp	r0, #0
 800055c:	d039      	beq.n	80005d2 <__aeabi_fsub+0x166>
 800055e:	1b57      	subs	r7, r2, r5
 8000560:	2d00      	cmp	r5, #0
 8000562:	d000      	beq.n	8000566 <__aeabi_fsub+0xfa>
 8000564:	e09d      	b.n	80006a2 <__aeabi_fsub+0x236>
 8000566:	4663      	mov	r3, ip
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fsub+0x102>
 800056c:	e0db      	b.n	8000726 <__aeabi_fsub+0x2ba>
 800056e:	1e7b      	subs	r3, r7, #1
 8000570:	2f01      	cmp	r7, #1
 8000572:	d100      	bne.n	8000576 <__aeabi_fsub+0x10a>
 8000574:	e10d      	b.n	8000792 <__aeabi_fsub+0x326>
 8000576:	2fff      	cmp	r7, #255	; 0xff
 8000578:	d071      	beq.n	800065e <__aeabi_fsub+0x1f2>
 800057a:	001f      	movs	r7, r3
 800057c:	e098      	b.n	80006b0 <__aeabi_fsub+0x244>
 800057e:	2e00      	cmp	r6, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_fsub+0x118>
 8000582:	e0a7      	b.n	80006d4 <__aeabi_fsub+0x268>
 8000584:	1e42      	subs	r2, r0, #1
 8000586:	2801      	cmp	r0, #1
 8000588:	d100      	bne.n	800058c <__aeabi_fsub+0x120>
 800058a:	e0e6      	b.n	800075a <__aeabi_fsub+0x2ee>
 800058c:	28ff      	cmp	r0, #255	; 0xff
 800058e:	d068      	beq.n	8000662 <__aeabi_fsub+0x1f6>
 8000590:	0010      	movs	r0, r2
 8000592:	e78f      	b.n	80004b4 <__aeabi_fsub+0x48>
 8000594:	2001      	movs	r0, #1
 8000596:	4041      	eors	r1, r0
 8000598:	42a1      	cmp	r1, r4
 800059a:	d000      	beq.n	800059e <__aeabi_fsub+0x132>
 800059c:	e77f      	b.n	800049e <__aeabi_fsub+0x32>
 800059e:	20ff      	movs	r0, #255	; 0xff
 80005a0:	4240      	negs	r0, r0
 80005a2:	4680      	mov	r8, r0
 80005a4:	44a8      	add	r8, r5
 80005a6:	4640      	mov	r0, r8
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d038      	beq.n	800061e <__aeabi_fsub+0x1b2>
 80005ac:	1b51      	subs	r1, r2, r5
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fsub+0x148>
 80005b2:	e0ae      	b.n	8000712 <__aeabi_fsub+0x2a6>
 80005b4:	2aff      	cmp	r2, #255	; 0xff
 80005b6:	d100      	bne.n	80005ba <__aeabi_fsub+0x14e>
 80005b8:	e0df      	b.n	800077a <__aeabi_fsub+0x30e>
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	4660      	mov	r0, ip
 80005be:	04db      	lsls	r3, r3, #19
 80005c0:	4318      	orrs	r0, r3
 80005c2:	4684      	mov	ip, r0
 80005c4:	291b      	cmp	r1, #27
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fsub+0x15e>
 80005c8:	e0d9      	b.n	800077e <__aeabi_fsub+0x312>
 80005ca:	2001      	movs	r0, #1
 80005cc:	0015      	movs	r5, r2
 80005ce:	1980      	adds	r0, r0, r6
 80005d0:	e7b1      	b.n	8000536 <__aeabi_fsub+0xca>
 80005d2:	20fe      	movs	r0, #254	; 0xfe
 80005d4:	1c6a      	adds	r2, r5, #1
 80005d6:	4210      	tst	r0, r2
 80005d8:	d171      	bne.n	80006be <__aeabi_fsub+0x252>
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fsub+0x174>
 80005de:	e0a6      	b.n	800072e <__aeabi_fsub+0x2c2>
 80005e0:	4663      	mov	r3, ip
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fsub+0x17c>
 80005e6:	e0d9      	b.n	800079c <__aeabi_fsub+0x330>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fsub+0x184>
 80005ee:	e788      	b.n	8000502 <__aeabi_fsub+0x96>
 80005f0:	1b98      	subs	r0, r3, r6
 80005f2:	0143      	lsls	r3, r0, #5
 80005f4:	d400      	bmi.n	80005f8 <__aeabi_fsub+0x18c>
 80005f6:	e0e1      	b.n	80007bc <__aeabi_fsub+0x350>
 80005f8:	4663      	mov	r3, ip
 80005fa:	000c      	movs	r4, r1
 80005fc:	1af0      	subs	r0, r6, r3
 80005fe:	e76f      	b.n	80004e0 <__aeabi_fsub+0x74>
 8000600:	2e00      	cmp	r6, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_fsub+0x19a>
 8000604:	e0b7      	b.n	8000776 <__aeabi_fsub+0x30a>
 8000606:	0002      	movs	r2, r0
 8000608:	3a01      	subs	r2, #1
 800060a:	2801      	cmp	r0, #1
 800060c:	d100      	bne.n	8000610 <__aeabi_fsub+0x1a4>
 800060e:	e09c      	b.n	800074a <__aeabi_fsub+0x2de>
 8000610:	28ff      	cmp	r0, #255	; 0xff
 8000612:	d026      	beq.n	8000662 <__aeabi_fsub+0x1f6>
 8000614:	4690      	mov	r8, r2
 8000616:	e788      	b.n	800052a <__aeabi_fsub+0xbe>
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	2700      	movs	r7, #0
 800061c:	e771      	b.n	8000502 <__aeabi_fsub+0x96>
 800061e:	20fe      	movs	r0, #254	; 0xfe
 8000620:	1c6a      	adds	r2, r5, #1
 8000622:	4210      	tst	r0, r2
 8000624:	d064      	beq.n	80006f0 <__aeabi_fsub+0x284>
 8000626:	2aff      	cmp	r2, #255	; 0xff
 8000628:	d0f6      	beq.n	8000618 <__aeabi_fsub+0x1ac>
 800062a:	0015      	movs	r5, r2
 800062c:	4466      	add	r6, ip
 800062e:	0870      	lsrs	r0, r6, #1
 8000630:	0743      	lsls	r3, r0, #29
 8000632:	d000      	beq.n	8000636 <__aeabi_fsub+0x1ca>
 8000634:	e756      	b.n	80004e4 <__aeabi_fsub+0x78>
 8000636:	08c3      	lsrs	r3, r0, #3
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d012      	beq.n	8000662 <__aeabi_fsub+0x1f6>
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5f      	lsrs	r7, r3, #9
 8000640:	b2ea      	uxtb	r2, r5
 8000642:	e75e      	b.n	8000502 <__aeabi_fsub+0x96>
 8000644:	4662      	mov	r2, ip
 8000646:	2a00      	cmp	r2, #0
 8000648:	d100      	bne.n	800064c <__aeabi_fsub+0x1e0>
 800064a:	e096      	b.n	800077a <__aeabi_fsub+0x30e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d008      	beq.n	8000662 <__aeabi_fsub+0x1f6>
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	03d2      	lsls	r2, r2, #15
 8000654:	4213      	tst	r3, r2
 8000656:	d004      	beq.n	8000662 <__aeabi_fsub+0x1f6>
 8000658:	4648      	mov	r0, r9
 800065a:	4210      	tst	r0, r2
 800065c:	d101      	bne.n	8000662 <__aeabi_fsub+0x1f6>
 800065e:	000c      	movs	r4, r1
 8000660:	464b      	mov	r3, r9
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0d8      	beq.n	8000618 <__aeabi_fsub+0x1ac>
 8000666:	2780      	movs	r7, #128	; 0x80
 8000668:	03ff      	lsls	r7, r7, #15
 800066a:	431f      	orrs	r7, r3
 800066c:	027f      	lsls	r7, r7, #9
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	0a7f      	lsrs	r7, r7, #9
 8000672:	e746      	b.n	8000502 <__aeabi_fsub+0x96>
 8000674:	2320      	movs	r3, #32
 8000676:	003a      	movs	r2, r7
 8000678:	1b45      	subs	r5, r0, r5
 800067a:	0038      	movs	r0, r7
 800067c:	3501      	adds	r5, #1
 800067e:	40ea      	lsrs	r2, r5
 8000680:	1b5d      	subs	r5, r3, r5
 8000682:	40a8      	lsls	r0, r5
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	2500      	movs	r5, #0
 800068a:	4310      	orrs	r0, r2
 800068c:	e728      	b.n	80004e0 <__aeabi_fsub+0x74>
 800068e:	2320      	movs	r3, #32
 8000690:	1a1b      	subs	r3, r3, r0
 8000692:	0032      	movs	r2, r6
 8000694:	409e      	lsls	r6, r3
 8000696:	40c2      	lsrs	r2, r0
 8000698:	0030      	movs	r0, r6
 800069a:	1e43      	subs	r3, r0, #1
 800069c:	4198      	sbcs	r0, r3
 800069e:	4310      	orrs	r0, r2
 80006a0:	e70c      	b.n	80004bc <__aeabi_fsub+0x50>
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d0db      	beq.n	800065e <__aeabi_fsub+0x1f2>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	4660      	mov	r0, ip
 80006aa:	04db      	lsls	r3, r3, #19
 80006ac:	4318      	orrs	r0, r3
 80006ae:	4684      	mov	ip, r0
 80006b0:	2f1b      	cmp	r7, #27
 80006b2:	dd56      	ble.n	8000762 <__aeabi_fsub+0x2f6>
 80006b4:	2001      	movs	r0, #1
 80006b6:	000c      	movs	r4, r1
 80006b8:	0015      	movs	r5, r2
 80006ba:	1a30      	subs	r0, r6, r0
 80006bc:	e700      	b.n	80004c0 <__aeabi_fsub+0x54>
 80006be:	4663      	mov	r3, ip
 80006c0:	1b9f      	subs	r7, r3, r6
 80006c2:	017b      	lsls	r3, r7, #5
 80006c4:	d43d      	bmi.n	8000742 <__aeabi_fsub+0x2d6>
 80006c6:	2f00      	cmp	r7, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_fsub+0x260>
 80006ca:	e6fe      	b.n	80004ca <__aeabi_fsub+0x5e>
 80006cc:	2400      	movs	r4, #0
 80006ce:	2200      	movs	r2, #0
 80006d0:	2700      	movs	r7, #0
 80006d2:	e716      	b.n	8000502 <__aeabi_fsub+0x96>
 80006d4:	0005      	movs	r5, r0
 80006d6:	e7af      	b.n	8000638 <__aeabi_fsub+0x1cc>
 80006d8:	0032      	movs	r2, r6
 80006da:	4643      	mov	r3, r8
 80006dc:	4641      	mov	r1, r8
 80006de:	40da      	lsrs	r2, r3
 80006e0:	2320      	movs	r3, #32
 80006e2:	1a5b      	subs	r3, r3, r1
 80006e4:	409e      	lsls	r6, r3
 80006e6:	0030      	movs	r0, r6
 80006e8:	1e43      	subs	r3, r0, #1
 80006ea:	4198      	sbcs	r0, r3
 80006ec:	4310      	orrs	r0, r2
 80006ee:	e721      	b.n	8000534 <__aeabi_fsub+0xc8>
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	d1a7      	bne.n	8000644 <__aeabi_fsub+0x1d8>
 80006f4:	4663      	mov	r3, ip
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d059      	beq.n	80007ae <__aeabi_fsub+0x342>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fsub+0x296>
 8000700:	e6ff      	b.n	8000502 <__aeabi_fsub+0x96>
 8000702:	0030      	movs	r0, r6
 8000704:	4460      	add	r0, ip
 8000706:	0143      	lsls	r3, r0, #5
 8000708:	d592      	bpl.n	8000630 <__aeabi_fsub+0x1c4>
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <__aeabi_fsub+0x348>)
 800070c:	3501      	adds	r5, #1
 800070e:	4018      	ands	r0, r3
 8000710:	e78e      	b.n	8000630 <__aeabi_fsub+0x1c4>
 8000712:	4663      	mov	r3, ip
 8000714:	2b00      	cmp	r3, #0
 8000716:	d047      	beq.n	80007a8 <__aeabi_fsub+0x33c>
 8000718:	1e4b      	subs	r3, r1, #1
 800071a:	2901      	cmp	r1, #1
 800071c:	d015      	beq.n	800074a <__aeabi_fsub+0x2de>
 800071e:	29ff      	cmp	r1, #255	; 0xff
 8000720:	d02b      	beq.n	800077a <__aeabi_fsub+0x30e>
 8000722:	0019      	movs	r1, r3
 8000724:	e74e      	b.n	80005c4 <__aeabi_fsub+0x158>
 8000726:	000c      	movs	r4, r1
 8000728:	464b      	mov	r3, r9
 800072a:	003d      	movs	r5, r7
 800072c:	e784      	b.n	8000638 <__aeabi_fsub+0x1cc>
 800072e:	4662      	mov	r2, ip
 8000730:	2a00      	cmp	r2, #0
 8000732:	d18b      	bne.n	800064c <__aeabi_fsub+0x1e0>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d192      	bne.n	800065e <__aeabi_fsub+0x1f2>
 8000738:	2780      	movs	r7, #128	; 0x80
 800073a:	2400      	movs	r4, #0
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	03ff      	lsls	r7, r7, #15
 8000740:	e6df      	b.n	8000502 <__aeabi_fsub+0x96>
 8000742:	4663      	mov	r3, ip
 8000744:	000c      	movs	r4, r1
 8000746:	1af7      	subs	r7, r6, r3
 8000748:	e6bf      	b.n	80004ca <__aeabi_fsub+0x5e>
 800074a:	0030      	movs	r0, r6
 800074c:	4460      	add	r0, ip
 800074e:	2501      	movs	r5, #1
 8000750:	0143      	lsls	r3, r0, #5
 8000752:	d400      	bmi.n	8000756 <__aeabi_fsub+0x2ea>
 8000754:	e76c      	b.n	8000630 <__aeabi_fsub+0x1c4>
 8000756:	2502      	movs	r5, #2
 8000758:	e6f2      	b.n	8000540 <__aeabi_fsub+0xd4>
 800075a:	4663      	mov	r3, ip
 800075c:	2501      	movs	r5, #1
 800075e:	1b98      	subs	r0, r3, r6
 8000760:	e6ae      	b.n	80004c0 <__aeabi_fsub+0x54>
 8000762:	2320      	movs	r3, #32
 8000764:	4664      	mov	r4, ip
 8000766:	4660      	mov	r0, ip
 8000768:	40fc      	lsrs	r4, r7
 800076a:	1bdf      	subs	r7, r3, r7
 800076c:	40b8      	lsls	r0, r7
 800076e:	1e43      	subs	r3, r0, #1
 8000770:	4198      	sbcs	r0, r3
 8000772:	4320      	orrs	r0, r4
 8000774:	e79f      	b.n	80006b6 <__aeabi_fsub+0x24a>
 8000776:	0005      	movs	r5, r0
 8000778:	e75e      	b.n	8000638 <__aeabi_fsub+0x1cc>
 800077a:	464b      	mov	r3, r9
 800077c:	e771      	b.n	8000662 <__aeabi_fsub+0x1f6>
 800077e:	2320      	movs	r3, #32
 8000780:	4665      	mov	r5, ip
 8000782:	4660      	mov	r0, ip
 8000784:	40cd      	lsrs	r5, r1
 8000786:	1a59      	subs	r1, r3, r1
 8000788:	4088      	lsls	r0, r1
 800078a:	1e43      	subs	r3, r0, #1
 800078c:	4198      	sbcs	r0, r3
 800078e:	4328      	orrs	r0, r5
 8000790:	e71c      	b.n	80005cc <__aeabi_fsub+0x160>
 8000792:	4663      	mov	r3, ip
 8000794:	000c      	movs	r4, r1
 8000796:	2501      	movs	r5, #1
 8000798:	1af0      	subs	r0, r6, r3
 800079a:	e691      	b.n	80004c0 <__aeabi_fsub+0x54>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d095      	beq.n	80006cc <__aeabi_fsub+0x260>
 80007a0:	000c      	movs	r4, r1
 80007a2:	464f      	mov	r7, r9
 80007a4:	2200      	movs	r2, #0
 80007a6:	e6ac      	b.n	8000502 <__aeabi_fsub+0x96>
 80007a8:	464b      	mov	r3, r9
 80007aa:	000d      	movs	r5, r1
 80007ac:	e744      	b.n	8000638 <__aeabi_fsub+0x1cc>
 80007ae:	464f      	mov	r7, r9
 80007b0:	2200      	movs	r2, #0
 80007b2:	e6a6      	b.n	8000502 <__aeabi_fsub+0x96>
 80007b4:	fbffffff 	.word	0xfbffffff
 80007b8:	7dffffff 	.word	0x7dffffff
 80007bc:	2800      	cmp	r0, #0
 80007be:	d000      	beq.n	80007c2 <__aeabi_fsub+0x356>
 80007c0:	e736      	b.n	8000630 <__aeabi_fsub+0x1c4>
 80007c2:	2400      	movs	r4, #0
 80007c4:	2700      	movs	r7, #0
 80007c6:	e69c      	b.n	8000502 <__aeabi_fsub+0x96>

080007c8 <__aeabi_ui2f>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	1e05      	subs	r5, r0, #0
 80007cc:	d00e      	beq.n	80007ec <__aeabi_ui2f+0x24>
 80007ce:	f000 fb57 	bl	8000e80 <__clzsi2>
 80007d2:	239e      	movs	r3, #158	; 0x9e
 80007d4:	0004      	movs	r4, r0
 80007d6:	1a1b      	subs	r3, r3, r0
 80007d8:	2b96      	cmp	r3, #150	; 0x96
 80007da:	dc0c      	bgt.n	80007f6 <__aeabi_ui2f+0x2e>
 80007dc:	2808      	cmp	r0, #8
 80007de:	dd01      	ble.n	80007e4 <__aeabi_ui2f+0x1c>
 80007e0:	3c08      	subs	r4, #8
 80007e2:	40a5      	lsls	r5, r4
 80007e4:	026d      	lsls	r5, r5, #9
 80007e6:	0a6d      	lsrs	r5, r5, #9
 80007e8:	b2d8      	uxtb	r0, r3
 80007ea:	e001      	b.n	80007f0 <__aeabi_ui2f+0x28>
 80007ec:	2000      	movs	r0, #0
 80007ee:	2500      	movs	r5, #0
 80007f0:	05c0      	lsls	r0, r0, #23
 80007f2:	4328      	orrs	r0, r5
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	2b99      	cmp	r3, #153	; 0x99
 80007f8:	dd09      	ble.n	800080e <__aeabi_ui2f+0x46>
 80007fa:	0002      	movs	r2, r0
 80007fc:	0029      	movs	r1, r5
 80007fe:	321b      	adds	r2, #27
 8000800:	4091      	lsls	r1, r2
 8000802:	1e4a      	subs	r2, r1, #1
 8000804:	4191      	sbcs	r1, r2
 8000806:	2205      	movs	r2, #5
 8000808:	1a12      	subs	r2, r2, r0
 800080a:	40d5      	lsrs	r5, r2
 800080c:	430d      	orrs	r5, r1
 800080e:	2c05      	cmp	r4, #5
 8000810:	dc12      	bgt.n	8000838 <__aeabi_ui2f+0x70>
 8000812:	0029      	movs	r1, r5
 8000814:	4e0c      	ldr	r6, [pc, #48]	; (8000848 <__aeabi_ui2f+0x80>)
 8000816:	4031      	ands	r1, r6
 8000818:	076a      	lsls	r2, r5, #29
 800081a:	d009      	beq.n	8000830 <__aeabi_ui2f+0x68>
 800081c:	200f      	movs	r0, #15
 800081e:	4028      	ands	r0, r5
 8000820:	2804      	cmp	r0, #4
 8000822:	d005      	beq.n	8000830 <__aeabi_ui2f+0x68>
 8000824:	3104      	adds	r1, #4
 8000826:	014a      	lsls	r2, r1, #5
 8000828:	d502      	bpl.n	8000830 <__aeabi_ui2f+0x68>
 800082a:	239f      	movs	r3, #159	; 0x9f
 800082c:	4031      	ands	r1, r6
 800082e:	1b1b      	subs	r3, r3, r4
 8000830:	0189      	lsls	r1, r1, #6
 8000832:	0a4d      	lsrs	r5, r1, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e7db      	b.n	80007f0 <__aeabi_ui2f+0x28>
 8000838:	1f62      	subs	r2, r4, #5
 800083a:	4095      	lsls	r5, r2
 800083c:	0029      	movs	r1, r5
 800083e:	4e02      	ldr	r6, [pc, #8]	; (8000848 <__aeabi_ui2f+0x80>)
 8000840:	4031      	ands	r1, r6
 8000842:	076a      	lsls	r2, r5, #29
 8000844:	d0f4      	beq.n	8000830 <__aeabi_ui2f+0x68>
 8000846:	e7e9      	b.n	800081c <__aeabi_ui2f+0x54>
 8000848:	fbffffff 	.word	0xfbffffff

0800084c <__aeabi_dmul>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	4657      	mov	r7, sl
 8000850:	464e      	mov	r6, r9
 8000852:	4645      	mov	r5, r8
 8000854:	46de      	mov	lr, fp
 8000856:	b5e0      	push	{r5, r6, r7, lr}
 8000858:	4698      	mov	r8, r3
 800085a:	030c      	lsls	r4, r1, #12
 800085c:	004b      	lsls	r3, r1, #1
 800085e:	0006      	movs	r6, r0
 8000860:	4692      	mov	sl, r2
 8000862:	b087      	sub	sp, #28
 8000864:	0b24      	lsrs	r4, r4, #12
 8000866:	0d5b      	lsrs	r3, r3, #21
 8000868:	0fcf      	lsrs	r7, r1, #31
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_dmul+0x24>
 800086e:	e15c      	b.n	8000b2a <__aeabi_dmul+0x2de>
 8000870:	4ad9      	ldr	r2, [pc, #868]	; (8000bd8 <__aeabi_dmul+0x38c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d100      	bne.n	8000878 <__aeabi_dmul+0x2c>
 8000876:	e175      	b.n	8000b64 <__aeabi_dmul+0x318>
 8000878:	0f42      	lsrs	r2, r0, #29
 800087a:	00e4      	lsls	r4, r4, #3
 800087c:	4314      	orrs	r4, r2
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0412      	lsls	r2, r2, #16
 8000882:	4314      	orrs	r4, r2
 8000884:	4ad5      	ldr	r2, [pc, #852]	; (8000bdc <__aeabi_dmul+0x390>)
 8000886:	00c5      	lsls	r5, r0, #3
 8000888:	4694      	mov	ip, r2
 800088a:	4463      	add	r3, ip
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	4699      	mov	r9, r3
 8000892:	469b      	mov	fp, r3
 8000894:	4643      	mov	r3, r8
 8000896:	4642      	mov	r2, r8
 8000898:	031e      	lsls	r6, r3, #12
 800089a:	0fd2      	lsrs	r2, r2, #31
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4650      	mov	r0, sl
 80008a0:	4690      	mov	r8, r2
 80008a2:	0b36      	lsrs	r6, r6, #12
 80008a4:	0d5b      	lsrs	r3, r3, #21
 80008a6:	d100      	bne.n	80008aa <__aeabi_dmul+0x5e>
 80008a8:	e120      	b.n	8000aec <__aeabi_dmul+0x2a0>
 80008aa:	4acb      	ldr	r2, [pc, #812]	; (8000bd8 <__aeabi_dmul+0x38c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dmul+0x66>
 80008b0:	e162      	b.n	8000b78 <__aeabi_dmul+0x32c>
 80008b2:	49ca      	ldr	r1, [pc, #808]	; (8000bdc <__aeabi_dmul+0x390>)
 80008b4:	0f42      	lsrs	r2, r0, #29
 80008b6:	468c      	mov	ip, r1
 80008b8:	9900      	ldr	r1, [sp, #0]
 80008ba:	4463      	add	r3, ip
 80008bc:	00f6      	lsls	r6, r6, #3
 80008be:	468c      	mov	ip, r1
 80008c0:	4316      	orrs	r6, r2
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	449c      	add	ip, r3
 80008c6:	0412      	lsls	r2, r2, #16
 80008c8:	4663      	mov	r3, ip
 80008ca:	4316      	orrs	r6, r2
 80008cc:	00c2      	lsls	r2, r0, #3
 80008ce:	2000      	movs	r0, #0
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	9900      	ldr	r1, [sp, #0]
 80008d4:	4643      	mov	r3, r8
 80008d6:	3101      	adds	r1, #1
 80008d8:	468c      	mov	ip, r1
 80008da:	4649      	mov	r1, r9
 80008dc:	407b      	eors	r3, r7
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	290f      	cmp	r1, #15
 80008e2:	d826      	bhi.n	8000932 <__aeabi_dmul+0xe6>
 80008e4:	4bbe      	ldr	r3, [pc, #760]	; (8000be0 <__aeabi_dmul+0x394>)
 80008e6:	0089      	lsls	r1, r1, #2
 80008e8:	5859      	ldr	r1, [r3, r1]
 80008ea:	468f      	mov	pc, r1
 80008ec:	4643      	mov	r3, r8
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	0034      	movs	r4, r6
 80008f2:	0015      	movs	r5, r2
 80008f4:	4683      	mov	fp, r0
 80008f6:	465b      	mov	r3, fp
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d016      	beq.n	800092a <__aeabi_dmul+0xde>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_dmul+0xb6>
 8000900:	e203      	b.n	8000d0a <__aeabi_dmul+0x4be>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d000      	beq.n	8000908 <__aeabi_dmul+0xbc>
 8000906:	e0cd      	b.n	8000aa4 <__aeabi_dmul+0x258>
 8000908:	2200      	movs	r2, #0
 800090a:	2400      	movs	r4, #0
 800090c:	2500      	movs	r5, #0
 800090e:	9b01      	ldr	r3, [sp, #4]
 8000910:	0512      	lsls	r2, r2, #20
 8000912:	4322      	orrs	r2, r4
 8000914:	07db      	lsls	r3, r3, #31
 8000916:	431a      	orrs	r2, r3
 8000918:	0028      	movs	r0, r5
 800091a:	0011      	movs	r1, r2
 800091c:	b007      	add	sp, #28
 800091e:	bcf0      	pop	{r4, r5, r6, r7}
 8000920:	46bb      	mov	fp, r7
 8000922:	46b2      	mov	sl, r6
 8000924:	46a9      	mov	r9, r5
 8000926:	46a0      	mov	r8, r4
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	2400      	movs	r4, #0
 800092c:	2500      	movs	r5, #0
 800092e:	4aaa      	ldr	r2, [pc, #680]	; (8000bd8 <__aeabi_dmul+0x38c>)
 8000930:	e7ed      	b.n	800090e <__aeabi_dmul+0xc2>
 8000932:	0c28      	lsrs	r0, r5, #16
 8000934:	042d      	lsls	r5, r5, #16
 8000936:	0c2d      	lsrs	r5, r5, #16
 8000938:	002b      	movs	r3, r5
 800093a:	0c11      	lsrs	r1, r2, #16
 800093c:	0412      	lsls	r2, r2, #16
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	4353      	muls	r3, r2
 8000942:	4698      	mov	r8, r3
 8000944:	0013      	movs	r3, r2
 8000946:	002f      	movs	r7, r5
 8000948:	4343      	muls	r3, r0
 800094a:	4699      	mov	r9, r3
 800094c:	434f      	muls	r7, r1
 800094e:	444f      	add	r7, r9
 8000950:	46bb      	mov	fp, r7
 8000952:	4647      	mov	r7, r8
 8000954:	000b      	movs	r3, r1
 8000956:	0c3f      	lsrs	r7, r7, #16
 8000958:	46ba      	mov	sl, r7
 800095a:	4343      	muls	r3, r0
 800095c:	44da      	add	sl, fp
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	45d1      	cmp	r9, sl
 8000962:	d904      	bls.n	800096e <__aeabi_dmul+0x122>
 8000964:	2780      	movs	r7, #128	; 0x80
 8000966:	027f      	lsls	r7, r7, #9
 8000968:	46b9      	mov	r9, r7
 800096a:	444b      	add	r3, r9
 800096c:	9302      	str	r3, [sp, #8]
 800096e:	4653      	mov	r3, sl
 8000970:	0c1b      	lsrs	r3, r3, #16
 8000972:	469b      	mov	fp, r3
 8000974:	4653      	mov	r3, sl
 8000976:	041f      	lsls	r7, r3, #16
 8000978:	4643      	mov	r3, r8
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	0c1b      	lsrs	r3, r3, #16
 800097e:	4698      	mov	r8, r3
 8000980:	003b      	movs	r3, r7
 8000982:	4443      	add	r3, r8
 8000984:	9304      	str	r3, [sp, #16]
 8000986:	0c33      	lsrs	r3, r6, #16
 8000988:	0436      	lsls	r6, r6, #16
 800098a:	0c36      	lsrs	r6, r6, #16
 800098c:	4698      	mov	r8, r3
 800098e:	0033      	movs	r3, r6
 8000990:	4343      	muls	r3, r0
 8000992:	4699      	mov	r9, r3
 8000994:	4643      	mov	r3, r8
 8000996:	4343      	muls	r3, r0
 8000998:	002f      	movs	r7, r5
 800099a:	469a      	mov	sl, r3
 800099c:	4643      	mov	r3, r8
 800099e:	4377      	muls	r7, r6
 80009a0:	435d      	muls	r5, r3
 80009a2:	0c38      	lsrs	r0, r7, #16
 80009a4:	444d      	add	r5, r9
 80009a6:	1945      	adds	r5, r0, r5
 80009a8:	45a9      	cmp	r9, r5
 80009aa:	d903      	bls.n	80009b4 <__aeabi_dmul+0x168>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	025b      	lsls	r3, r3, #9
 80009b0:	4699      	mov	r9, r3
 80009b2:	44ca      	add	sl, r9
 80009b4:	043f      	lsls	r7, r7, #16
 80009b6:	0c28      	lsrs	r0, r5, #16
 80009b8:	0c3f      	lsrs	r7, r7, #16
 80009ba:	042d      	lsls	r5, r5, #16
 80009bc:	19ed      	adds	r5, r5, r7
 80009be:	0c27      	lsrs	r7, r4, #16
 80009c0:	0424      	lsls	r4, r4, #16
 80009c2:	0c24      	lsrs	r4, r4, #16
 80009c4:	0003      	movs	r3, r0
 80009c6:	0020      	movs	r0, r4
 80009c8:	4350      	muls	r0, r2
 80009ca:	437a      	muls	r2, r7
 80009cc:	4691      	mov	r9, r2
 80009ce:	003a      	movs	r2, r7
 80009d0:	4453      	add	r3, sl
 80009d2:	9305      	str	r3, [sp, #20]
 80009d4:	0c03      	lsrs	r3, r0, #16
 80009d6:	469a      	mov	sl, r3
 80009d8:	434a      	muls	r2, r1
 80009da:	4361      	muls	r1, r4
 80009dc:	4449      	add	r1, r9
 80009de:	4451      	add	r1, sl
 80009e0:	44ab      	add	fp, r5
 80009e2:	4589      	cmp	r9, r1
 80009e4:	d903      	bls.n	80009ee <__aeabi_dmul+0x1a2>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	4699      	mov	r9, r3
 80009ec:	444a      	add	r2, r9
 80009ee:	0400      	lsls	r0, r0, #16
 80009f0:	0c0b      	lsrs	r3, r1, #16
 80009f2:	0c00      	lsrs	r0, r0, #16
 80009f4:	0409      	lsls	r1, r1, #16
 80009f6:	1809      	adds	r1, r1, r0
 80009f8:	0020      	movs	r0, r4
 80009fa:	4699      	mov	r9, r3
 80009fc:	4643      	mov	r3, r8
 80009fe:	4370      	muls	r0, r6
 8000a00:	435c      	muls	r4, r3
 8000a02:	437e      	muls	r6, r7
 8000a04:	435f      	muls	r7, r3
 8000a06:	0c03      	lsrs	r3, r0, #16
 8000a08:	4698      	mov	r8, r3
 8000a0a:	19a4      	adds	r4, r4, r6
 8000a0c:	4444      	add	r4, r8
 8000a0e:	444a      	add	r2, r9
 8000a10:	9703      	str	r7, [sp, #12]
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d904      	bls.n	8000a20 <__aeabi_dmul+0x1d4>
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	4447      	add	r7, r8
 8000a1e:	9703      	str	r7, [sp, #12]
 8000a20:	0423      	lsls	r3, r4, #16
 8000a22:	9e02      	ldr	r6, [sp, #8]
 8000a24:	469a      	mov	sl, r3
 8000a26:	9b05      	ldr	r3, [sp, #20]
 8000a28:	445e      	add	r6, fp
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	42ae      	cmp	r6, r5
 8000a2e:	41ad      	sbcs	r5, r5
 8000a30:	1876      	adds	r6, r6, r1
 8000a32:	428e      	cmp	r6, r1
 8000a34:	4189      	sbcs	r1, r1
 8000a36:	0400      	lsls	r0, r0, #16
 8000a38:	0c00      	lsrs	r0, r0, #16
 8000a3a:	4450      	add	r0, sl
 8000a3c:	4440      	add	r0, r8
 8000a3e:	426d      	negs	r5, r5
 8000a40:	1947      	adds	r7, r0, r5
 8000a42:	46b8      	mov	r8, r7
 8000a44:	4693      	mov	fp, r2
 8000a46:	4249      	negs	r1, r1
 8000a48:	4689      	mov	r9, r1
 8000a4a:	44c3      	add	fp, r8
 8000a4c:	44d9      	add	r9, fp
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	4180      	sbcs	r0, r0
 8000a52:	45a8      	cmp	r8, r5
 8000a54:	41ad      	sbcs	r5, r5
 8000a56:	4593      	cmp	fp, r2
 8000a58:	4192      	sbcs	r2, r2
 8000a5a:	4589      	cmp	r9, r1
 8000a5c:	4189      	sbcs	r1, r1
 8000a5e:	426d      	negs	r5, r5
 8000a60:	4240      	negs	r0, r0
 8000a62:	4328      	orrs	r0, r5
 8000a64:	0c24      	lsrs	r4, r4, #16
 8000a66:	4252      	negs	r2, r2
 8000a68:	4249      	negs	r1, r1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	9b03      	ldr	r3, [sp, #12]
 8000a6e:	1900      	adds	r0, r0, r4
 8000a70:	1880      	adds	r0, r0, r2
 8000a72:	18c7      	adds	r7, r0, r3
 8000a74:	464b      	mov	r3, r9
 8000a76:	0ddc      	lsrs	r4, r3, #23
 8000a78:	9b04      	ldr	r3, [sp, #16]
 8000a7a:	0275      	lsls	r5, r6, #9
 8000a7c:	431d      	orrs	r5, r3
 8000a7e:	1e6a      	subs	r2, r5, #1
 8000a80:	4195      	sbcs	r5, r2
 8000a82:	464b      	mov	r3, r9
 8000a84:	0df6      	lsrs	r6, r6, #23
 8000a86:	027f      	lsls	r7, r7, #9
 8000a88:	4335      	orrs	r5, r6
 8000a8a:	025a      	lsls	r2, r3, #9
 8000a8c:	433c      	orrs	r4, r7
 8000a8e:	4315      	orrs	r5, r2
 8000a90:	01fb      	lsls	r3, r7, #7
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_dmul+0x24a>
 8000a94:	e11c      	b.n	8000cd0 <__aeabi_dmul+0x484>
 8000a96:	2101      	movs	r1, #1
 8000a98:	086a      	lsrs	r2, r5, #1
 8000a9a:	400d      	ands	r5, r1
 8000a9c:	4315      	orrs	r5, r2
 8000a9e:	07e2      	lsls	r2, r4, #31
 8000aa0:	4315      	orrs	r5, r2
 8000aa2:	0864      	lsrs	r4, r4, #1
 8000aa4:	494f      	ldr	r1, [pc, #316]	; (8000be4 <__aeabi_dmul+0x398>)
 8000aa6:	4461      	add	r1, ip
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_dmul+0x262>
 8000aac:	e0b0      	b.n	8000c10 <__aeabi_dmul+0x3c4>
 8000aae:	076b      	lsls	r3, r5, #29
 8000ab0:	d009      	beq.n	8000ac6 <__aeabi_dmul+0x27a>
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	402a      	ands	r2, r5
 8000ab6:	2a04      	cmp	r2, #4
 8000ab8:	d005      	beq.n	8000ac6 <__aeabi_dmul+0x27a>
 8000aba:	1d2a      	adds	r2, r5, #4
 8000abc:	42aa      	cmp	r2, r5
 8000abe:	41ad      	sbcs	r5, r5
 8000ac0:	426d      	negs	r5, r5
 8000ac2:	1964      	adds	r4, r4, r5
 8000ac4:	0015      	movs	r5, r2
 8000ac6:	01e3      	lsls	r3, r4, #7
 8000ac8:	d504      	bpl.n	8000ad4 <__aeabi_dmul+0x288>
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <__aeabi_dmul+0x39c>)
 8000ace:	00c9      	lsls	r1, r1, #3
 8000ad0:	4014      	ands	r4, r2
 8000ad2:	4461      	add	r1, ip
 8000ad4:	4a45      	ldr	r2, [pc, #276]	; (8000bec <__aeabi_dmul+0x3a0>)
 8000ad6:	4291      	cmp	r1, r2
 8000ad8:	dd00      	ble.n	8000adc <__aeabi_dmul+0x290>
 8000ada:	e726      	b.n	800092a <__aeabi_dmul+0xde>
 8000adc:	0762      	lsls	r2, r4, #29
 8000ade:	08ed      	lsrs	r5, r5, #3
 8000ae0:	0264      	lsls	r4, r4, #9
 8000ae2:	0549      	lsls	r1, r1, #21
 8000ae4:	4315      	orrs	r5, r2
 8000ae6:	0b24      	lsrs	r4, r4, #12
 8000ae8:	0d4a      	lsrs	r2, r1, #21
 8000aea:	e710      	b.n	800090e <__aeabi_dmul+0xc2>
 8000aec:	4652      	mov	r2, sl
 8000aee:	4332      	orrs	r2, r6
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dmul+0x2a8>
 8000af2:	e07f      	b.n	8000bf4 <__aeabi_dmul+0x3a8>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_dmul+0x2ae>
 8000af8:	e0dc      	b.n	8000cb4 <__aeabi_dmul+0x468>
 8000afa:	0030      	movs	r0, r6
 8000afc:	f000 f9c0 	bl	8000e80 <__clzsi2>
 8000b00:	0002      	movs	r2, r0
 8000b02:	3a0b      	subs	r2, #11
 8000b04:	231d      	movs	r3, #29
 8000b06:	0001      	movs	r1, r0
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	4652      	mov	r2, sl
 8000b0c:	3908      	subs	r1, #8
 8000b0e:	40da      	lsrs	r2, r3
 8000b10:	408e      	lsls	r6, r1
 8000b12:	4316      	orrs	r6, r2
 8000b14:	4652      	mov	r2, sl
 8000b16:	408a      	lsls	r2, r1
 8000b18:	9b00      	ldr	r3, [sp, #0]
 8000b1a:	4935      	ldr	r1, [pc, #212]	; (8000bf0 <__aeabi_dmul+0x3a4>)
 8000b1c:	1a18      	subs	r0, r3, r0
 8000b1e:	0003      	movs	r3, r0
 8000b20:	468c      	mov	ip, r1
 8000b22:	4463      	add	r3, ip
 8000b24:	2000      	movs	r0, #0
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	e6d3      	b.n	80008d2 <__aeabi_dmul+0x86>
 8000b2a:	0025      	movs	r5, r4
 8000b2c:	4305      	orrs	r5, r0
 8000b2e:	d04a      	beq.n	8000bc6 <__aeabi_dmul+0x37a>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dmul+0x2ea>
 8000b34:	e0b0      	b.n	8000c98 <__aeabi_dmul+0x44c>
 8000b36:	0020      	movs	r0, r4
 8000b38:	f000 f9a2 	bl	8000e80 <__clzsi2>
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	390b      	subs	r1, #11
 8000b42:	231d      	movs	r3, #29
 8000b44:	0010      	movs	r0, r2
 8000b46:	1a5b      	subs	r3, r3, r1
 8000b48:	0031      	movs	r1, r6
 8000b4a:	0035      	movs	r5, r6
 8000b4c:	3808      	subs	r0, #8
 8000b4e:	4084      	lsls	r4, r0
 8000b50:	40d9      	lsrs	r1, r3
 8000b52:	4085      	lsls	r5, r0
 8000b54:	430c      	orrs	r4, r1
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <__aeabi_dmul+0x3a4>)
 8000b58:	1a83      	subs	r3, r0, r2
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	469b      	mov	fp, r3
 8000b62:	e697      	b.n	8000894 <__aeabi_dmul+0x48>
 8000b64:	0005      	movs	r5, r0
 8000b66:	4325      	orrs	r5, r4
 8000b68:	d126      	bne.n	8000bb8 <__aeabi_dmul+0x36c>
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2302      	movs	r3, #2
 8000b70:	2400      	movs	r4, #0
 8000b72:	4691      	mov	r9, r2
 8000b74:	469b      	mov	fp, r3
 8000b76:	e68d      	b.n	8000894 <__aeabi_dmul+0x48>
 8000b78:	4652      	mov	r2, sl
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	4332      	orrs	r2, r6
 8000b7e:	d110      	bne.n	8000ba2 <__aeabi_dmul+0x356>
 8000b80:	4915      	ldr	r1, [pc, #84]	; (8000bd8 <__aeabi_dmul+0x38c>)
 8000b82:	2600      	movs	r6, #0
 8000b84:	468c      	mov	ip, r1
 8000b86:	4463      	add	r3, ip
 8000b88:	4649      	mov	r1, r9
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	4319      	orrs	r1, r3
 8000b90:	4689      	mov	r9, r1
 8000b92:	2002      	movs	r0, #2
 8000b94:	e69d      	b.n	80008d2 <__aeabi_dmul+0x86>
 8000b96:	465b      	mov	r3, fp
 8000b98:	9701      	str	r7, [sp, #4]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_dmul+0x354>
 8000b9e:	e6ad      	b.n	80008fc <__aeabi_dmul+0xb0>
 8000ba0:	e6c3      	b.n	800092a <__aeabi_dmul+0xde>
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <__aeabi_dmul+0x38c>)
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	4463      	add	r3, ip
 8000baa:	464a      	mov	r2, r9
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2303      	movs	r3, #3
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	4691      	mov	r9, r2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	e68c      	b.n	80008d2 <__aeabi_dmul+0x86>
 8000bb8:	220c      	movs	r2, #12
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	0005      	movs	r5, r0
 8000bc0:	4691      	mov	r9, r2
 8000bc2:	469b      	mov	fp, r3
 8000bc4:	e666      	b.n	8000894 <__aeabi_dmul+0x48>
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	4699      	mov	r9, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	469b      	mov	fp, r3
 8000bd4:	e65e      	b.n	8000894 <__aeabi_dmul+0x48>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	000007ff 	.word	0x000007ff
 8000bdc:	fffffc01 	.word	0xfffffc01
 8000be0:	080031b0 	.word	0x080031b0
 8000be4:	000003ff 	.word	0x000003ff
 8000be8:	feffffff 	.word	0xfeffffff
 8000bec:	000007fe 	.word	0x000007fe
 8000bf0:	fffffc0d 	.word	0xfffffc0d
 8000bf4:	4649      	mov	r1, r9
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	4689      	mov	r9, r1
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	2001      	movs	r0, #1
 8000c00:	e667      	b.n	80008d2 <__aeabi_dmul+0x86>
 8000c02:	2300      	movs	r3, #0
 8000c04:	2480      	movs	r4, #128	; 0x80
 8000c06:	2500      	movs	r5, #0
 8000c08:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <__aeabi_dmul+0x4cc>)
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	0324      	lsls	r4, r4, #12
 8000c0e:	e67e      	b.n	800090e <__aeabi_dmul+0xc2>
 8000c10:	2001      	movs	r0, #1
 8000c12:	1a40      	subs	r0, r0, r1
 8000c14:	2838      	cmp	r0, #56	; 0x38
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_dmul+0x3ce>
 8000c18:	e676      	b.n	8000908 <__aeabi_dmul+0xbc>
 8000c1a:	281f      	cmp	r0, #31
 8000c1c:	dd5b      	ble.n	8000cd6 <__aeabi_dmul+0x48a>
 8000c1e:	221f      	movs	r2, #31
 8000c20:	0023      	movs	r3, r4
 8000c22:	4252      	negs	r2, r2
 8000c24:	1a51      	subs	r1, r2, r1
 8000c26:	40cb      	lsrs	r3, r1
 8000c28:	0019      	movs	r1, r3
 8000c2a:	2820      	cmp	r0, #32
 8000c2c:	d003      	beq.n	8000c36 <__aeabi_dmul+0x3ea>
 8000c2e:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <__aeabi_dmul+0x4d0>)
 8000c30:	4462      	add	r2, ip
 8000c32:	4094      	lsls	r4, r2
 8000c34:	4325      	orrs	r5, r4
 8000c36:	1e6a      	subs	r2, r5, #1
 8000c38:	4195      	sbcs	r5, r2
 8000c3a:	002a      	movs	r2, r5
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	2107      	movs	r1, #7
 8000c40:	000d      	movs	r5, r1
 8000c42:	2400      	movs	r4, #0
 8000c44:	4015      	ands	r5, r2
 8000c46:	4211      	tst	r1, r2
 8000c48:	d05b      	beq.n	8000d02 <__aeabi_dmul+0x4b6>
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4011      	ands	r1, r2
 8000c50:	2904      	cmp	r1, #4
 8000c52:	d053      	beq.n	8000cfc <__aeabi_dmul+0x4b0>
 8000c54:	1d11      	adds	r1, r2, #4
 8000c56:	4291      	cmp	r1, r2
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	4252      	negs	r2, r2
 8000c5c:	18a4      	adds	r4, r4, r2
 8000c5e:	000a      	movs	r2, r1
 8000c60:	0223      	lsls	r3, r4, #8
 8000c62:	d54b      	bpl.n	8000cfc <__aeabi_dmul+0x4b0>
 8000c64:	2201      	movs	r2, #1
 8000c66:	2400      	movs	r4, #0
 8000c68:	2500      	movs	r5, #0
 8000c6a:	e650      	b.n	800090e <__aeabi_dmul+0xc2>
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	031b      	lsls	r3, r3, #12
 8000c70:	421c      	tst	r4, r3
 8000c72:	d009      	beq.n	8000c88 <__aeabi_dmul+0x43c>
 8000c74:	421e      	tst	r6, r3
 8000c76:	d107      	bne.n	8000c88 <__aeabi_dmul+0x43c>
 8000c78:	4333      	orrs	r3, r6
 8000c7a:	031c      	lsls	r4, r3, #12
 8000c7c:	4643      	mov	r3, r8
 8000c7e:	0015      	movs	r5, r2
 8000c80:	0b24      	lsrs	r4, r4, #12
 8000c82:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <__aeabi_dmul+0x4cc>)
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	e642      	b.n	800090e <__aeabi_dmul+0xc2>
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	0312      	lsls	r2, r2, #12
 8000c8c:	4314      	orrs	r4, r2
 8000c8e:	0324      	lsls	r4, r4, #12
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <__aeabi_dmul+0x4cc>)
 8000c92:	0b24      	lsrs	r4, r4, #12
 8000c94:	9701      	str	r7, [sp, #4]
 8000c96:	e63a      	b.n	800090e <__aeabi_dmul+0xc2>
 8000c98:	f000 f8f2 	bl	8000e80 <__clzsi2>
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	0002      	movs	r2, r0
 8000ca0:	3115      	adds	r1, #21
 8000ca2:	3220      	adds	r2, #32
 8000ca4:	291c      	cmp	r1, #28
 8000ca6:	dc00      	bgt.n	8000caa <__aeabi_dmul+0x45e>
 8000ca8:	e74b      	b.n	8000b42 <__aeabi_dmul+0x2f6>
 8000caa:	0034      	movs	r4, r6
 8000cac:	3808      	subs	r0, #8
 8000cae:	2500      	movs	r5, #0
 8000cb0:	4084      	lsls	r4, r0
 8000cb2:	e750      	b.n	8000b56 <__aeabi_dmul+0x30a>
 8000cb4:	f000 f8e4 	bl	8000e80 <__clzsi2>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	001a      	movs	r2, r3
 8000cbc:	3215      	adds	r2, #21
 8000cbe:	3020      	adds	r0, #32
 8000cc0:	2a1c      	cmp	r2, #28
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_dmul+0x47a>
 8000cc4:	e71e      	b.n	8000b04 <__aeabi_dmul+0x2b8>
 8000cc6:	4656      	mov	r6, sl
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	409e      	lsls	r6, r3
 8000cce:	e723      	b.n	8000b18 <__aeabi_dmul+0x2cc>
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	e6e6      	b.n	8000aa4 <__aeabi_dmul+0x258>
 8000cd6:	4912      	ldr	r1, [pc, #72]	; (8000d20 <__aeabi_dmul+0x4d4>)
 8000cd8:	0022      	movs	r2, r4
 8000cda:	4461      	add	r1, ip
 8000cdc:	002e      	movs	r6, r5
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	408a      	lsls	r2, r1
 8000ce2:	40c6      	lsrs	r6, r0
 8000ce4:	1e69      	subs	r1, r5, #1
 8000ce6:	418d      	sbcs	r5, r1
 8000ce8:	4332      	orrs	r2, r6
 8000cea:	432a      	orrs	r2, r5
 8000cec:	40c4      	lsrs	r4, r0
 8000cee:	0753      	lsls	r3, r2, #29
 8000cf0:	d0b6      	beq.n	8000c60 <__aeabi_dmul+0x414>
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	4011      	ands	r1, r2
 8000cf6:	2904      	cmp	r1, #4
 8000cf8:	d1ac      	bne.n	8000c54 <__aeabi_dmul+0x408>
 8000cfa:	e7b1      	b.n	8000c60 <__aeabi_dmul+0x414>
 8000cfc:	0765      	lsls	r5, r4, #29
 8000cfe:	0264      	lsls	r4, r4, #9
 8000d00:	0b24      	lsrs	r4, r4, #12
 8000d02:	08d2      	lsrs	r2, r2, #3
 8000d04:	4315      	orrs	r5, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	e601      	b.n	800090e <__aeabi_dmul+0xc2>
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	0312      	lsls	r2, r2, #12
 8000d0e:	4314      	orrs	r4, r2
 8000d10:	0324      	lsls	r4, r4, #12
 8000d12:	4a01      	ldr	r2, [pc, #4]	; (8000d18 <__aeabi_dmul+0x4cc>)
 8000d14:	0b24      	lsrs	r4, r4, #12
 8000d16:	e5fa      	b.n	800090e <__aeabi_dmul+0xc2>
 8000d18:	000007ff 	.word	0x000007ff
 8000d1c:	0000043e 	.word	0x0000043e
 8000d20:	0000041e 	.word	0x0000041e

08000d24 <__aeabi_ui2d>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	1e04      	subs	r4, r0, #0
 8000d28:	d010      	beq.n	8000d4c <__aeabi_ui2d+0x28>
 8000d2a:	f000 f8a9 	bl	8000e80 <__clzsi2>
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <__aeabi_ui2d+0x48>)
 8000d30:	1a1b      	subs	r3, r3, r0
 8000d32:	280a      	cmp	r0, #10
 8000d34:	dc11      	bgt.n	8000d5a <__aeabi_ui2d+0x36>
 8000d36:	220b      	movs	r2, #11
 8000d38:	0021      	movs	r1, r4
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	40d1      	lsrs	r1, r2
 8000d3e:	3015      	adds	r0, #21
 8000d40:	030a      	lsls	r2, r1, #12
 8000d42:	055b      	lsls	r3, r3, #21
 8000d44:	4084      	lsls	r4, r0
 8000d46:	0b12      	lsrs	r2, r2, #12
 8000d48:	0d5b      	lsrs	r3, r3, #21
 8000d4a:	e001      	b.n	8000d50 <__aeabi_ui2d+0x2c>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2200      	movs	r2, #0
 8000d50:	051b      	lsls	r3, r3, #20
 8000d52:	4313      	orrs	r3, r2
 8000d54:	0020      	movs	r0, r4
 8000d56:	0019      	movs	r1, r3
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	0022      	movs	r2, r4
 8000d5c:	380b      	subs	r0, #11
 8000d5e:	4082      	lsls	r2, r0
 8000d60:	055b      	lsls	r3, r3, #21
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	2400      	movs	r4, #0
 8000d66:	0b12      	lsrs	r2, r2, #12
 8000d68:	0d5b      	lsrs	r3, r3, #21
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_ui2d+0x2c>
 8000d6c:	0000041e 	.word	0x0000041e

08000d70 <__aeabi_d2f>:
 8000d70:	0002      	movs	r2, r0
 8000d72:	004b      	lsls	r3, r1, #1
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	0d5b      	lsrs	r3, r3, #21
 8000d78:	030c      	lsls	r4, r1, #12
 8000d7a:	4e3d      	ldr	r6, [pc, #244]	; (8000e70 <__aeabi_d2f+0x100>)
 8000d7c:	0a64      	lsrs	r4, r4, #9
 8000d7e:	0f40      	lsrs	r0, r0, #29
 8000d80:	1c5f      	adds	r7, r3, #1
 8000d82:	0fc9      	lsrs	r1, r1, #31
 8000d84:	4304      	orrs	r4, r0
 8000d86:	00d5      	lsls	r5, r2, #3
 8000d88:	4237      	tst	r7, r6
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_d2f+0x32>
 8000d8c:	4839      	ldr	r0, [pc, #228]	; (8000e74 <__aeabi_d2f+0x104>)
 8000d8e:	181e      	adds	r6, r3, r0
 8000d90:	2efe      	cmp	r6, #254	; 0xfe
 8000d92:	dd16      	ble.n	8000dc2 <__aeabi_d2f+0x52>
 8000d94:	20ff      	movs	r0, #255	; 0xff
 8000d96:	2400      	movs	r4, #0
 8000d98:	05c0      	lsls	r0, r0, #23
 8000d9a:	4320      	orrs	r0, r4
 8000d9c:	07c9      	lsls	r1, r1, #31
 8000d9e:	4308      	orrs	r0, r1
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <__aeabi_d2f+0x44>
 8000da6:	432c      	orrs	r4, r5
 8000da8:	d026      	beq.n	8000df8 <__aeabi_d2f+0x88>
 8000daa:	2205      	movs	r2, #5
 8000dac:	0192      	lsls	r2, r2, #6
 8000dae:	0a54      	lsrs	r4, r2, #9
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	e7f1      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000db4:	4325      	orrs	r5, r4
 8000db6:	d0ed      	beq.n	8000d94 <__aeabi_d2f+0x24>
 8000db8:	2080      	movs	r0, #128	; 0x80
 8000dba:	03c0      	lsls	r0, r0, #15
 8000dbc:	4304      	orrs	r4, r0
 8000dbe:	20ff      	movs	r0, #255	; 0xff
 8000dc0:	e7ea      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	dd1b      	ble.n	8000dfe <__aeabi_d2f+0x8e>
 8000dc6:	0192      	lsls	r2, r2, #6
 8000dc8:	1e53      	subs	r3, r2, #1
 8000dca:	419a      	sbcs	r2, r3
 8000dcc:	00e4      	lsls	r4, r4, #3
 8000dce:	0f6d      	lsrs	r5, r5, #29
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	432a      	orrs	r2, r5
 8000dd4:	0753      	lsls	r3, r2, #29
 8000dd6:	d048      	beq.n	8000e6a <__aeabi_d2f+0xfa>
 8000dd8:	230f      	movs	r3, #15
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_d2f+0x72>
 8000de0:	3204      	adds	r2, #4
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	04db      	lsls	r3, r3, #19
 8000de6:	4013      	ands	r3, r2
 8000de8:	d03f      	beq.n	8000e6a <__aeabi_d2f+0xfa>
 8000dea:	1c70      	adds	r0, r6, #1
 8000dec:	2efe      	cmp	r6, #254	; 0xfe
 8000dee:	d0d1      	beq.n	8000d94 <__aeabi_d2f+0x24>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	0a54      	lsrs	r4, r2, #9
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	e7cf      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	e7cc      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000dfe:	0032      	movs	r2, r6
 8000e00:	3217      	adds	r2, #23
 8000e02:	db22      	blt.n	8000e4a <__aeabi_d2f+0xda>
 8000e04:	2080      	movs	r0, #128	; 0x80
 8000e06:	0400      	lsls	r0, r0, #16
 8000e08:	4320      	orrs	r0, r4
 8000e0a:	241e      	movs	r4, #30
 8000e0c:	1ba4      	subs	r4, r4, r6
 8000e0e:	2c1f      	cmp	r4, #31
 8000e10:	dd1d      	ble.n	8000e4e <__aeabi_d2f+0xde>
 8000e12:	2202      	movs	r2, #2
 8000e14:	4252      	negs	r2, r2
 8000e16:	1b96      	subs	r6, r2, r6
 8000e18:	0002      	movs	r2, r0
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	0016      	movs	r6, r2
 8000e1e:	2c20      	cmp	r4, #32
 8000e20:	d004      	beq.n	8000e2c <__aeabi_d2f+0xbc>
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <__aeabi_d2f+0x108>)
 8000e24:	4694      	mov	ip, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	4098      	lsls	r0, r3
 8000e2a:	4305      	orrs	r5, r0
 8000e2c:	002a      	movs	r2, r5
 8000e2e:	1e53      	subs	r3, r2, #1
 8000e30:	419a      	sbcs	r2, r3
 8000e32:	4332      	orrs	r2, r6
 8000e34:	2600      	movs	r6, #0
 8000e36:	0753      	lsls	r3, r2, #29
 8000e38:	d1ce      	bne.n	8000dd8 <__aeabi_d2f+0x68>
 8000e3a:	2480      	movs	r4, #128	; 0x80
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	04e4      	lsls	r4, r4, #19
 8000e40:	2001      	movs	r0, #1
 8000e42:	4023      	ands	r3, r4
 8000e44:	4222      	tst	r2, r4
 8000e46:	d1d3      	bne.n	8000df0 <__aeabi_d2f+0x80>
 8000e48:	e7b0      	b.n	8000dac <__aeabi_d2f+0x3c>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e7ad      	b.n	8000daa <__aeabi_d2f+0x3a>
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <__aeabi_d2f+0x10c>)
 8000e50:	4694      	mov	ip, r2
 8000e52:	002a      	movs	r2, r5
 8000e54:	40e2      	lsrs	r2, r4
 8000e56:	0014      	movs	r4, r2
 8000e58:	002a      	movs	r2, r5
 8000e5a:	4463      	add	r3, ip
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	4098      	lsls	r0, r3
 8000e60:	1e55      	subs	r5, r2, #1
 8000e62:	41aa      	sbcs	r2, r5
 8000e64:	4302      	orrs	r2, r0
 8000e66:	4322      	orrs	r2, r4
 8000e68:	e7e4      	b.n	8000e34 <__aeabi_d2f+0xc4>
 8000e6a:	0033      	movs	r3, r6
 8000e6c:	e79e      	b.n	8000dac <__aeabi_d2f+0x3c>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007fe 	.word	0x000007fe
 8000e74:	fffffc80 	.word	0xfffffc80
 8000e78:	fffffca2 	.word	0xfffffca2
 8000e7c:	fffffc82 	.word	0xfffffc82

08000e80 <__clzsi2>:
 8000e80:	211c      	movs	r1, #28
 8000e82:	2301      	movs	r3, #1
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d301      	bcc.n	8000e8e <__clzsi2+0xe>
 8000e8a:	0c00      	lsrs	r0, r0, #16
 8000e8c:	3910      	subs	r1, #16
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	4298      	cmp	r0, r3
 8000e92:	d301      	bcc.n	8000e98 <__clzsi2+0x18>
 8000e94:	0a00      	lsrs	r0, r0, #8
 8000e96:	3908      	subs	r1, #8
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d301      	bcc.n	8000ea2 <__clzsi2+0x22>
 8000e9e:	0900      	lsrs	r0, r0, #4
 8000ea0:	3904      	subs	r1, #4
 8000ea2:	a202      	add	r2, pc, #8	; (adr r2, 8000eac <__clzsi2+0x2c>)
 8000ea4:	5c10      	ldrb	r0, [r2, r0]
 8000ea6:	1840      	adds	r0, r0, r1
 8000ea8:	4770      	bx	lr
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	02020304 	.word	0x02020304
 8000eb0:	01010101 	.word	0x01010101
	...

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	2214      	movs	r2, #20
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	a803      	add	r0, sp, #12
 8000ec6:	f002 f93f 	bl	8003148 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	2080      	movs	r0, #128	; 0x80
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_GPIO_Init+0x6c>)
 8000ece:	03c0      	lsls	r0, r0, #15
 8000ed0:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed2:	4c16      	ldr	r4, [pc, #88]	; (8000f2c <MX_GPIO_Init+0x70>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed4:	4301      	orrs	r1, r0
 8000ed6:	6159      	str	r1, [r3, #20]
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	6959      	ldr	r1, [r3, #20]
 8000ee4:	0280      	lsls	r0, r0, #10
 8000ee6:	4301      	orrs	r1, r0
 8000ee8:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4002      	ands	r2, r0
 8000ef2:	9201      	str	r2, [sp, #4]
 8000ef4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ef8:	0020      	movs	r0, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	400b      	ands	r3, r1
 8000f04:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f06:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f0a:	f000 fc9d 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	3b1f      	subs	r3, #31
 8000f14:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	0020      	movs	r0, r4
 8000f1a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f000 fbd6 	bl	80016d0 <HAL_GPIO_Init>

}
 8000f24:	b008      	add	sp, #32
 8000f26:	bd10      	pop	{r4, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400

08000f30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f30:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f34:	4c13      	ldr	r4, [pc, #76]	; (8000f84 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f36:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000f38:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f3c:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000f3e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f40:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f42:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000f44:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f46:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f48:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f4a:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4c:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	f000 fd0c 	bl	800196c <HAL_I2C_Init>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000f58:	f000 fa1e 	bl	8001398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	0020      	movs	r0, r4
 8000f60:	f001 fbda 	bl	8002718 <HAL_I2CEx_ConfigAnalogFilter>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000f68:	f000 fa16 	bl	8001398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f001 fbf8 	bl	8002764 <HAL_I2CEx_ConfigDigitalFilter>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f78:	f000 fa0e 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40005400 	.word	0x40005400
 8000f84:	20000030 	.word	0x20000030
 8000f88:	2000090e 	.word	0x2000090e

08000f8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	0004      	movs	r4, r0
 8000f90:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	2214      	movs	r2, #20
 8000f94:	2100      	movs	r1, #0
 8000f96:	a803      	add	r0, sp, #12
 8000f98:	f002 f8d6 	bl	8003148 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_I2C_MspInit+0x6c>)
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d126      	bne.n	8000ff2 <HAL_I2C_MspInit+0x66>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4c15      	ldr	r4, [pc, #84]	; (8000ffc <HAL_I2C_MspInit+0x70>)
 8000fa8:	02c9      	lsls	r1, r1, #11
 8000faa:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	4814      	ldr	r0, [pc, #80]	; (8001000 <HAL_I2C_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	6162      	str	r2, [r4, #20]
 8000fb2:	6963      	ldr	r3, [r4, #20]
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	3bae      	subs	r3, #174	; 0xae
 8000fc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	3b0f      	subs	r3, #15
 8000fc4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f000 fb80 	bl	80016d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	69e2      	ldr	r2, [r4, #28]
 8000fd4:	0389      	lsls	r1, r1, #14
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	61e2      	str	r2, [r4, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fdc:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000fde:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000fe4:	0011      	movs	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000fe8:	f000 fafa 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000fec:	2017      	movs	r0, #23
 8000fee:	f000 fb21 	bl	8001634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ff2:	b008      	add	sp, #32
 8000ff4:	bd10      	pop	{r4, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400

08001004 <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
	__HAL_TIM_SET_COUNTER(&htim14,0);
 8001004:	2200      	movs	r2, #0
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <delay+0x10>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim14)<time);
 800100c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100e:	4282      	cmp	r2, r0
 8001010:	d3fc      	bcc.n	800100c <delay+0x8>
}
 8001012:	4770      	bx	lr
 8001014:	200000a4 	.word	0x200000a4

08001018 <Set_Pin_Output>:

float Temperature = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001018:	b530      	push	{r4, r5, lr}
 800101a:	b087      	sub	sp, #28
 800101c:	0004      	movs	r4, r0
 800101e:	000d      	movs	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	220c      	movs	r2, #12
 8001022:	2100      	movs	r1, #0
 8001024:	a803      	add	r0, sp, #12
 8001026:	f002 f88f 	bl	8003148 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800102c:	0020      	movs	r0, r4
 800102e:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001030:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001034:	f000 fb4c 	bl	80016d0 <HAL_GPIO_Init>
}
 8001038:	b007      	add	sp, #28
 800103a:	bd30      	pop	{r4, r5, pc}

0800103c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	b087      	sub	sp, #28
 8001040:	0004      	movs	r4, r0
 8001042:	000d      	movs	r5, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	2210      	movs	r2, #16
 8001046:	2100      	movs	r1, #0
 8001048:	a802      	add	r0, sp, #8
 800104a:	f002 f87d 	bl	8003148 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001050:	0020      	movs	r0, r4
 8001052:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001054:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001058:	f000 fb3a 	bl	80016d0 <HAL_GPIO_Init>
}
 800105c:	b007      	add	sp, #28
 800105e:	bd30      	pop	{r4, r5, pc}

08001060 <DS18B20_Start>:

#define DS18B20_PORT GPIOB
#define DS18B20_PIN GPIO_PIN_5

uint8_t DS18B20_Start (void)
{
 8001060:	b510      	push	{r4, lr}
	uint8_t Response = 0;
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001062:	2120      	movs	r1, #32
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <DS18B20_Start+0x48>)
 8001066:	f7ff ffd7 	bl	8001018 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <DS18B20_Start+0x48>)
 8001070:	f000 fbea 	bl	8001848 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001074:	20f0      	movs	r0, #240	; 0xf0
 8001076:	0040      	lsls	r0, r0, #1
 8001078:	f7ff ffc4 	bl	8001004 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 800107c:	2120      	movs	r1, #32
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <DS18B20_Start+0x48>)
 8001080:	f7ff ffdc 	bl	800103c <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001084:	2050      	movs	r0, #80	; 0x50
 8001086:	f7ff ffbd 	bl	8001004 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800108a:	2120      	movs	r1, #32
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <DS18B20_Start+0x48>)
 800108e:	f000 fbd5 	bl	800183c <HAL_GPIO_ReadPin>
 8001092:	2401      	movs	r4, #1
 8001094:	2800      	cmp	r0, #0
 8001096:	d000      	beq.n	800109a <DS18B20_Start+0x3a>
	else Response = -1;
 8001098:	34fe      	adds	r4, #254	; 0xfe

	delay (400); // 480 us delay totally.
 800109a:	20c8      	movs	r0, #200	; 0xc8
 800109c:	0040      	lsls	r0, r0, #1
 800109e:	f7ff ffb1 	bl	8001004 <delay>

	return Response;
}
 80010a2:	0020      	movs	r0, r4
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	48000400 	.word	0x48000400

080010ac <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010ae:	2120      	movs	r1, #32
{
 80010b0:	0005      	movs	r5, r0
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <DS18B20_Write+0x68>)
 80010b4:	f7ff ffb0 	bl	8001018 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80010b8:	2400      	movs	r4, #0
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80010ba:	2601      	movs	r6, #1
 80010bc:	002b      	movs	r3, r5
 80010be:	4123      	asrs	r3, r4
 80010c0:	001f      	movs	r7, r3
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010c2:	2120      	movs	r1, #32
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <DS18B20_Write+0x68>)
		if ((data & (1<<i))!=0)  // if the bit is high
 80010c6:	4037      	ands	r7, r6
 80010c8:	4233      	tst	r3, r6
 80010ca:	d014      	beq.n	80010f6 <DS18B20_Write+0x4a>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010cc:	f7ff ffa4 	bl	8001018 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <DS18B20_Write+0x68>)
 80010d6:	f000 fbb7 	bl	8001848 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80010da:	0030      	movs	r0, r6
 80010dc:	f7ff ff92 	bl	8001004 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <DS18B20_Write+0x68>)
 80010e2:	2120      	movs	r1, #32
 80010e4:	f7ff ffaa 	bl	800103c <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010e8:	2032      	movs	r0, #50	; 0x32
 80010ea:	f7ff ff8b 	bl	8001004 <delay>
	for (int i=0; i<8; i++)
 80010ee:	3401      	adds	r4, #1
 80010f0:	2c08      	cmp	r4, #8
 80010f2:	d1e3      	bne.n	80010bc <DS18B20_Write+0x10>
			delay (50);  // wait for 60 us

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
		}
	}
}
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80010f6:	f7ff ff8f 	bl	8001018 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80010fa:	003a      	movs	r2, r7
 80010fc:	2120      	movs	r1, #32
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <DS18B20_Write+0x68>)
 8001100:	f000 fba2 	bl	8001848 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8001104:	2032      	movs	r0, #50	; 0x32
 8001106:	f7ff ff7d 	bl	8001004 <delay>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800110a:	2120      	movs	r1, #32
 800110c:	4801      	ldr	r0, [pc, #4]	; (8001114 <DS18B20_Write+0x68>)
 800110e:	f7ff ff95 	bl	800103c <Set_Pin_Input>
 8001112:	e7ec      	b.n	80010ee <DS18B20_Write+0x42>
 8001114:	48000400 	.word	0x48000400

08001118 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
	uint8_t value=0;

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);

	for (int i=0;i<8;i++)
 800111a:	2400      	movs	r4, #0
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800111c:	2120      	movs	r1, #32
 800111e:	4813      	ldr	r0, [pc, #76]	; (800116c <DS18B20_Read+0x54>)
 8001120:	f7ff ff8c 	bl	800103c <Set_Pin_Input>
	uint8_t value=0;
 8001124:	0026      	movs	r6, r4
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001126:	2520      	movs	r5, #32
 8001128:	0029      	movs	r1, r5
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <DS18B20_Read+0x54>)
 800112c:	f7ff ff74 	bl	8001018 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8001130:	2200      	movs	r2, #0
 8001132:	0029      	movs	r1, r5
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <DS18B20_Read+0x54>)
 8001136:	f000 fb87 	bl	8001848 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff ff62 	bl	8001004 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001140:	0029      	movs	r1, r5
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <DS18B20_Read+0x54>)
 8001144:	f7ff ff7a 	bl	800103c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001148:	0029      	movs	r1, r5
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <DS18B20_Read+0x54>)
 800114c:	f000 fb76 	bl	800183c <HAL_GPIO_ReadPin>
 8001150:	2800      	cmp	r0, #0
 8001152:	d003      	beq.n	800115c <DS18B20_Read+0x44>
		{
			value |= 1<<i;  // read = 1
 8001154:	2001      	movs	r0, #1
 8001156:	40a0      	lsls	r0, r4
 8001158:	4306      	orrs	r6, r0
 800115a:	b2f6      	uxtb	r6, r6
		}
		delay (50);  // wait for 60 us
 800115c:	2032      	movs	r0, #50	; 0x32
	for (int i=0;i<8;i++)
 800115e:	3401      	adds	r4, #1
		delay (50);  // wait for 60 us
 8001160:	f7ff ff50 	bl	8001004 <delay>
	for (int i=0;i<8;i++)
 8001164:	2c08      	cmp	r4, #8
 8001166:	d1df      	bne.n	8001128 <DS18B20_Read+0x10>
	}
	return value;
}
 8001168:	0030      	movs	r0, r6
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	48000400 	.word	0x48000400

08001170 <DS18B20_TEMP>:

void DS18B20_TEMP()
{
 8001170:	b510      	push	{r4, lr}
	Presence = DS18B20_Start ();
 8001172:	f7ff ff75 	bl	8001060 <DS18B20_Start>
 8001176:	4c18      	ldr	r4, [pc, #96]	; (80011d8 <DS18B20_TEMP+0x68>)
 8001178:	7020      	strb	r0, [r4, #0]
	HAL_Delay (1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fa1e 	bl	80015bc <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 8001180:	20cc      	movs	r0, #204	; 0xcc
 8001182:	f7ff ff93 	bl	80010ac <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8001186:	2044      	movs	r0, #68	; 0x44
 8001188:	f7ff ff90 	bl	80010ac <DS18B20_Write>
	HAL_Delay (800);
 800118c:	20c8      	movs	r0, #200	; 0xc8
 800118e:	0080      	lsls	r0, r0, #2
 8001190:	f000 fa14 	bl	80015bc <HAL_Delay>

	Presence = DS18B20_Start ();
 8001194:	f7ff ff64 	bl	8001060 <DS18B20_Start>
 8001198:	7020      	strb	r0, [r4, #0]
	HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fa0e 	bl	80015bc <HAL_Delay>
	DS18B20_Write (0xCC);  // skip ROM
 80011a0:	20cc      	movs	r0, #204	; 0xcc
 80011a2:	f7ff ff83 	bl	80010ac <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 80011a6:	20be      	movs	r0, #190	; 0xbe
 80011a8:	f7ff ff80 	bl	80010ac <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 80011ac:	f7ff ffb4 	bl	8001118 <DS18B20_Read>
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <DS18B20_TEMP+0x6c>)
 80011b2:	7020      	strb	r0, [r4, #0]
	Temp_byte2 = DS18B20_Read();
 80011b4:	f7ff ffb0 	bl	8001118 <DS18B20_Read>
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <DS18B20_TEMP+0x70>)
 80011ba:	7018      	strb	r0, [r3, #0]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 80011bc:	7823      	ldrb	r3, [r4, #0]
 80011be:	0200      	lsls	r0, r0, #8
 80011c0:	4318      	orrs	r0, r3
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <DS18B20_TEMP+0x74>)
 80011c4:	8018      	strh	r0, [r3, #0]
	Temperature = (float)TEMP/16;
 80011c6:	f7ff faff 	bl	80007c8 <__aeabi_ui2f>
 80011ca:	21f6      	movs	r1, #246	; 0xf6
 80011cc:	0589      	lsls	r1, r1, #22
 80011ce:	f7ff f827 	bl	8000220 <__aeabi_fmul>
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <DS18B20_TEMP+0x78>)
 80011d4:	6018      	str	r0, [r3, #0]
}
 80011d6:	bd10      	pop	{r4, pc}
 80011d8:	20000098 	.word	0x20000098
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	2000009d 	.word	0x2000009d
 80011e4:	2000009a 	.word	0x2000009a
 80011e8:	200000a0 	.word	0x200000a0

080011ec <HAL_TIM_PeriodElapsedCallback>:

/*********************************** aht10 FUNCTIONS ****************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 if(htim->Instance == TIM16)
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011ee:	6802      	ldr	r2, [r0, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d102      	bne.n	80011fa <HAL_TIM_PeriodElapsedCallback+0xe>
 {
	/* Set every 100ms */
	T_100ms = 255;
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80011f8:	701a      	strb	r2, [r3, #0]
 }
}
 80011fa:	4770      	bx	lr
 80011fc:	40014400 	.word	0x40014400
 8001200:	20000004 	.word	0x20000004

08001204 <AHT10_GET>:

void AHT10_GET()
{
 8001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(T_100ms)
 8001206:	4f29      	ldr	r7, [pc, #164]	; (80012ac <AHT10_GET+0xa8>)
 8001208:	783b      	ldrb	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d046      	beq.n	800129c <AHT10_GET+0x98>
		  	{
		  		if(AHT10_Switcher)
 800120e:	4e28      	ldr	r6, [pc, #160]	; (80012b0 <AHT10_GET+0xac>)
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <AHT10_GET+0xb0>)
 8001212:	7833      	ldrb	r3, [r6, #0]
 8001214:	4c28      	ldr	r4, [pc, #160]	; (80012b8 <AHT10_GET+0xb4>)
 8001216:	2b00      	cmp	r3, #0
 8001218:	d041      	beq.n	800129e <AHT10_GET+0x9a>
		  			{
		  				HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_TmpHum_Cmd, 3); /* Send command (trigger measuremetns) + parameters */
 800121a:	2303      	movs	r3, #3
 800121c:	2170      	movs	r1, #112	; 0x70
 800121e:	4a27      	ldr	r2, [pc, #156]	; (80012bc <AHT10_GET+0xb8>)
 8001220:	f000 fbfa 	bl	8001a18 <HAL_I2C_Master_Transmit_IT>
		  		else
		  			{
		  				HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_RX_Data, 6); /* Receive data: STATUS[1]:HIMIDITY[2.5]:TEMPERATURE[2.5] */
		  			}

		  		if(~AHT10_RX_Data[0] & 0x80)
 8001224:	7823      	ldrb	r3, [r4, #0]
 8001226:	2b7f      	cmp	r3, #127	; 0x7f
 8001228:	d833      	bhi.n	8001292 <AHT10_GET+0x8e>
		  		{
		  			/* Convert to Temperature in °C */
		  			AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 800122a:	7960      	ldrb	r0, [r4, #5]
 800122c:	7922      	ldrb	r2, [r4, #4]
 800122e:	0200      	lsls	r0, r0, #8
 8001230:	4310      	orrs	r0, r2
 8001232:	22f0      	movs	r2, #240	; 0xf0
 8001234:	78e5      	ldrb	r5, [r4, #3]
 8001236:	0312      	lsls	r2, r2, #12
 8001238:	042b      	lsls	r3, r5, #16
 800123a:	ba40      	rev16	r0, r0
 800123c:	4013      	ands	r3, r2
 800123e:	b280      	uxth	r0, r0
 8001240:	4318      	orrs	r0, r3
		  			AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 8001242:	f7ff fd6f 	bl	8000d24 <__aeabi_ui2d>
 8001246:	2200      	movs	r2, #0
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <AHT10_GET+0xbc>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_dmul>
 800124e:	2200      	movs	r2, #0
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <AHT10_GET+0xc0>)
 8001252:	f7ff fafb 	bl	800084c <__aeabi_dmul>
 8001256:	f7ff fd8b 	bl	8000d70 <__aeabi_d2f>
 800125a:	491b      	ldr	r1, [pc, #108]	; (80012c8 <AHT10_GET+0xc4>)
 800125c:	f7ff f906 	bl	800046c <__aeabi_fsub>
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <AHT10_GET+0xc8>)

		  			/* Convert to Relative Humidity in % */
		  			AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001262:	092d      	lsrs	r5, r5, #4
		  			AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 8001264:	6018      	str	r0, [r3, #0]
		  			AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001266:	7860      	ldrb	r0, [r4, #1]
 8001268:	78a3      	ldrb	r3, [r4, #2]
 800126a:	0300      	lsls	r0, r0, #12
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4318      	orrs	r0, r3
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <AHT10_GET+0xcc>)
 8001272:	4328      	orrs	r0, r5
 8001274:	6018      	str	r0, [r3, #0]
		  			AHT10_Humidity = (float)(AHT10_ADC_Raw*100.00/1048576.00);
 8001276:	f7ff fd55 	bl	8000d24 <__aeabi_ui2d>
 800127a:	2200      	movs	r2, #0
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <AHT10_GET+0xd0>)
 800127e:	f7ff fae5 	bl	800084c <__aeabi_dmul>
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <AHT10_GET+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	f7ff fae1 	bl	800084c <__aeabi_dmul>
 800128a:	f7ff fd71 	bl	8000d70 <__aeabi_d2f>
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <AHT10_GET+0xd4>)
 8001290:	6018      	str	r0, [r3, #0]
		  		}

		  		AHT10_Switcher = ~AHT10_Switcher; /* Invert */
 8001292:	7833      	ldrb	r3, [r6, #0]
 8001294:	43db      	mvns	r3, r3
 8001296:	7033      	strb	r3, [r6, #0]
		  		//GPIOC->ODR ^= GPIO_ODR_ODR13; /* Green LED */
		  		T_100ms = 0; /* Nulify */
 8001298:	2300      	movs	r3, #0
 800129a:	703b      	strb	r3, [r7, #0]
		  	}
}
 800129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  				HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_RX_Data, 6); /* Receive data: STATUS[1]:HIMIDITY[2.5]:TEMPERATURE[2.5] */
 800129e:	2306      	movs	r3, #6
 80012a0:	0022      	movs	r2, r4
 80012a2:	2170      	movs	r1, #112	; 0x70
 80012a4:	f000 fc04 	bl	8001ab0 <HAL_I2C_Master_Receive_IT>
 80012a8:	e7bc      	b.n	8001224 <AHT10_GET+0x20>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000030 	.word	0x20000030
 80012b8:	2000008c 	.word	0x2000008c
 80012bc:	20000001 	.word	0x20000001
 80012c0:	40690000 	.word	0x40690000
 80012c4:	3eb00000 	.word	0x3eb00000
 80012c8:	42480000 	.word	0x42480000
 80012cc:	20000094 	.word	0x20000094
 80012d0:	20000084 	.word	0x20000084
 80012d4:	40590000 	.word	0x40590000
 80012d8:	20000088 	.word	0x20000088

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012de:	2510      	movs	r5, #16
{
 80012e0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	a80a      	add	r0, sp, #40	; 0x28
 80012e8:	f001 ff2e 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	002a      	movs	r2, r5
 80012ee:	2100      	movs	r1, #0
 80012f0:	4668      	mov	r0, sp
 80012f2:	f001 ff29 	bl	8003148 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f6:	002a      	movs	r2, r5
 80012f8:	2100      	movs	r1, #0
 80012fa:	a804      	add	r0, sp, #16
 80012fc:	f001 ff24 	bl	8003148 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001300:	2303      	movs	r3, #3
 8001302:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800130a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001310:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001316:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800131c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f001 fa45 	bl	80027ac <HAL_RCC_OscConfig>
 8001322:	2800      	cmp	r0, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001326:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132e:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001330:	0021      	movs	r1, r4
 8001332:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001338:	f001 fc68 	bl	8002c0c <HAL_RCC_ClockConfig>
 800133c:	2800      	cmp	r0, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x68>
 8001340:	b672      	cpsid	i
  while (1)
 8001342:	e7fe      	b.n	8001342 <SystemClock_Config+0x66>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001344:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001346:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800134a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f001 fcf4 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	2800      	cmp	r0, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x7c>
 8001354:	b672      	cpsid	i
  while (1)
 8001356:	e7fe      	b.n	8001356 <SystemClock_Config+0x7a>
  HAL_RCC_EnableCSS();
 8001358:	f001 fc28 	bl	8002bac <HAL_RCC_EnableCSS>
}
 800135c:	b015      	add	sp, #84	; 0x54
 800135e:	bd30      	pop	{r4, r5, pc}

08001360 <main>:
{
 8001360:	b510      	push	{r4, lr}
  HAL_Init();
 8001362:	f000 f909 	bl	8001578 <HAL_Init>
  SystemClock_Config();
 8001366:	f7ff ffb9 	bl	80012dc <SystemClock_Config>
  MX_GPIO_Init();
 800136a:	f7ff fda7 	bl	8000ebc <MX_GPIO_Init>
  MX_TIM14_Init();
 800136e:	f000 f853 	bl	8001418 <MX_TIM14_Init>
  MX_I2C1_Init();
 8001372:	f7ff fddd 	bl	8000f30 <MX_I2C1_Init>
  MX_TIM16_Init();
 8001376:	f000 f869 	bl	800144c <MX_TIM16_Init>
HAL_TIM_Base_Start(&htim14);
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <main+0x30>)
 800137c:	f001 fd62 	bl	8002e44 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start_IT(&htim16);
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <main+0x34>)
 8001382:	f001 fd83 	bl	8002e8c <HAL_TIM_Base_Start_IT>
	  AHT10_GET();
 8001386:	f7ff ff3d 	bl	8001204 <AHT10_GET>
	  DS18B20_TEMP();
 800138a:	f7ff fef1 	bl	8001170 <DS18B20_TEMP>
  while (1)
 800138e:	e7fa      	b.n	8001386 <main+0x26>
 8001390:	200000a4 	.word	0x200000a4
 8001394:	200000ec 	.word	0x200000ec

08001398 <Error_Handler>:
 8001398:	b672      	cpsid	i
  while (1)
 800139a:	e7fe      	b.n	800139a <Error_Handler+0x2>

0800139c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	2001      	movs	r0, #1
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x2c>)
{
 80013a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	6999      	ldr	r1, [r3, #24]
 80013a4:	4301      	orrs	r1, r0
 80013a6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4002      	ands	r2, r0
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	61da      	str	r2, [r3, #28]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	400b      	ands	r3, r1
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	b002      	add	sp, #8
 80013c4:	4770      	bx	lr
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80013ce:	f001 fca3 	bl	8002d18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <NMI_Handler+0x6>

080013d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <HardFault_Handler>

080013d6 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 f8dc 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bd10      	pop	{r4, pc}
	...

080013e4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80013e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM16_IRQHandler+0xc>)
 80013e8:	f001 fd7c 	bl	8002ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	200000ec 	.word	0x200000ec

080013f4 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <I2C1_IRQHandler+0x1c>)
{
 80013f6:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	23e0      	movs	r3, #224	; 0xe0
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	421a      	tst	r2, r3
 8001402:	d002      	beq.n	800140a <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001404:	f001 f948 	bl	8002698 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001408:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800140a:	f000 fb9d 	bl	8001b48 <HAL_I2C_EV_IRQHandler>
}
 800140e:	e7fb      	b.n	8001408 <I2C1_IRQHandler+0x14>
 8001410:	20000030 	.word	0x20000030

08001414 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001414:	4770      	bx	lr
	...

08001418 <MX_TIM14_Init>:
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_TIM14_Init+0x28>)
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_TIM14_Init+0x2c>)
{
 800141c:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 800141e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 48-1;
 8001420:	232f      	movs	r3, #47	; 0x2f
 8001422:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	2300      	movs	r3, #0
  htim14.Init.Period = 0xffff-1;
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <MX_TIM14_Init+0x30>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 0xffff-1;
 800142a:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001430:	f001 fe3c 	bl	80030ac <HAL_TIM_Base_Init>
 8001434:	2800      	cmp	r0, #0
 8001436:	d001      	beq.n	800143c <MX_TIM14_Init+0x24>
  {
    Error_Handler();
 8001438:	f7ff ffae 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800143c:	bd10      	pop	{r4, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	200000a4 	.word	0x200000a4
 8001444:	40002000 	.word	0x40002000
 8001448:	0000fffe 	.word	0x0000fffe

0800144c <MX_TIM16_Init>:
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <MX_TIM16_Init+0x28>)
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_TIM16_Init+0x2c>)
{
 8001450:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8001452:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 4800-1;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_TIM16_Init+0x30>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 1000-1;
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <MX_TIM16_Init+0x34>)
  htim16.Init.Prescaler = 4800-1;
 8001458:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	2300      	movs	r3, #0
  htim16.Init.Period = 1000-1;
 800145c:	60c2      	str	r2, [r0, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8001462:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001466:	f001 fe21 	bl	80030ac <HAL_TIM_Base_Init>
 800146a:	2800      	cmp	r0, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM16_Init+0x26>
  {
    Error_Handler();
 800146e:	f7ff ff93 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001472:	bd10      	pop	{r4, pc}
 8001474:	200000ec 	.word	0x200000ec
 8001478:	40014400 	.word	0x40014400
 800147c:	000012bf 	.word	0x000012bf
 8001480:	000003e7 	.word	0x000003e7

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM14)
 8001486:	6803      	ldr	r3, [r0, #0]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_TIM_Base_MspInit+0x4c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10a      	bne.n	80014a4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800148e:	2080      	movs	r0, #128	; 0x80
 8001490:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_TIM_Base_MspInit+0x50>)
 8001492:	0040      	lsls	r0, r0, #1
 8001494:	69d1      	ldr	r1, [r2, #28]
 8001496:	4301      	orrs	r1, r0
 8001498:	61d1      	str	r1, [r2, #28]
 800149a:	69d3      	ldr	r3, [r2, #28]
 800149c:	4003      	ands	r3, r0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80014a2:	bd07      	pop	{r0, r1, r2, pc}
  else if(tim_baseHandle->Instance==TIM16)
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_TIM_Base_MspInit+0x54>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d1fb      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014aa:	2080      	movs	r0, #128	; 0x80
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x50>)
 80014ae:	0280      	lsls	r0, r0, #10
 80014b0:	6991      	ldr	r1, [r2, #24]
 80014b2:	4301      	orrs	r1, r0
 80014b4:	6191      	str	r1, [r2, #24]
 80014b6:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014ba:	4003      	ands	r3, r0
 80014bc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80014be:	0011      	movs	r1, r2
 80014c0:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80014c4:	f000 f88c 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80014c8:	2015      	movs	r0, #21
 80014ca:	f000 f8b3 	bl	8001634 <HAL_NVIC_EnableIRQ>
}
 80014ce:	e7e8      	b.n	80014a2 <HAL_TIM_Base_MspInit+0x1e>
 80014d0:	40002000 	.word	0x40002000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40014400 	.word	0x40014400

080014dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e0:	f7ff ff98 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800150a:	f001 fdf9 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff ff27 	bl	8001360 <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   r0, =_estack
 8001514:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001520:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8001524:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001528:	20000138 	.word	0x20000138

0800152c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_IRQHandler>
	...

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	20fa      	movs	r0, #250	; 0xfa
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_InitTick+0x3c>)
 8001538:	0080      	lsls	r0, r0, #2
 800153a:	7819      	ldrb	r1, [r3, #0]
 800153c:	f7fe fde4 	bl	8000108 <__udivsi3>
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_InitTick+0x40>)
 8001542:	0001      	movs	r1, r0
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	f7fe fddf 	bl	8000108 <__udivsi3>
 800154a:	f000 f87f 	bl	800164c <HAL_SYSTICK_Config>
 800154e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001552:	2c00      	cmp	r4, #0
 8001554:	d109      	bne.n	800156a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	2d03      	cmp	r5, #3
 8001558:	d807      	bhi.n	800156a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155a:	3802      	subs	r0, #2
 800155c:	0022      	movs	r2, r4
 800155e:	0029      	movs	r1, r5
 8001560:	f000 f83e 	bl	80015e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	0020      	movs	r0, r4
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_InitTick+0x44>)
 8001568:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	2000000c 	.word	0x2000000c
 8001570:	20000008 	.word	0x20000008
 8001574:	20000010 	.word	0x20000010

08001578 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	2310      	movs	r3, #16
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_Init+0x1c>)
{
 800157c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001580:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001582:	430b      	orrs	r3, r1
 8001584:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	f7ff ffd3 	bl	8001530 <HAL_InitTick>
  HAL_MspInit();
 800158a:	f7ff ff07 	bl	800139c <HAL_MspInit>
}
 800158e:	2000      	movs	r0, #0
 8001590:	bd10      	pop	{r4, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x10>)
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_IncTick+0x14>)
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	185b      	adds	r3, r3, r1
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	20000134 	.word	0x20000134
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_GetTick+0x8>)
 80015b2:	6818      	ldr	r0, [r3, #0]
}
 80015b4:	4770      	bx	lr
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000134 	.word	0x20000134

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff fff6 	bl	80015b0 <HAL_GetTick>
 80015c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	1c63      	adds	r3, r4, #1
 80015c8:	d002      	beq.n	80015d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_Delay+0x20>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	1b40      	subs	r0, r0, r5
 80015d6:	42a0      	cmp	r0, r4
 80015d8:	d3fa      	bcc.n	80015d0 <HAL_Delay+0x14>
  {
  }
}
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	2000000c 	.word	0x2000000c

080015e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e0:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e2:	25ff      	movs	r5, #255	; 0xff
 80015e4:	2403      	movs	r4, #3
 80015e6:	002a      	movs	r2, r5
 80015e8:	4004      	ands	r4, r0
 80015ea:	00e4      	lsls	r4, r4, #3
 80015ec:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ee:	0189      	lsls	r1, r1, #6
 80015f0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80015f8:	2800      	cmp	r0, #0
 80015fa:	db0a      	blt.n	8001612 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	24c0      	movs	r4, #192	; 0xc0
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_NVIC_SetPriority+0x4c>)
 8001600:	0880      	lsrs	r0, r0, #2
 8001602:	0080      	lsls	r0, r0, #2
 8001604:	18c0      	adds	r0, r0, r3
 8001606:	00a4      	lsls	r4, r4, #2
 8001608:	5903      	ldr	r3, [r0, r4]
 800160a:	401a      	ands	r2, r3
 800160c:	4311      	orrs	r1, r2
 800160e:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001610:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001612:	200f      	movs	r0, #15
 8001614:	4003      	ands	r3, r0
 8001616:	3b08      	subs	r3, #8
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_NVIC_SetPriority+0x50>)
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	181b      	adds	r3, r3, r0
 8001620:	69d8      	ldr	r0, [r3, #28]
 8001622:	4002      	ands	r2, r0
 8001624:	4311      	orrs	r1, r2
 8001626:	61d9      	str	r1, [r3, #28]
 8001628:	e7f2      	b.n	8001610 <HAL_NVIC_SetPriority+0x30>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001634:	2800      	cmp	r0, #0
 8001636:	db05      	blt.n	8001644 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001638:	231f      	movs	r3, #31
 800163a:	4018      	ands	r0, r3
 800163c:	3b1e      	subs	r3, #30
 800163e:	4083      	lsls	r3, r0
 8001640:	4a01      	ldr	r2, [pc, #4]	; (8001648 <HAL_NVIC_EnableIRQ+0x14>)
 8001642:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001644:	4770      	bx	lr
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	e000e100 	.word	0xe000e100

0800164c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	1e43      	subs	r3, r0, #1
 8001650:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	4293      	cmp	r3, r2
 8001656:	d20d      	bcs.n	8001674 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001660:	6a03      	ldr	r3, [r0, #32]
 8001662:	0609      	lsls	r1, r1, #24
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	430b      	orrs	r3, r1
 800166a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001674:	4770      	bx	lr
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	e000e010 	.word	0xe000e010
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001680:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001682:	1c84      	adds	r4, r0, #2
 8001684:	7fe3      	ldrb	r3, [r4, #31]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d004      	beq.n	8001694 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168a:	2304      	movs	r3, #4
 800168c:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 800168e:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001690:	0018      	movs	r0, r3
 8001692:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001694:	210e      	movs	r1, #14
 8001696:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001698:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	438a      	bics	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016a0:	2201      	movs	r2, #1
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	4391      	bics	r1, r2
 80016a6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016a8:	0011      	movs	r1, r2
 80016aa:	40a9      	lsls	r1, r5
 80016ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80016ae:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80016b0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80016b2:	2400      	movs	r4, #0
 80016b4:	1883      	adds	r3, r0, r2
 80016b6:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 80016b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 80016bc:	42a2      	cmp	r2, r4
 80016be:	d0e7      	beq.n	8001690 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80016c0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	0023      	movs	r3, r4
 80016c4:	e7e4      	b.n	8001690 <HAL_DMA_Abort_IT+0x10>

080016c6 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 80016c6:	3002      	adds	r0, #2
 80016c8:	7fc0      	ldrb	r0, [r0, #31]
 80016ca:	b2c0      	uxtb	r0, r0
}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80016d0:	2300      	movs	r3, #0
{
 80016d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	680a      	ldr	r2, [r1, #0]
 80016d8:	0014      	movs	r4, r2
 80016da:	40dc      	lsrs	r4, r3
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80016de:	b007      	add	sp, #28
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e2:	2501      	movs	r5, #1
 80016e4:	0014      	movs	r4, r2
 80016e6:	409d      	lsls	r5, r3
 80016e8:	402c      	ands	r4, r5
 80016ea:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80016ec:	422a      	tst	r2, r5
 80016ee:	d100      	bne.n	80016f2 <HAL_GPIO_Init+0x22>
 80016f0:	e095      	b.n	800181e <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f2:	684a      	ldr	r2, [r1, #4]
 80016f4:	005e      	lsls	r6, r3, #1
 80016f6:	4694      	mov	ip, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	4664      	mov	r4, ip
 80016fc:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016fe:	2403      	movs	r4, #3
 8001700:	40b4      	lsls	r4, r6
 8001702:	43e4      	mvns	r4, r4
 8001704:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001706:	1e54      	subs	r4, r2, #1
 8001708:	2c01      	cmp	r4, #1
 800170a:	d82a      	bhi.n	8001762 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 800170c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800170e:	9c02      	ldr	r4, [sp, #8]
 8001710:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001712:	68cc      	ldr	r4, [r1, #12]
 8001714:	40b4      	lsls	r4, r6
 8001716:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001718:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800171a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171c:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171e:	43ac      	bics	r4, r5
 8001720:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001722:	4664      	mov	r4, ip
 8001724:	0924      	lsrs	r4, r4, #4
 8001726:	403c      	ands	r4, r7
 8001728:	409c      	lsls	r4, r3
 800172a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800172c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800172e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001730:	9c02      	ldr	r4, [sp, #8]
 8001732:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001734:	688c      	ldr	r4, [r1, #8]
 8001736:	40b4      	lsls	r4, r6
 8001738:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800173a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	2a02      	cmp	r2, #2
 800173e:	d112      	bne.n	8001766 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001740:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001742:	2507      	movs	r5, #7
 8001744:	00a4      	lsls	r4, r4, #2
 8001746:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001748:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174a:	9403      	str	r4, [sp, #12]
 800174c:	240f      	movs	r4, #15
 800174e:	401d      	ands	r5, r3
 8001750:	00ad      	lsls	r5, r5, #2
 8001752:	40ac      	lsls	r4, r5
 8001754:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001756:	690c      	ldr	r4, [r1, #16]
 8001758:	40ac      	lsls	r4, r5
 800175a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 800175c:	9c03      	ldr	r4, [sp, #12]
 800175e:	6227      	str	r7, [r4, #32]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	2a03      	cmp	r2, #3
 8001764:	d1e3      	bne.n	800172e <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001766:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001768:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800176c:	4025      	ands	r5, r4
 800176e:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001770:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001772:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001774:	24c0      	movs	r4, #192	; 0xc0
 8001776:	4662      	mov	r2, ip
 8001778:	02a4      	lsls	r4, r4, #10
 800177a:	4222      	tst	r2, r4
 800177c:	d04f      	beq.n	800181e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2501      	movs	r5, #1
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001782:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001784:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001786:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001788:	432c      	orrs	r4, r5
 800178a:	6194      	str	r4, [r2, #24]
 800178c:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800178e:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001790:	402a      	ands	r2, r5
 8001792:	9205      	str	r2, [sp, #20]
 8001794:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001796:	4a24      	ldr	r2, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x158>)
 8001798:	00a4      	lsls	r4, r4, #2
 800179a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179c:	220f      	movs	r2, #15
 800179e:	3502      	adds	r5, #2
 80017a0:	401d      	ands	r5, r3
 80017a2:	00ad      	lsls	r5, r5, #2
 80017a4:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80017a6:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a8:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017aa:	2200      	movs	r2, #0
 80017ac:	42b8      	cmp	r0, r7
 80017ae:	d00c      	beq.n	80017ca <HAL_GPIO_Init+0xfa>
 80017b0:	4f1e      	ldr	r7, [pc, #120]	; (800182c <HAL_GPIO_Init+0x15c>)
 80017b2:	3201      	adds	r2, #1
 80017b4:	42b8      	cmp	r0, r7
 80017b6:	d008      	beq.n	80017ca <HAL_GPIO_Init+0xfa>
 80017b8:	4f1d      	ldr	r7, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x160>)
 80017ba:	3201      	adds	r2, #1
 80017bc:	42b8      	cmp	r0, r7
 80017be:	d004      	beq.n	80017ca <HAL_GPIO_Init+0xfa>
 80017c0:	4f1c      	ldr	r7, [pc, #112]	; (8001834 <HAL_GPIO_Init+0x164>)
 80017c2:	3201      	adds	r2, #1
 80017c4:	42b8      	cmp	r0, r7
 80017c6:	d000      	beq.n	80017ca <HAL_GPIO_Init+0xfa>
 80017c8:	3202      	adds	r2, #2
 80017ca:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017cc:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ce:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 80017d4:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->RTSR;
 80017d6:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80017d8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 80017da:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80017dc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017de:	02ff      	lsls	r7, r7, #11
 80017e0:	d401      	bmi.n	80017e6 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 80017e2:	0035      	movs	r5, r6
 80017e4:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e6:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80017e8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80017ea:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80017ec:	9d01      	ldr	r5, [sp, #4]
 80017ee:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f0:	02bf      	lsls	r7, r7, #10
 80017f2:	d401      	bmi.n	80017f8 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 80017f4:	0035      	movs	r5, r6
 80017f6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f8:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80017fa:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80017fc:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80017fe:	9d01      	ldr	r5, [sp, #4]
 8001800:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001802:	03bf      	lsls	r7, r7, #14
 8001804:	d401      	bmi.n	800180a <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 8001806:	0035      	movs	r5, r6
 8001808:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800180a:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800180c:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800180e:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001810:	9e01      	ldr	r6, [sp, #4]
 8001812:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001814:	03ff      	lsls	r7, r7, #15
 8001816:	d401      	bmi.n	800181c <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8001818:	4025      	ands	r5, r4
 800181a:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800181c:	6016      	str	r6, [r2, #0]
    position++;
 800181e:	3301      	adds	r3, #1
 8001820:	e759      	b.n	80016d6 <HAL_GPIO_Init+0x6>
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	48000400 	.word	0x48000400
 8001830:	48000800 	.word	0x48000800
 8001834:	48000c00 	.word	0x48000c00
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	6900      	ldr	r0, [r0, #16]
 800183e:	4008      	ands	r0, r1
 8001840:	1e43      	subs	r3, r0, #1
 8001842:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001844:	b2c0      	uxtb	r0, r0
  }
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001848:	2a00      	cmp	r2, #0
 800184a:	d001      	beq.n	8001850 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001850:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001852:	e7fc      	b.n	800184e <HAL_GPIO_WritePin+0x6>

08001854 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001854:	6803      	ldr	r3, [r0, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	0792      	lsls	r2, r2, #30
 800185a:	d501      	bpl.n	8001860 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001860:	2201      	movs	r2, #1
 8001862:	6999      	ldr	r1, [r3, #24]
 8001864:	4211      	tst	r1, r2
 8001866:	d102      	bne.n	800186e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001868:	6999      	ldr	r1, [r3, #24]
 800186a:	430a      	orrs	r2, r1
 800186c:	619a      	str	r2, [r3, #24]
  }
}
 800186e:	4770      	bx	lr

08001870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001870:	b530      	push	{r4, r5, lr}
 8001872:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001874:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001876:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001878:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800187a:	0589      	lsls	r1, r1, #22
 800187c:	431a      	orrs	r2, r3
 800187e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <I2C_TransferConfig+0x28>)
 8001882:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001884:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001886:	0d64      	lsrs	r4, r4, #21
 8001888:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800188a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800188c:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800188e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001890:	432a      	orrs	r2, r5
 8001892:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001894:	bd30      	pop	{r4, r5, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	03ff63ff 	.word	0x03ff63ff

0800189c <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800189c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <I2C_Enable_IRQ+0x7c>)
{
 80018a0:	b510      	push	{r4, lr}
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80018a2:	b20c      	sxth	r4, r1
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d01e      	beq.n	80018e6 <I2C_Enable_IRQ+0x4a>
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <I2C_Enable_IRQ+0x80>)
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d01b      	beq.n	80018e6 <I2C_Enable_IRQ+0x4a>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <I2C_Enable_IRQ+0x84>)
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d018      	beq.n	80018e6 <I2C_Enable_IRQ+0x4a>
  uint32_t tmpisr = 0U;
 80018b4:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80018b6:	429c      	cmp	r4, r3
 80018b8:	da00      	bge.n	80018bc <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80018ba:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80018bc:	07ca      	lsls	r2, r1, #31
 80018be:	d501      	bpl.n	80018c4 <I2C_Enable_IRQ+0x28>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80018c0:	22f2      	movs	r2, #242	; 0xf2
 80018c2:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80018c4:	078a      	lsls	r2, r1, #30
 80018c6:	d501      	bpl.n	80018cc <I2C_Enable_IRQ+0x30>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80018c8:	22f4      	movs	r2, #244	; 0xf4
 80018ca:	4313      	orrs	r3, r2
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80018cc:	2910      	cmp	r1, #16
 80018ce:	d106      	bne.n	80018de <I2C_Enable_IRQ+0x42>
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80018d0:	2290      	movs	r2, #144	; 0x90
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80018d2:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80018d4:	6801      	ldr	r1, [r0, #0]
 80018d6:	680a      	ldr	r2, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
}
 80018dc:	bd10      	pop	{r4, pc}
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80018de:	2920      	cmp	r1, #32
 80018e0:	d1f8      	bne.n	80018d4 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
 80018e2:	430b      	orrs	r3, r1
 80018e4:	e7f6      	b.n	80018d4 <I2C_Enable_IRQ+0x38>
  uint32_t tmpisr = 0U;
 80018e6:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80018e8:	429c      	cmp	r4, r3
 80018ea:	da00      	bge.n	80018ee <I2C_Enable_IRQ+0x52>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80018ec:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80018ee:	07cc      	lsls	r4, r1, #31
 80018f0:	d501      	bpl.n	80018f6 <I2C_Enable_IRQ+0x5a>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80018f2:	24f2      	movs	r4, #242	; 0xf2
 80018f4:	4323      	orrs	r3, r4
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80018f6:	078c      	lsls	r4, r1, #30
 80018f8:	d501      	bpl.n	80018fe <I2C_Enable_IRQ+0x62>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80018fa:	24f4      	movs	r4, #244	; 0xf4
 80018fc:	4323      	orrs	r3, r4
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80018fe:	2910      	cmp	r1, #16
 8001900:	d0e6      	beq.n	80018d0 <I2C_Enable_IRQ+0x34>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001902:	2920      	cmp	r1, #32
 8001904:	d101      	bne.n	800190a <I2C_Enable_IRQ+0x6e>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8001906:	2260      	movs	r2, #96	; 0x60
 8001908:	e7e3      	b.n	80018d2 <I2C_Enable_IRQ+0x36>
    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800190a:	4c05      	ldr	r4, [pc, #20]	; (8001920 <I2C_Enable_IRQ+0x84>)
 800190c:	42a2      	cmp	r2, r4
 800190e:	d0e1      	beq.n	80018d4 <I2C_Enable_IRQ+0x38>
 8001910:	2940      	cmp	r1, #64	; 0x40
 8001912:	d0e6      	beq.n	80018e2 <I2C_Enable_IRQ+0x46>
 8001914:	e7de      	b.n	80018d4 <I2C_Enable_IRQ+0x38>
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	08002579 	.word	0x08002579
 800191c:	0800246d 	.word	0x0800246d
 8001920:	08002319 	.word	0x08002319

08001924 <I2C_Disable_IRQ>:
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;
 8001924:	2300      	movs	r3, #0
{
 8001926:	b510      	push	{r4, lr}

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001928:	07ca      	lsls	r2, r1, #31
 800192a:	d508      	bpl.n	800193e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800192c:	0003      	movs	r3, r0
 800192e:	3341      	adds	r3, #65	; 0x41
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	2328      	movs	r3, #40	; 0x28
 8001934:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001936:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001938:	2a28      	cmp	r2, #40	; 0x28
 800193a:	d000      	beq.n	800193e <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800193c:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800193e:	078a      	lsls	r2, r1, #30
 8001940:	d508      	bpl.n	8001954 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001942:	0002      	movs	r2, r0
 8001944:	2428      	movs	r4, #40	; 0x28
 8001946:	3241      	adds	r2, #65	; 0x41
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4022      	ands	r2, r4
 800194c:	42a2      	cmp	r2, r4
 800194e:	d10b      	bne.n	8001968 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001950:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001952:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001954:	b209      	sxth	r1, r1
 8001956:	2900      	cmp	r1, #0
 8001958:	da01      	bge.n	800195e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800195a:	22b8      	movs	r2, #184	; 0xb8
 800195c:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800195e:	6801      	ldr	r1, [r0, #0]
 8001960:	680a      	ldr	r2, [r1, #0]
 8001962:	439a      	bics	r2, r3
 8001964:	600a      	str	r2, [r1, #0]
}
 8001966:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001968:	22f4      	movs	r2, #244	; 0xf4
 800196a:	e7f2      	b.n	8001952 <I2C_Disable_IRQ+0x2e>

0800196c <HAL_I2C_Init>:
{
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001970:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001972:	2c00      	cmp	r4, #0
 8001974:	d03f      	beq.n	80019f6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001976:	0025      	movs	r5, r4
 8001978:	3541      	adds	r5, #65	; 0x41
 800197a:	782b      	ldrb	r3, [r5, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001982:	0023      	movs	r3, r4
 8001984:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001986:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001988:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800198a:	f7ff faff 	bl	8000f8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800198e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001990:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001992:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001994:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001996:	481d      	ldr	r0, [pc, #116]	; (8001a0c <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8001998:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800199a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800199c:	438a      	bics	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019a0:	6861      	ldr	r1, [r4, #4]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_I2C_Init+0xa4>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4002      	ands	r2, r0
 80019ac:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ae:	68e2      	ldr	r2, [r4, #12]
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d121      	bne.n	80019f8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	0209      	lsls	r1, r1, #8
 80019b8:	4331      	orrs	r1, r6
 80019ba:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4915      	ldr	r1, [pc, #84]	; (8001a14 <HAL_I2C_Init+0xa8>)
 80019c0:	4311      	orrs	r1, r2
 80019c2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019c4:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019c8:	4002      	ands	r2, r0
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019cc:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ce:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019d2:	69a1      	ldr	r1, [r4, #24]
 80019d4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019da:	6a21      	ldr	r1, [r4, #32]
 80019dc:	69e2      	ldr	r2, [r4, #28]
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80019e2:	2201      	movs	r2, #1
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	3442      	adds	r4, #66	; 0x42
 80019f4:	7020      	strb	r0, [r4, #0]
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019f8:	2184      	movs	r1, #132	; 0x84
 80019fa:	0209      	lsls	r1, r1, #8
 80019fc:	4331      	orrs	r1, r6
 80019fe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a00:	2a02      	cmp	r2, #2
 8001a02:	d1db      	bne.n	80019bc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	e7d7      	b.n	80019bc <HAL_I2C_Init+0x50>
 8001a0c:	ffff7fff 	.word	0xffff7fff
 8001a10:	f0ffffff 	.word	0xf0ffffff
 8001a14:	02008000 	.word	0x02008000

08001a18 <HAL_I2C_Master_Transmit_IT>:
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	0006      	movs	r6, r0
{
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a20:	3641      	adds	r6, #65	; 0x41
 8001a22:	7835      	ldrb	r5, [r6, #0]
{
 8001a24:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001a26:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a28:	2d20      	cmp	r5, #32
 8001a2a:	d134      	bne.n	8001a96 <HAL_I2C_Master_Transmit_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	2580      	movs	r5, #128	; 0x80
 8001a30:	6980      	ldr	r0, [r0, #24]
 8001a32:	022d      	lsls	r5, r5, #8
 8001a34:	4684      	mov	ip, r0
 8001a36:	0007      	movs	r7, r0
 8001a38:	4663      	mov	r3, ip
    return HAL_BUSY;
 8001a3a:	2002      	movs	r0, #2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a3c:	402f      	ands	r7, r5
 8001a3e:	422b      	tst	r3, r5
 8001a40:	d129      	bne.n	8001a96 <HAL_I2C_Master_Transmit_IT+0x7e>
    __HAL_LOCK(hi2c);
 8001a42:	0025      	movs	r5, r4
 8001a44:	3540      	adds	r5, #64	; 0x40
 8001a46:	782b      	ldrb	r3, [r5, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d024      	beq.n	8001a96 <HAL_I2C_Master_Transmit_IT+0x7e>
 8001a4c:	3801      	subs	r0, #1
 8001a4e:	7028      	strb	r0, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a50:	3020      	adds	r0, #32
 8001a52:	7030      	strb	r0, [r6, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a54:	0020      	movs	r0, r4
 8001a56:	2610      	movs	r6, #16
    hi2c->XferCount   = Size;
 8001a58:	9b03      	ldr	r3, [sp, #12]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a5a:	3042      	adds	r0, #66	; 0x42
 8001a5c:	7006      	strb	r6, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a5e:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001a60:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_I2C_Master_Transmit_IT+0x8c>)
    hi2c->pBuffPtr    = pData;
 8001a64:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a66:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_I2C_Master_Transmit_IT+0x90>)
 8001a6a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d813      	bhi.n	8001a9a <HAL_I2C_Master_Transmit_IT+0x82>
      xfermode = I2C_AUTOEND_MODE;
 8001a72:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001a74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8001a76:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001a78:	b292      	uxth	r2, r2
    __HAL_UNLOCK(hi2c);
 8001a7a:	2600      	movs	r6, #0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <HAL_I2C_Master_Transmit_IT+0x94>)
 8001a7e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001a80:	9000      	str	r0, [sp, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	0020      	movs	r0, r4
 8001a86:	f7ff fef3 	bl	8001870 <I2C_TransferConfig>
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	2101      	movs	r1, #1
    __HAL_UNLOCK(hi2c);
 8001a8e:	702e      	strb	r6, [r5, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a90:	f7ff ff04 	bl	800189c <I2C_Enable_IRQ>
    return HAL_OK;
 8001a94:	0030      	movs	r0, r6
}
 8001a96:	b005      	add	sp, #20
 8001a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xfermode = I2C_RELOAD_MODE;
 8001a9a:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9c:	22ff      	movs	r2, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8001a9e:	045b      	lsls	r3, r3, #17
 8001aa0:	e7eb      	b.n	8001a7a <HAL_I2C_Master_Transmit_IT+0x62>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	ffff0000 	.word	0xffff0000
 8001aa8:	080021d9 	.word	0x080021d9
 8001aac:	80002000 	.word	0x80002000

08001ab0 <HAL_I2C_Master_Receive_IT>:
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	0006      	movs	r6, r0
{
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	3641      	adds	r6, #65	; 0x41
 8001aba:	7835      	ldrb	r5, [r6, #0]
{
 8001abc:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001abe:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac0:	2d20      	cmp	r5, #32
 8001ac2:	d134      	bne.n	8001b2e <HAL_I2C_Master_Receive_IT+0x7e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ac4:	6820      	ldr	r0, [r4, #0]
 8001ac6:	2580      	movs	r5, #128	; 0x80
 8001ac8:	6980      	ldr	r0, [r0, #24]
 8001aca:	022d      	lsls	r5, r5, #8
 8001acc:	4684      	mov	ip, r0
 8001ace:	0007      	movs	r7, r0
 8001ad0:	4663      	mov	r3, ip
    return HAL_BUSY;
 8001ad2:	2002      	movs	r0, #2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ad4:	402f      	ands	r7, r5
 8001ad6:	422b      	tst	r3, r5
 8001ad8:	d129      	bne.n	8001b2e <HAL_I2C_Master_Receive_IT+0x7e>
    __HAL_LOCK(hi2c);
 8001ada:	0025      	movs	r5, r4
 8001adc:	3540      	adds	r5, #64	; 0x40
 8001ade:	782b      	ldrb	r3, [r5, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d024      	beq.n	8001b2e <HAL_I2C_Master_Receive_IT+0x7e>
 8001ae4:	3801      	subs	r0, #1
 8001ae6:	7028      	strb	r0, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ae8:	3021      	adds	r0, #33	; 0x21
 8001aea:	7030      	strb	r0, [r6, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aec:	0020      	movs	r0, r4
 8001aee:	2610      	movs	r6, #16
    hi2c->XferCount   = Size;
 8001af0:	9b03      	ldr	r3, [sp, #12]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001af2:	3042      	adds	r0, #66	; 0x42
 8001af4:	7006      	strb	r6, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001af6:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_I2C_Master_Receive_IT+0x8c>)
    hi2c->pBuffPtr    = pData;
 8001afc:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afe:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_I2C_Master_Receive_IT+0x90>)
 8001b02:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d813      	bhi.n	8001b32 <HAL_I2C_Master_Receive_IT+0x82>
      xfermode = I2C_AUTOEND_MODE;
 8001b0a:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001b0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8001b0e:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001b10:	b292      	uxth	r2, r2
    __HAL_UNLOCK(hi2c);
 8001b12:	2600      	movs	r6, #0
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_I2C_Master_Receive_IT+0x94>)
 8001b16:	8522      	strh	r2, [r4, #40]	; 0x28
 8001b18:	9000      	str	r0, [sp, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	0020      	movs	r0, r4
 8001b1e:	f7ff fea7 	bl	8001870 <I2C_TransferConfig>
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b22:	0020      	movs	r0, r4
 8001b24:	2102      	movs	r1, #2
    __HAL_UNLOCK(hi2c);
 8001b26:	702e      	strb	r6, [r5, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b28:	f7ff feb8 	bl	800189c <I2C_Enable_IRQ>
    return HAL_OK;
 8001b2c:	0030      	movs	r0, r6
}
 8001b2e:	b005      	add	sp, #20
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xfermode = I2C_RELOAD_MODE;
 8001b32:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b34:	22ff      	movs	r2, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8001b36:	045b      	lsls	r3, r3, #17
 8001b38:	e7eb      	b.n	8001b12 <HAL_I2C_Master_Receive_IT+0x62>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	ffff0000 	.word	0xffff0000
 8001b40:	080021d9 	.word	0x080021d9
 8001b44:	80002400 	.word	0x80002400

08001b48 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b48:	6803      	ldr	r3, [r0, #0]
{
 8001b4a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b4c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b4e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001b50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d000      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b56:	4798      	blx	r3
}
 8001b58:	bd10      	pop	{r4, pc}

08001b5a <HAL_I2C_MasterTxCpltCallback>:
 8001b5a:	4770      	bx	lr

08001b5c <HAL_I2C_MasterRxCpltCallback>:
 8001b5c:	4770      	bx	lr

08001b5e <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5e:	0003      	movs	r3, r0
{
 8001b60:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	2500      	movs	r5, #0
 8001b64:	2220      	movs	r2, #32
 8001b66:	0006      	movs	r6, r0
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	7819      	ldrb	r1, [r3, #0]
{
 8001b70:	0004      	movs	r4, r0
 8001b72:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b74:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b76:	2921      	cmp	r1, #33	; 0x21
 8001b78:	d10a      	bne.n	8001b90 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b7a:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8001b7c:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b7e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b80:	3920      	subs	r1, #32
 8001b82:	f7ff fecf 	bl	8001924 <I2C_Disable_IRQ>
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b86:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001b88:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b8a:	f7ff ffe6 	bl	8001b5a <HAL_I2C_MasterTxCpltCallback>
}
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b90:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 8001b92:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b94:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b96:	2102      	movs	r1, #2
 8001b98:	f7ff fec4 	bl	8001924 <I2C_Disable_IRQ>
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b9c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001b9e:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_I2C_MasterRxCpltCallback>
}
 8001ba4:	e7f3      	b.n	8001b8e <I2C_ITMasterSeqCplt+0x30>

08001ba6 <HAL_I2C_SlaveTxCpltCallback>:
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_SlaveRxCpltCallback>:
 8001ba8:	4770      	bx	lr
	...

08001bac <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	0001      	movs	r1, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bae:	6803      	ldr	r3, [r0, #0]
{
 8001bb0:	b510      	push	{r4, lr}
 8001bb2:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb4:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bb6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	3142      	adds	r1, #66	; 0x42
 8001bba:	7008      	strb	r0, [r1, #0]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	0450      	lsls	r0, r2, #17
 8001bc0:	d518      	bpl.n	8001bf4 <I2C_ITSlaveSeqCplt+0x48>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4918      	ldr	r1, [pc, #96]	; (8001c28 <I2C_ITSlaveSeqCplt+0x7c>)
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bc6:	400a      	ands	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bca:	0023      	movs	r3, r4
 8001bcc:	3341      	adds	r3, #65	; 0x41
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	2a29      	cmp	r2, #41	; 0x29
 8001bd2:	d115      	bne.n	8001c00 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bd8:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bda:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bdc:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bde:	2101      	movs	r1, #1
 8001be0:	f7ff fea0 	bl	8001924 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001be4:	0023      	movs	r3, r4
 8001be6:	2200      	movs	r2, #0
 8001be8:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001bea:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001bec:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001bee:	f7ff ffda 	bl	8001ba6 <HAL_I2C_SlaveTxCpltCallback>
}
 8001bf2:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bf4:	0bd2      	lsrs	r2, r2, #15
 8001bf6:	420a      	tst	r2, r1
 8001bf8:	d0e7      	beq.n	8001bca <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	490b      	ldr	r1, [pc, #44]	; (8001c2c <I2C_ITSlaveSeqCplt+0x80>)
 8001bfe:	e7e2      	b.n	8001bc6 <I2C_ITSlaveSeqCplt+0x1a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	2a2a      	cmp	r2, #42	; 0x2a
 8001c04:	d1f5      	bne.n	8001bf2 <I2C_ITSlaveSeqCplt+0x46>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c06:	3a02      	subs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c0a:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c0c:	0020      	movs	r0, r4
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c0e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c10:	2102      	movs	r1, #2
 8001c12:	f7ff fe87 	bl	8001924 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c16:	0023      	movs	r3, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c1c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001c1e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c20:	f7ff ffc2 	bl	8001ba8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c24:	e7e5      	b.n	8001bf2 <I2C_ITSlaveSeqCplt+0x46>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	ffffbfff 	.word	0xffffbfff
 8001c2c:	ffff7fff 	.word	0xffff7fff

08001c30 <HAL_I2C_AddrCallback>:
}
 8001c30:	4770      	bx	lr

08001c32 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c32:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c36:	2228      	movs	r2, #40	; 0x28
 8001c38:	3341      	adds	r3, #65	; 0x41
 8001c3a:	781b      	ldrb	r3, [r3, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001c3c:	0004      	movs	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8001c3e:	6801      	ldr	r1, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c40:	4013      	ands	r3, r2
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d13c      	bne.n	8001cc0 <I2C_ITAddrCplt.constprop.0+0x8e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c46:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8001c48:	698d      	ldr	r5, [r1, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c4a:	698e      	ldr	r6, [r1, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c4c:	688b      	ldr	r3, [r1, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c4e:	68ca      	ldr	r2, [r1, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8001c50:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c52:	9201      	str	r2, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c54:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c56:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8001c58:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c5a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c5c:	2a02      	cmp	r2, #2
 8001c5e:	d125      	bne.n	8001cac <I2C_ITAddrCplt.constprop.0+0x7a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c60:	059b      	lsls	r3, r3, #22
 8001c62:	0d9a      	lsrs	r2, r3, #22
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001c64:	0f5b      	lsrs	r3, r3, #29
 8001c66:	405e      	eors	r6, r3
 8001c68:	0030      	movs	r0, r6
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	4018      	ands	r0, r3
 8001c6e:	421e      	tst	r6, r3
 8001c70:	d110      	bne.n	8001c94 <I2C_ITAddrCplt.constprop.0+0x62>
        hi2c->AddrEventCount++;
 8001c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c74:	3301      	adds	r3, #1
 8001c76:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d109      	bne.n	8001c92 <I2C_ITAddrCplt.constprop.0+0x60>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c7e:	3306      	adds	r3, #6
          hi2c->AddrEventCount = 0U;
 8001c80:	64a0      	str	r0, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c82:	61cb      	str	r3, [r1, #28]
          __HAL_UNLOCK(hi2c);
 8001c84:	0023      	movs	r3, r4
 8001c86:	3340      	adds	r3, #64	; 0x40
 8001c88:	7018      	strb	r0, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c8a:	0029      	movs	r1, r5
 8001c8c:	0020      	movs	r0, r4
 8001c8e:	f7ff ffcf 	bl	8001c30 <HAL_I2C_AddrCallback>
}
 8001c92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0020      	movs	r0, r4
 8001c98:	0209      	lsls	r1, r1, #8
 8001c9a:	f7ff fe43 	bl	8001924 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c9e:	0023      	movs	r3, r4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	3340      	adds	r3, #64	; 0x40
 8001ca4:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ca6:	9a01      	ldr	r2, [sp, #4]
 8001ca8:	403a      	ands	r2, r7
 8001caa:	e7ee      	b.n	8001c8a <I2C_ITAddrCplt.constprop.0+0x58>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	0209      	lsls	r1, r1, #8
 8001cb0:	f7ff fe38 	bl	8001924 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001cb4:	0023      	movs	r3, r4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	3340      	adds	r3, #64	; 0x40
 8001cba:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cbc:	0032      	movs	r2, r6
 8001cbe:	e7e4      	b.n	8001c8a <I2C_ITAddrCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	61cb      	str	r3, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	3440      	adds	r4, #64	; 0x40
 8001cc8:	7023      	strb	r3, [r4, #0]
}
 8001cca:	e7e2      	b.n	8001c92 <I2C_ITAddrCplt.constprop.0+0x60>

08001ccc <HAL_I2C_ListenCpltCallback>:
 8001ccc:	4770      	bx	lr
	...

08001cd0 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <I2C_ITListenCplt+0x64>)
{
 8001cd2:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	6303      	str	r3, [r0, #48]	; 0x30
{
 8001cdc:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	2020      	movs	r0, #32
 8001ce0:	3241      	adds	r2, #65	; 0x41
 8001ce2:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 8001ce6:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ce8:	074b      	lsls	r3, r1, #29
 8001cea:	d513      	bpl.n	8001d14 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001cfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8001d00:	3b01      	subs	r3, #1
 8001d02:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001d04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d10:	4313      	orrs	r3, r2
 8001d12:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001d14:	0020      	movs	r0, r4
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <I2C_ITListenCplt+0x68>)
 8001d18:	f7ff fe04 	bl	8001924 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8001d20:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d22:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001d24:	0023      	movs	r3, r4
 8001d26:	2200      	movs	r2, #0
 8001d28:	3340      	adds	r3, #64	; 0x40
 8001d2a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8001d2c:	f7ff ffce 	bl	8001ccc <HAL_I2C_ListenCpltCallback>
}
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	ffff0000 	.word	0xffff0000
 8001d38:	00008003 	.word	0x00008003

08001d3c <HAL_I2C_MemTxCpltCallback>:
 8001d3c:	4770      	bx	lr

08001d3e <HAL_I2C_MemRxCpltCallback>:
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2C_ErrorCallback>:
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2C_AbortCpltCallback>:
 8001d42:	4770      	bx	lr

08001d44 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001d44:	0001      	movs	r1, r0
 8001d46:	0002      	movs	r2, r0
{
 8001d48:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001d4a:	3141      	adds	r1, #65	; 0x41
 8001d4c:	780c      	ldrb	r4, [r1, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	3240      	adds	r2, #64	; 0x40
 8001d52:	2c60      	cmp	r4, #96	; 0x60
 8001d54:	d106      	bne.n	8001d64 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	3c40      	subs	r4, #64	; 0x40
 8001d58:	700c      	strb	r4, [r1, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d5c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d5e:	f7ff fff0 	bl	8001d42 <HAL_I2C_AbortCpltCallback>
}
 8001d62:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d64:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d66:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001d68:	f7ff ffea 	bl	8001d40 <HAL_I2C_ErrorCallback>
}
 8001d6c:	e7f9      	b.n	8001d62 <I2C_TreatErrorCallback+0x1e>
	...

08001d70 <I2C_ITError>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d72:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d74:	0005      	movs	r5, r0
{
 8001d76:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d78:	2000      	movs	r0, #0
 8001d7a:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d7c:	3541      	adds	r5, #65	; 0x41
 8001d7e:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d80:	7010      	strb	r0, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d82:	4a3b      	ldr	r2, [pc, #236]	; (8001e70 <I2C_ITError+0x100>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001d84:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d86:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001d88:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001d8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d82b      	bhi.n	8001dec <I2C_ITError+0x7c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001d94:	2103      	movs	r1, #3
 8001d96:	0020      	movs	r0, r4
 8001d98:	f7ff fdc4 	bl	8001924 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d9c:	2328      	movs	r3, #40	; 0x28
 8001d9e:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <I2C_ITError+0x104>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001da2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 8001da4:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8001da6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d040      	beq.n	8001e2e <I2C_ITError+0xbe>
 8001dac:	001a      	movs	r2, r3
 8001dae:	2110      	movs	r1, #16
 8001db0:	3a11      	subs	r2, #17
 8001db2:	438a      	bics	r2, r1
 8001db4:	d13b      	bne.n	8001e2e <I2C_ITError+0xbe>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	0452      	lsls	r2, r2, #17
 8001dbc:	d503      	bpl.n	8001dc6 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	492d      	ldr	r1, [pc, #180]	; (8001e78 <I2C_ITError+0x108>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001dc6:	f7ff fc7e 	bl	80016c6 <HAL_DMA_GetState>
 8001dca:	2801      	cmp	r0, #1
 8001dcc:	d02b      	beq.n	8001e26 <I2C_ITError+0xb6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001dce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <I2C_ITError+0x10c>)
      __HAL_UNLOCK(hi2c);
 8001dd2:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001dd4:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	3340      	adds	r3, #64	; 0x40
 8001dda:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001ddc:	f7ff fc50 	bl	8001680 <HAL_DMA_Abort_IT>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d023      	beq.n	8001e2c <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001de4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001de8:	4798      	blx	r3
}
 8001dea:	e01f      	b.n	8001e2c <I2C_ITError+0xbc>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dec:	0020      	movs	r0, r4
 8001dee:	4924      	ldr	r1, [pc, #144]	; (8001e80 <I2C_ITError+0x110>)
 8001df0:	f7ff fd98 	bl	8001924 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8001df4:	0020      	movs	r0, r4
 8001df6:	f7ff fd2d 	bl	8001854 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001dfa:	782b      	ldrb	r3, [r5, #0]
 8001dfc:	2b60      	cmp	r3, #96	; 0x60
 8001dfe:	d010      	beq.n	8001e22 <I2C_ITError+0xb2>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e00:	2220      	movs	r2, #32
 8001e02:	702a      	strb	r2, [r5, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	6999      	ldr	r1, [r3, #24]
 8001e08:	4211      	tst	r1, r2
 8001e0a:	d00a      	beq.n	8001e22 <I2C_ITError+0xb2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0c:	6999      	ldr	r1, [r3, #24]
 8001e0e:	3a10      	subs	r2, #16
 8001e10:	4211      	tst	r1, r2
 8001e12:	d004      	beq.n	8001e1e <I2C_ITError+0xae>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e14:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e18:	3a0c      	subs	r2, #12
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e1e:	2220      	movs	r2, #32
 8001e20:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e7bd      	b.n	8001da2 <I2C_ITError+0x32>
      I2C_TreatErrorCallback(hi2c);
 8001e26:	0020      	movs	r0, r4
 8001e28:	f7ff ff8c 	bl	8001d44 <I2C_TreatErrorCallback>
}
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001e2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d0f8      	beq.n	8001e26 <I2C_ITError+0xb6>
 8001e34:	2210      	movs	r2, #16
 8001e36:	3b12      	subs	r3, #18
 8001e38:	4393      	bics	r3, r2
 8001e3a:	d1f4      	bne.n	8001e26 <I2C_ITError+0xb6>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	0412      	lsls	r2, r2, #16
 8001e42:	d503      	bpl.n	8001e4c <I2C_ITError+0xdc>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	490f      	ldr	r1, [pc, #60]	; (8001e84 <I2C_ITError+0x114>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e4c:	f7ff fc3b 	bl	80016c6 <HAL_DMA_GetState>
 8001e50:	2801      	cmp	r0, #1
 8001e52:	d0e8      	beq.n	8001e26 <I2C_ITError+0xb6>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001e54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <I2C_ITError+0x10c>)
      __HAL_UNLOCK(hi2c);
 8001e58:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001e5a:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8001e5c:	0023      	movs	r3, r4
 8001e5e:	3340      	adds	r3, #64	; 0x40
 8001e60:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001e62:	f7ff fc0d 	bl	8001680 <HAL_DMA_Abort_IT>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d0e0      	beq.n	8001e2c <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001e6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e6c:	e7bb      	b.n	8001de6 <I2C_ITError+0x76>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	ffff0000 	.word	0xffff0000
 8001e74:	08001fc5 	.word	0x08001fc5
 8001e78:	ffffbfff 	.word	0xffffbfff
 8001e7c:	080026fb 	.word	0x080026fb
 8001e80:	00008003 	.word	0x00008003
 8001e84:	ffff7fff 	.word	0xffff7fff

08001e88 <I2C_ITSlaveCplt>:
{
 8001e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e8a:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e8c:	0006      	movs	r6, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e8e:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e90:	3641      	adds	r6, #65	; 0x41
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e92:	9201      	str	r2, [sp, #4]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e94:	2220      	movs	r2, #32
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e96:	7835      	ldrb	r5, [r6, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e98:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e9a:	2308      	movs	r3, #8
{
 8001e9c:	0004      	movs	r4, r0
 8001e9e:	000f      	movs	r7, r1
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ea0:	439d      	bics	r5, r3
 8001ea2:	2d21      	cmp	r5, #33	; 0x21
 8001ea4:	d150      	bne.n	8001f48 <I2C_ITSlaveCplt+0xc0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001ea6:	4941      	ldr	r1, [pc, #260]	; (8001fac <I2C_ITSlaveCplt+0x124>)
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ea8:	0020      	movs	r0, r4
 8001eaa:	f7ff fd3b 	bl	8001924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001eae:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001eb8:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	493b      	ldr	r1, [pc, #236]	; (8001fb0 <I2C_ITSlaveCplt+0x128>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001ec6:	f7ff fcc5 	bl	8001854 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001eca:	9b01      	ldr	r3, [sp, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	d53e      	bpl.n	8001f50 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	4937      	ldr	r1, [pc, #220]	; (8001fb4 <I2C_ITSlaveCplt+0x12c>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	400b      	ands	r3, r1
 8001eda:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8001edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001eea:	077b      	lsls	r3, r7, #29
 8001eec:	d511      	bpl.n	8001f12 <I2C_ITSlaveCplt+0x8a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001f00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <I2C_ITSlaveCplt+0x8a>
      hi2c->XferSize--;
 8001f06:	3b01      	subs	r3, #1
 8001f08:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <I2C_ITSlaveCplt+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	0023      	movs	r3, r4
 8001f22:	2200      	movs	r2, #0
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	701a      	strb	r2, [r3, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f28:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8001f2a:	6362      	str	r2, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f2c:	4295      	cmp	r5, r2
 8001f2e:	d01a      	beq.n	8001f66 <I2C_ITSlaveCplt+0xde>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f30:	0020      	movs	r0, r4
 8001f32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001f34:	f7ff ff1c 	bl	8001d70 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f38:	7833      	ldrb	r3, [r6, #0]
 8001f3a:	2b28      	cmp	r3, #40	; 0x28
 8001f3c:	d103      	bne.n	8001f46 <I2C_ITSlaveCplt+0xbe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f3e:	0039      	movs	r1, r7
 8001f40:	0020      	movs	r0, r4
 8001f42:	f7ff fec5 	bl	8001cd0 <I2C_ITListenCplt>
}
 8001f46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f48:	2d22      	cmp	r5, #34	; 0x22
 8001f4a:	d1b1      	bne.n	8001eb0 <I2C_ITSlaveCplt+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f4c:	491a      	ldr	r1, [pc, #104]	; (8001fb8 <I2C_ITSlaveCplt+0x130>)
 8001f4e:	e7ab      	b.n	8001ea8 <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	0bdb      	lsrs	r3, r3, #15
 8001f54:	4213      	tst	r3, r2
 8001f56:	d0c8      	beq.n	8001eea <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	4918      	ldr	r1, [pc, #96]	; (8001fbc <I2C_ITSlaveCplt+0x134>)
 8001f5c:	6813      	ldr	r3, [r2, #0]
 8001f5e:	400b      	ands	r3, r1
 8001f60:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8001f62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f64:	e7bb      	b.n	8001ede <I2C_ITSlaveCplt+0x56>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f66:	0027      	movs	r7, r4
 8001f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <I2C_ITSlaveCplt+0x138>)
 8001f6c:	3740      	adds	r7, #64	; 0x40
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00c      	beq.n	8001f8c <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7ff fe1a 	bl	8001bac <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <I2C_ITSlaveCplt+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f7c:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	7033      	strb	r3, [r6, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f84:	703d      	strb	r5, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f86:	f7ff fea1 	bl	8001ccc <HAL_I2C_ListenCpltCallback>
 8001f8a:	e7dc      	b.n	8001f46 <I2C_ITSlaveCplt+0xbe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f8c:	0023      	movs	r3, r4
 8001f8e:	2220      	movs	r2, #32
 8001f90:	3341      	adds	r3, #65	; 0x41
 8001f92:	7819      	ldrb	r1, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f94:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f98:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f9a:	703d      	strb	r5, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f9c:	2922      	cmp	r1, #34	; 0x22
 8001f9e:	d102      	bne.n	8001fa6 <I2C_ITSlaveCplt+0x11e>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fa0:	f7ff fe02 	bl	8001ba8 <HAL_I2C_SlaveRxCpltCallback>
 8001fa4:	e7cf      	b.n	8001f46 <I2C_ITSlaveCplt+0xbe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fa6:	f7ff fdfe 	bl	8001ba6 <HAL_I2C_SlaveTxCpltCallback>
}
 8001faa:	e7cc      	b.n	8001f46 <I2C_ITSlaveCplt+0xbe>
 8001fac:	00008001 	.word	0x00008001
 8001fb0:	fe00e800 	.word	0xfe00e800
 8001fb4:	ffffbfff 	.word	0xffffbfff
 8001fb8:	00008002 	.word	0x00008002
 8001fbc:	ffff7fff 	.word	0xffff7fff
 8001fc0:	ffff0000 	.word	0xffff0000

08001fc4 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8001fc4:	0003      	movs	r3, r0
{
 8001fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8001fc8:	3340      	adds	r3, #64	; 0x40
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
{
 8001fce:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fd0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8001fd2:	000e      	movs	r6, r1
 8001fd4:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d024      	beq.n	8002026 <I2C_Slave_ISR_IT+0x62>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	9a01      	ldr	r2, [sp, #4]
 8001fe0:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fe2:	094a      	lsrs	r2, r1, #5
 8001fe4:	421a      	tst	r2, r3
 8001fe6:	d005      	beq.n	8001ff4 <I2C_Slave_ISR_IT+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fe8:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fea:	421a      	tst	r2, r3
 8001fec:	d002      	beq.n	8001ff4 <I2C_Slave_ISR_IT+0x30>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fee:	0020      	movs	r0, r4
 8001ff0:	f7ff ff4a 	bl	8001e88 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	06f2      	lsls	r2, r6, #27
 8001ff8:	d535      	bpl.n	8002066 <I2C_Slave_ISR_IT+0xa2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ffa:	092a      	lsrs	r2, r5, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ffc:	421a      	tst	r2, r3
 8001ffe:	d032      	beq.n	8002066 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8002000:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002002:	2b00      	cmp	r3, #0
 8002004:	d120      	bne.n	8002048 <I2C_Slave_ISR_IT+0x84>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002006:	0023      	movs	r3, r4
 8002008:	3341      	adds	r3, #65	; 0x41
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	2a28      	cmp	r2, #40	; 0x28
 800200e:	d10b      	bne.n	8002028 <I2C_Slave_ISR_IT+0x64>
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0492      	lsls	r2, r2, #18
 8002014:	4297      	cmp	r7, r2
 8002016:	d107      	bne.n	8002028 <I2C_Slave_ISR_IT+0x64>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002018:	0031      	movs	r1, r6
 800201a:	0020      	movs	r0, r4
 800201c:	f7ff fe58 	bl	8001cd0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8002020:	2000      	movs	r0, #0
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	7018      	strb	r0, [r3, #0]
}
 8002026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002028:	2210      	movs	r2, #16
 800202a:	7819      	ldrb	r1, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002030:	2929      	cmp	r1, #41	; 0x29
 8002032:	d1f5      	bne.n	8002020 <I2C_Slave_ISR_IT+0x5c>
 8002034:	492d      	ldr	r1, [pc, #180]	; (80020ec <I2C_Slave_ISR_IT+0x128>)
 8002036:	428f      	cmp	r7, r1
 8002038:	d0f2      	beq.n	8002020 <I2C_Slave_ISR_IT+0x5c>
        I2C_Flush_TXDR(hi2c);
 800203a:	0020      	movs	r0, r4
 800203c:	f7ff fc0a 	bl	8001854 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 8002040:	0020      	movs	r0, r4
 8002042:	f7ff fdb3 	bl	8001bac <I2C_ITSlaveSeqCplt>
 8002046:	e7eb      	b.n	8002020 <I2C_Slave_ISR_IT+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	2210      	movs	r2, #16
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800204e:	2304      	movs	r3, #4
 8002050:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002052:	4313      	orrs	r3, r2
 8002054:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <I2C_Slave_ISR_IT+0x12c>)
 8002058:	421f      	tst	r7, r3
 800205a:	d1e1      	bne.n	8002020 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800205c:	0020      	movs	r0, r4
 800205e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002060:	f7ff fe86 	bl	8001d70 <I2C_ITError>
 8002064:	e7dc      	b.n	8002020 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002066:	2301      	movs	r3, #1
 8002068:	0772      	lsls	r2, r6, #29
 800206a:	d51a      	bpl.n	80020a2 <I2C_Slave_ISR_IT+0xde>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800206c:	08aa      	lsrs	r2, r5, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800206e:	421a      	tst	r2, r3
 8002070:	d017      	beq.n	80020a2 <I2C_Slave_ISR_IT+0xde>
    if (hi2c->XferCount > 0U)
 8002072:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <I2C_Slave_ISR_IT+0xd0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002082:	3301      	adds	r3, #1
 8002084:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002086:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800208c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800208e:	3b01      	subs	r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1c2      	bne.n	8002020 <I2C_Slave_ISR_IT+0x5c>
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <I2C_Slave_ISR_IT+0x128>)
 800209c:	429f      	cmp	r7, r3
 800209e:	d0bf      	beq.n	8002020 <I2C_Slave_ISR_IT+0x5c>
 80020a0:	e7ce      	b.n	8002040 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020a2:	2301      	movs	r3, #1
 80020a4:	0732      	lsls	r2, r6, #28
 80020a6:	d506      	bpl.n	80020b6 <I2C_Slave_ISR_IT+0xf2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80020a8:	08ea      	lsrs	r2, r5, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020aa:	421a      	tst	r2, r3
 80020ac:	d003      	beq.n	80020b6 <I2C_Slave_ISR_IT+0xf2>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80020ae:	0020      	movs	r0, r4
 80020b0:	f7ff fdbf 	bl	8001c32 <I2C_ITAddrCplt.constprop.0>
 80020b4:	e7b4      	b.n	8002020 <I2C_Slave_ISR_IT+0x5c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020b6:	2301      	movs	r3, #1
 80020b8:	07b2      	lsls	r2, r6, #30
 80020ba:	d5b1      	bpl.n	8002020 <I2C_Slave_ISR_IT+0x5c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80020bc:	40dd      	lsrs	r5, r3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020be:	421d      	tst	r5, r3
 80020c0:	d0ae      	beq.n	8002020 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount > 0U)
 80020c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <I2C_Slave_ISR_IT+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80020ce:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80020d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80020dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	8523      	strh	r3, [r4, #40]	; 0x28
 80020e2:	e79d      	b.n	8002020 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <I2C_Slave_ISR_IT+0x12c>)
 80020e6:	421f      	tst	r7, r3
 80020e8:	d0aa      	beq.n	8002040 <I2C_Slave_ISR_IT+0x7c>
 80020ea:	e799      	b.n	8002020 <I2C_Slave_ISR_IT+0x5c>
 80020ec:	ffff0000 	.word	0xffff0000
 80020f0:	feffffff 	.word	0xfeffffff

080020f4 <I2C_ITMasterCplt>:
{
 80020f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f6:	2220      	movs	r2, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020f8:	0005      	movs	r5, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fa:	6803      	ldr	r3, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020fc:	3541      	adds	r5, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fe:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002100:	782b      	ldrb	r3, [r5, #0]
{
 8002102:	0004      	movs	r4, r0
 8002104:	000e      	movs	r6, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002106:	2b21      	cmp	r3, #33	; 0x21
 8002108:	d12c      	bne.n	8002164 <I2C_ITMasterCplt+0x70>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800210a:	2101      	movs	r1, #1
 800210c:	f7ff fc0a 	bl	8001924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002110:	2311      	movs	r3, #17
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002112:	6323      	str	r3, [r4, #48]	; 0x30
  I2C_RESET_CR2(hi2c);
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	492e      	ldr	r1, [pc, #184]	; (80021d0 <I2C_ITMasterCplt+0xdc>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	400a      	ands	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  hi2c->XferISR       = NULL;
 800211e:	2200      	movs	r2, #0
 8002120:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <I2C_ITMasterCplt+0xe0>)
 8002124:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002126:	06f2      	lsls	r2, r6, #27
 8002128:	d505      	bpl.n	8002136 <I2C_ITMasterCplt+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212a:	2210      	movs	r2, #16
 800212c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800212e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002130:	3a0c      	subs	r2, #12
 8002132:	430a      	orrs	r2, r1
 8002134:	6462      	str	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002136:	782a      	ldrb	r2, [r5, #0]
 8002138:	2a60      	cmp	r2, #96	; 0x60
 800213a:	d105      	bne.n	8002148 <I2C_ITMasterCplt+0x54>
 800213c:	0772      	lsls	r2, r6, #29
 800213e:	d503      	bpl.n	8002148 <I2C_ITMasterCplt+0x54>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b2db      	uxtb	r3, r3
 8002144:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8002146:	9b01      	ldr	r3, [sp, #4]
  I2C_Flush_TXDR(hi2c);
 8002148:	0020      	movs	r0, r4
 800214a:	f7ff fb83 	bl	8001854 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 800214e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002150:	782a      	ldrb	r2, [r5, #0]
 8002152:	2a60      	cmp	r2, #96	; 0x60
 8002154:	d001      	beq.n	800215a <I2C_ITMasterCplt+0x66>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <I2C_ITMasterCplt+0x80>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800215a:	0020      	movs	r0, r4
 800215c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800215e:	f7ff fe07 	bl	8001d70 <I2C_ITError>
}
 8002162:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002164:	782b      	ldrb	r3, [r5, #0]
 8002166:	2b22      	cmp	r3, #34	; 0x22
 8002168:	d1d4      	bne.n	8002114 <I2C_ITMasterCplt+0x20>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800216a:	2102      	movs	r1, #2
 800216c:	f7ff fbda 	bl	8001924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002170:	2312      	movs	r3, #18
 8002172:	e7ce      	b.n	8002112 <I2C_ITMasterCplt+0x1e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002174:	782a      	ldrb	r2, [r5, #0]
 8002176:	2a21      	cmp	r2, #33	; 0x21
 8002178:	d113      	bne.n	80021a2 <I2C_ITMasterCplt+0xae>
    hi2c->State = HAL_I2C_STATE_READY;
 800217a:	3a01      	subs	r2, #1
 800217c:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800217e:	0022      	movs	r2, r4
 8002180:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002184:	3242      	adds	r2, #66	; 0x42
 8002186:	7810      	ldrb	r0, [r2, #0]
 8002188:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800218a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800218c:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800218e:	2840      	cmp	r0, #64	; 0x40
 8002190:	d103      	bne.n	800219a <I2C_ITMasterCplt+0xa6>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002192:	0020      	movs	r0, r4
 8002194:	f7ff fdd2 	bl	8001d3c <HAL_I2C_MemTxCpltCallback>
 8002198:	e7e3      	b.n	8002162 <I2C_ITMasterCplt+0x6e>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800219a:	0020      	movs	r0, r4
 800219c:	f7ff fcdd 	bl	8001b5a <HAL_I2C_MasterTxCpltCallback>
 80021a0:	e7df      	b.n	8002162 <I2C_ITMasterCplt+0x6e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021a2:	782a      	ldrb	r2, [r5, #0]
 80021a4:	2a22      	cmp	r2, #34	; 0x22
 80021a6:	d1dc      	bne.n	8002162 <I2C_ITMasterCplt+0x6e>
    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	3a02      	subs	r2, #2
 80021aa:	702a      	strb	r2, [r5, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ac:	0022      	movs	r2, r4
 80021ae:	0021      	movs	r1, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80021b0:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021b2:	3242      	adds	r2, #66	; 0x42
 80021b4:	7810      	ldrb	r0, [r2, #0]
 80021b6:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80021ba:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021bc:	2840      	cmp	r0, #64	; 0x40
 80021be:	d103      	bne.n	80021c8 <I2C_ITMasterCplt+0xd4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021c0:	0020      	movs	r0, r4
 80021c2:	f7ff fdbc 	bl	8001d3e <HAL_I2C_MemRxCpltCallback>
 80021c6:	e7cc      	b.n	8002162 <I2C_ITMasterCplt+0x6e>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021c8:	0020      	movs	r0, r4
 80021ca:	f7ff fcc7 	bl	8001b5c <HAL_I2C_MasterRxCpltCallback>
}
 80021ce:	e7c8      	b.n	8002162 <I2C_ITMasterCplt+0x6e>
 80021d0:	fe00e800 	.word	0xfe00e800
 80021d4:	ffff0000 	.word	0xffff0000

080021d8 <I2C_Master_ISR_IT>:
{
 80021d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80021da:	0007      	movs	r7, r0
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	783b      	ldrb	r3, [r7, #0]
{
 80021e0:	0004      	movs	r4, r0
 80021e2:	000d      	movs	r5, r1
 80021e4:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80021e6:	2002      	movs	r0, #2
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d01d      	beq.n	8002228 <I2C_Master_ISR_IT+0x50>
 80021ec:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021ee:	090a      	lsrs	r2, r1, #4
  __HAL_LOCK(hi2c);
 80021f0:	703b      	strb	r3, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021f2:	421a      	tst	r2, r3
 80021f4:	d019      	beq.n	800222a <I2C_Master_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021f6:	0932      	lsrs	r2, r6, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021f8:	421a      	tst	r2, r3
 80021fa:	d016      	beq.n	800222a <I2C_Master_ISR_IT+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fc:	2210      	movs	r2, #16
 80021fe:	6823      	ldr	r3, [r4, #0]
    I2C_Flush_TXDR(hi2c);
 8002200:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002204:	2304      	movs	r3, #4
 8002206:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002208:	4313      	orrs	r3, r2
 800220a:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 800220c:	f7ff fb22 	bl	8001854 <I2C_Flush_TXDR>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002210:	2301      	movs	r3, #1
 8002212:	06aa      	lsls	r2, r5, #26
 8002214:	d506      	bpl.n	8002224 <I2C_Master_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002216:	0976      	lsrs	r6, r6, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002218:	421e      	tst	r6, r3
 800221a:	d003      	beq.n	8002224 <I2C_Master_ISR_IT+0x4c>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800221c:	0029      	movs	r1, r5
 800221e:	0020      	movs	r0, r4
 8002220:	f7ff ff68 	bl	80020f4 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 8002224:	2000      	movs	r0, #0
 8002226:	7038      	strb	r0, [r7, #0]
}
 8002228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800222a:	2301      	movs	r3, #1
 800222c:	076a      	lsls	r2, r5, #29
 800222e:	d513      	bpl.n	8002258 <I2C_Master_ISR_IT+0x80>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002230:	08b2      	lsrs	r2, r6, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002232:	421a      	tst	r2, r3
 8002234:	d010      	beq.n	8002258 <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002236:	3303      	adds	r3, #3
 8002238:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002242:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hi2c->pBuffPtr++;
 8002244:	3301      	adds	r3, #1
 8002246:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8002248:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800224e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002250:	3b01      	subs	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002256:	e7db      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002258:	2301      	movs	r3, #1
 800225a:	07aa      	lsls	r2, r5, #30
 800225c:	d507      	bpl.n	800226e <I2C_Master_ISR_IT+0x96>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800225e:	0872      	lsrs	r2, r6, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002260:	421a      	tst	r2, r3
 8002262:	d004      	beq.n	800226e <I2C_Master_ISR_IT+0x96>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	6291      	str	r1, [r2, #40]	; 0x28
 800226c:	e7ea      	b.n	8002244 <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800226e:	2301      	movs	r3, #1
 8002270:	062a      	lsls	r2, r5, #24
 8002272:	d534      	bpl.n	80022de <I2C_Master_ISR_IT+0x106>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002274:	09b2      	lsrs	r2, r6, #6
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002276:	421a      	tst	r2, r3
 8002278:	d031      	beq.n	80022de <I2C_Master_ISR_IT+0x106>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800227a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227c:	6823      	ldr	r3, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800227e:	2a00      	cmp	r2, #0
 8002280:	d021      	beq.n	80022c6 <I2C_Master_ISR_IT+0xee>
 8002282:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8002284:	2800      	cmp	r0, #0
 8002286:	d11e      	bne.n	80022c6 <I2C_Master_ISR_IT+0xee>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002288:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800228c:	0589      	lsls	r1, r1, #22
 800228e:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002290:	2bff      	cmp	r3, #255	; 0xff
 8002292:	d908      	bls.n	80022a6 <I2C_Master_ISR_IT+0xce>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002294:	22ff      	movs	r2, #255	; 0xff
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002296:	2380      	movs	r3, #128	; 0x80
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002298:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800229a:	9000      	str	r0, [sp, #0]
 800229c:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800229e:	0020      	movs	r0, r4
 80022a0:	f7ff fae6 	bl	8001870 <I2C_TransferConfig>
 80022a4:	e7b4      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
        hi2c->XferSize = hi2c->XferCount;
 80022a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 80022aa:	b292      	uxth	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022ac:	469c      	mov	ip, r3
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <I2C_Master_ISR_IT+0x13c>)
        hi2c->XferSize = hi2c->XferCount;
 80022b0:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	459c      	cmp	ip, r3
 80022b6:	d002      	beq.n	80022be <I2C_Master_ISR_IT+0xe6>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80022b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022ba:	9000      	str	r0, [sp, #0]
 80022bc:	e7ef      	b.n	800229e <I2C_Master_ISR_IT+0xc6>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	9000      	str	r0, [sp, #0]
 80022c2:	049b      	lsls	r3, r3, #18
 80022c4:	e7eb      	b.n	800229e <I2C_Master_ISR_IT+0xc6>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	d403      	bmi.n	80022d4 <I2C_Master_ISR_IT+0xfc>
        I2C_ITMasterSeqCplt(hi2c);
 80022cc:	0020      	movs	r0, r4
 80022ce:	f7ff fc46 	bl	8001b5e <I2C_ITMasterSeqCplt>
 80022d2:	e79d      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	0020      	movs	r0, r4
 80022d8:	f7ff fd4a 	bl	8001d70 <I2C_ITError>
 80022dc:	e798      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80022de:	2301      	movs	r3, #1
 80022e0:	066a      	lsls	r2, r5, #25
 80022e2:	d400      	bmi.n	80022e6 <I2C_Master_ISR_IT+0x10e>
 80022e4:	e794      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022e6:	09b2      	lsrs	r2, r6, #6
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80022e8:	421a      	tst	r2, r3
 80022ea:	d100      	bne.n	80022ee <I2C_Master_ISR_IT+0x116>
 80022ec:	e790      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
    if (hi2c->XferCount == 0U)
 80022ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ef      	bne.n	80022d4 <I2C_Master_ISR_IT+0xfc>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	0192      	lsls	r2, r2, #6
 80022fa:	d500      	bpl.n	80022fe <I2C_Master_ISR_IT+0x126>
 80022fc:	e788      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80022fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <I2C_Master_ISR_IT+0x13c>)
 8002302:	4291      	cmp	r1, r2
 8002304:	d1e2      	bne.n	80022cc <I2C_Master_ISR_IT+0xf4>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	01d2      	lsls	r2, r2, #7
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	e77e      	b.n	8002210 <I2C_Master_ISR_IT+0x38>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	ffff0000 	.word	0xffff0000

08002318 <I2C_Mem_ISR_DMA>:
{
 8002318:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 800231a:	0005      	movs	r5, r0
 800231c:	3540      	adds	r5, #64	; 0x40
 800231e:	782b      	ldrb	r3, [r5, #0]
{
 8002320:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8002322:	2002      	movs	r0, #2
 8002324:	2b01      	cmp	r3, #1
 8002326:	d017      	beq.n	8002358 <I2C_Mem_ISR_DMA+0x40>
 8002328:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800232a:	0908      	lsrs	r0, r1, #4
  __HAL_LOCK(hi2c);
 800232c:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800232e:	4218      	tst	r0, r3
 8002330:	d013      	beq.n	800235a <I2C_Mem_ISR_DMA+0x42>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002332:	0910      	lsrs	r0, r2, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002334:	4218      	tst	r0, r3
 8002336:	d010      	beq.n	800235a <I2C_Mem_ISR_DMA+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	2210      	movs	r2, #16
 800233a:	6823      	ldr	r3, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800233c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002340:	2304      	movs	r3, #4
 8002342:	6c62      	ldr	r2, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002344:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002346:	4313      	orrs	r3, r2
 8002348:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800234a:	f7ff faa7 	bl	800189c <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800234e:	0020      	movs	r0, r4
 8002350:	f7ff fa80 	bl	8001854 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8002354:	2000      	movs	r0, #0
 8002356:	7028      	strb	r0, [r5, #0]
}
 8002358:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800235a:	2301      	movs	r3, #1
 800235c:	0788      	lsls	r0, r1, #30
 800235e:	d509      	bpl.n	8002374 <I2C_Mem_ISR_DMA+0x5c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002360:	0850      	lsrs	r0, r2, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002362:	4218      	tst	r0, r3
 8002364:	d006      	beq.n	8002374 <I2C_Mem_ISR_DMA+0x5c>
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->Memaddress = 0xFFFFFFFFU;
 800236c:	2301      	movs	r3, #1
 800236e:	425b      	negs	r3, r3
 8002370:	6523      	str	r3, [r4, #80]	; 0x50
 8002372:	e7ef      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002374:	2301      	movs	r3, #1
 8002376:	0608      	lsls	r0, r1, #24
 8002378:	d538      	bpl.n	80023ec <I2C_Mem_ISR_DMA+0xd4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800237a:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800237c:	4218      	tst	r0, r3
 800237e:	d035      	beq.n	80023ec <I2C_Mem_ISR_DMA+0xd4>
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002380:	2110      	movs	r1, #16
 8002382:	0020      	movs	r0, r4
 8002384:	f7ff fa8a 	bl	800189c <I2C_Enable_IRQ>
    if (hi2c->XferCount != 0U)
 8002388:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800238a:	2b00      	cmp	r3, #0
 800238c:	d029      	beq.n	80023e2 <I2C_Mem_ISR_DMA+0xca>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002390:	2bff      	cmp	r3, #255	; 0xff
 8002392:	d91b      	bls.n	80023cc <I2C_Mem_ISR_DMA+0xb4>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002394:	2300      	movs	r3, #0
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002396:	22ff      	movs	r2, #255	; 0xff
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800239e:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023a0:	b289      	uxth	r1, r1
 80023a2:	045b      	lsls	r3, r3, #17
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023a4:	0020      	movs	r0, r4
 80023a6:	f7ff fa63 	bl	8001870 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80023aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b4:	0023      	movs	r3, r4
 80023b6:	3341      	adds	r3, #65	; 0x41
 80023b8:	781a      	ldrb	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	6819      	ldr	r1, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023be:	2a22      	cmp	r2, #34	; 0x22
 80023c0:	d143      	bne.n	800244a <I2C_Mem_ISR_DMA+0x132>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	0212      	lsls	r2, r2, #8
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e7c3      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
        hi2c->XferSize = hi2c->XferCount;
 80023d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        hi2c->XferSize = hi2c->XferCount;
 80023d6:	b292      	uxth	r2, r2
 80023d8:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023da:	b289      	uxth	r1, r1
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	049b      	lsls	r3, r3, #18
 80023e0:	e7e0      	b.n	80023a4 <I2C_Mem_ISR_DMA+0x8c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	0020      	movs	r0, r4
 80023e6:	f7ff fcc3 	bl	8001d70 <I2C_ITError>
 80023ea:	e7b3      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023ec:	2301      	movs	r3, #1
 80023ee:	0648      	lsls	r0, r1, #25
 80023f0:	d52e      	bpl.n	8002450 <I2C_Mem_ISR_DMA+0x138>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023f2:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023f4:	4218      	tst	r0, r3
 80023f6:	d02b      	beq.n	8002450 <I2C_Mem_ISR_DMA+0x138>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f8:	0026      	movs	r6, r4
 80023fa:	3641      	adds	r6, #65	; 0x41
 80023fc:	7833      	ldrb	r3, [r6, #0]
      direction = I2C_GENERATE_START_READ;
 80023fe:	3b22      	subs	r3, #34	; 0x22
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	4193      	sbcs	r3, r2
 8002404:	425b      	negs	r3, r3
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <I2C_Mem_ISR_DMA+0x150>)
 8002408:	0a9b      	lsrs	r3, r3, #10
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	189b      	adds	r3, r3, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002410:	2aff      	cmp	r2, #255	; 0xff
 8002412:	d910      	bls.n	8002436 <I2C_Mem_ISR_DMA+0x11e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002414:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800241c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800241e:	b289      	uxth	r1, r1
 8002420:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002422:	0020      	movs	r0, r4
 8002424:	f7ff fa24 	bl	8001870 <I2C_TransferConfig>
    hi2c->XferCount -= hi2c->XferSize;
 8002428:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800242a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	b29b      	uxth	r3, r3
 8002430:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002432:	7832      	ldrb	r2, [r6, #0]
 8002434:	e7c1      	b.n	80023ba <I2C_Mem_ISR_DMA+0xa2>
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800243a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800243c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      hi2c->XferSize = hi2c->XferCount;
 800243e:	b292      	uxth	r2, r2
 8002440:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002442:	b289      	uxth	r1, r1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	049b      	lsls	r3, r3, #18
 8002448:	e7eb      	b.n	8002422 <I2C_Mem_ISR_DMA+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	01d2      	lsls	r2, r2, #7
 800244e:	e7ba      	b.n	80023c6 <I2C_Mem_ISR_DMA+0xae>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002450:	2301      	movs	r3, #1
 8002452:	0688      	lsls	r0, r1, #26
 8002454:	d400      	bmi.n	8002458 <I2C_Mem_ISR_DMA+0x140>
 8002456:	e77d      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002458:	0952      	lsrs	r2, r2, #5
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800245a:	421a      	tst	r2, r3
 800245c:	d100      	bne.n	8002460 <I2C_Mem_ISR_DMA+0x148>
 800245e:	e779      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002460:	0020      	movs	r0, r4
 8002462:	f7ff fe47 	bl	80020f4 <I2C_ITMasterCplt>
 8002466:	e775      	b.n	8002354 <I2C_Mem_ISR_DMA+0x3c>
 8002468:	80002400 	.word	0x80002400

0800246c <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 800246c:	0003      	movs	r3, r0
{
 800246e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8002470:	3340      	adds	r3, #64	; 0x40
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	781b      	ldrb	r3, [r3, #0]
{
 8002476:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8002478:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 800247a:	000e      	movs	r6, r1
 800247c:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 800247e:	2002      	movs	r0, #2
 8002480:	2b01      	cmp	r3, #1
 8002482:	d03d      	beq.n	8002500 <I2C_Slave_ISR_DMA+0x94>
 8002484:	2301      	movs	r3, #1
 8002486:	9a01      	ldr	r2, [sp, #4]
 8002488:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800248a:	094a      	lsrs	r2, r1, #5
 800248c:	421a      	tst	r2, r3
 800248e:	d005      	beq.n	800249c <I2C_Slave_ISR_DMA+0x30>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002490:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002492:	421a      	tst	r2, r3
 8002494:	d002      	beq.n	800249c <I2C_Slave_ISR_DMA+0x30>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002496:	0020      	movs	r0, r4
 8002498:	f7ff fcf6 	bl	8001e88 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800249c:	2001      	movs	r0, #1
 800249e:	06f3      	lsls	r3, r6, #27
 80024a0:	d55c      	bpl.n	800255c <I2C_Slave_ISR_DMA+0xf0>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024a2:	092b      	lsrs	r3, r5, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024a4:	4203      	tst	r3, r0
 80024a6:	d059      	beq.n	800255c <I2C_Slave_ISR_DMA+0xf0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024a8:	0bab      	lsrs	r3, r5, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80024aa:	0bed      	lsrs	r5, r5, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024ac:	469c      	mov	ip, r3
 80024ae:	432b      	orrs	r3, r5
 80024b0:	4203      	tst	r3, r0
 80024b2:	d04f      	beq.n	8002554 <I2C_Slave_ISR_DMA+0xe8>
      if (hi2c->hdmarx != NULL)
 80024b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 80024b6:	1e0b      	subs	r3, r1, #0
      if (hi2c->hdmarx != NULL)
 80024b8:	d006      	beq.n	80024c8 <I2C_Slave_ISR_DMA+0x5c>
  uint32_t treatdmanack = 0U;
 80024ba:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80024bc:	4205      	tst	r5, r0
 80024be:	d003      	beq.n	80024c8 <I2C_Slave_ISR_DMA+0x5c>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80024c0:	680b      	ldr	r3, [r1, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 80024c4:	425a      	negs	r2, r3
 80024c6:	4153      	adcs	r3, r2
      if (hi2c->hdmatx != NULL)
 80024c8:	0022      	movs	r2, r4
 80024ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024cc:	3241      	adds	r2, #65	; 0x41
 80024ce:	2900      	cmp	r1, #0
 80024d0:	d006      	beq.n	80024e0 <I2C_Slave_ISR_DMA+0x74>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80024d2:	4660      	mov	r0, ip
 80024d4:	07c0      	lsls	r0, r0, #31
 80024d6:	d503      	bpl.n	80024e0 <I2C_Slave_ISR_DMA+0x74>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80024d8:	6809      	ldr	r1, [r1, #0]
 80024da:	6849      	ldr	r1, [r1, #4]
 80024dc:	2900      	cmp	r1, #0
 80024de:	d001      	beq.n	80024e4 <I2C_Slave_ISR_DMA+0x78>
      if (treatdmanack == 1U)
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11e      	bne.n	8002522 <I2C_Slave_ISR_DMA+0xb6>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024e4:	7813      	ldrb	r3, [r2, #0]
 80024e6:	2b28      	cmp	r3, #40	; 0x28
 80024e8:	d10b      	bne.n	8002502 <I2C_Slave_ISR_DMA+0x96>
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	049b      	lsls	r3, r3, #18
 80024ee:	429f      	cmp	r7, r3
 80024f0:	d107      	bne.n	8002502 <I2C_Slave_ISR_DMA+0x96>
          I2C_ITListenCplt(hi2c, ITFlags);
 80024f2:	0031      	movs	r1, r6
 80024f4:	0020      	movs	r0, r4
 80024f6:	f7ff fbeb 	bl	8001cd0 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 80024fa:	2000      	movs	r0, #0
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	7018      	strb	r0, [r3, #0]
}
 8002500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002502:	7811      	ldrb	r1, [r2, #0]
 8002504:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800250a:	2929      	cmp	r1, #41	; 0x29
 800250c:	d1f5      	bne.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
 800250e:	4918      	ldr	r1, [pc, #96]	; (8002570 <I2C_Slave_ISR_DMA+0x104>)
 8002510:	428f      	cmp	r7, r1
 8002512:	d0f2      	beq.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
          I2C_Flush_TXDR(hi2c);
 8002514:	0020      	movs	r0, r4
 8002516:	f7ff f99d 	bl	8001854 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800251a:	0020      	movs	r0, r4
 800251c:	f7ff fb46 	bl	8001bac <I2C_ITSlaveSeqCplt>
 8002520:	e7eb      	b.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	2110      	movs	r1, #16
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	61d9      	str	r1, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002528:	2304      	movs	r3, #4
 800252a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800252c:	430b      	orrs	r3, r1
 800252e:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8002530:	7813      	ldrb	r3, [r2, #0]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <I2C_Slave_ISR_DMA+0x108>)
        tmpstate = hi2c->State;
 8002534:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002536:	4217      	tst	r7, r2
 8002538:	d1df      	bne.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800253a:	2208      	movs	r2, #8
 800253c:	4393      	bics	r3, r2
 800253e:	2b21      	cmp	r3, #33	; 0x21
 8002540:	d101      	bne.n	8002546 <I2C_Slave_ISR_DMA+0xda>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002542:	6323      	str	r3, [r4, #48]	; 0x30
 8002544:	e001      	b.n	800254a <I2C_Slave_ISR_DMA+0xde>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002546:	2b22      	cmp	r3, #34	; 0x22
 8002548:	d0fb      	beq.n	8002542 <I2C_Slave_ISR_DMA+0xd6>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800254a:	0020      	movs	r0, r4
 800254c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800254e:	f7ff fc0f 	bl	8001d70 <I2C_ITError>
 8002552:	e7d2      	b.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	2210      	movs	r2, #16
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	61da      	str	r2, [r3, #28]
 800255a:	e7ce      	b.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800255c:	2301      	movs	r3, #1
 800255e:	0732      	lsls	r2, r6, #28
 8002560:	d5cb      	bpl.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002562:	08ed      	lsrs	r5, r5, #3
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002564:	421d      	tst	r5, r3
 8002566:	d0c8      	beq.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002568:	0020      	movs	r0, r4
 800256a:	f7ff fb62 	bl	8001c32 <I2C_ITAddrCplt.constprop.0>
 800256e:	e7c4      	b.n	80024fa <I2C_Slave_ISR_DMA+0x8e>
 8002570:	ffff0000 	.word	0xffff0000
 8002574:	feffffff 	.word	0xfeffffff

08002578 <I2C_Master_ISR_DMA>:
{
 8002578:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 800257a:	0005      	movs	r5, r0
 800257c:	3540      	adds	r5, #64	; 0x40
 800257e:	782b      	ldrb	r3, [r5, #0]
{
 8002580:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8002582:	2002      	movs	r0, #2
 8002584:	2b01      	cmp	r3, #1
 8002586:	d017      	beq.n	80025b8 <I2C_Master_ISR_DMA+0x40>
 8002588:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800258a:	0908      	lsrs	r0, r1, #4
  __HAL_LOCK(hi2c);
 800258c:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800258e:	4218      	tst	r0, r3
 8002590:	d013      	beq.n	80025ba <I2C_Master_ISR_DMA+0x42>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002592:	0910      	lsrs	r0, r2, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002594:	4218      	tst	r0, r3
 8002596:	d010      	beq.n	80025ba <I2C_Master_ISR_DMA+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	2210      	movs	r2, #16
 800259a:	6823      	ldr	r3, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800259c:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a0:	2304      	movs	r3, #4
 80025a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80025a4:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a6:	4313      	orrs	r3, r2
 80025a8:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80025aa:	f7ff f977 	bl	800189c <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80025ae:	0020      	movs	r0, r4
 80025b0:	f7ff f950 	bl	8001854 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80025b4:	2000      	movs	r0, #0
 80025b6:	7028      	strb	r0, [r5, #0]
}
 80025b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80025ba:	2301      	movs	r3, #1
 80025bc:	0608      	lsls	r0, r1, #24
 80025be:	d546      	bpl.n	800264e <I2C_Master_ISR_DMA+0xd6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025c0:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80025c2:	4218      	tst	r0, r3
 80025c4:	d043      	beq.n	800264e <I2C_Master_ISR_DMA+0xd6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80025d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d02f      	beq.n	8002636 <I2C_Master_ISR_DMA+0xbe>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80025d6:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80025da:	0589      	lsls	r1, r1, #22
 80025dc:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025de:	2bff      	cmp	r3, #255	; 0xff
 80025e0:	d91b      	bls.n	800261a <I2C_Master_ISR_DMA+0xa2>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80025ea:	2000      	movs	r0, #0
 80025ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80025ee:	9000      	str	r0, [sp, #0]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7ff f93c 	bl	8001870 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80025f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002602:	0023      	movs	r3, r4
 8002604:	3341      	adds	r3, #65	; 0x41
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800260a:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800260c:	2a22      	cmp	r2, #34	; 0x22
 800260e:	d10f      	bne.n	8002630 <I2C_Master_ISR_DMA+0xb8>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e7cc      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
        hi2c->XferSize = hi2c->XferCount;
 800261a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800261c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800261e:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <I2C_Master_ISR_DMA+0x11c>)
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <I2C_Master_ISR_DMA+0xb2>
          xfermode = hi2c->XferOptions;
 8002626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002628:	e7df      	b.n	80025ea <I2C_Master_ISR_DMA+0x72>
          xfermode = I2C_AUTOEND_MODE;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	e7dc      	b.n	80025ea <I2C_Master_ISR_DMA+0x72>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	01d2      	lsls	r2, r2, #7
 8002634:	e7ee      	b.n	8002614 <I2C_Master_ISR_DMA+0x9c>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	019b      	lsls	r3, r3, #6
 800263a:	d403      	bmi.n	8002644 <I2C_Master_ISR_DMA+0xcc>
        I2C_ITMasterSeqCplt(hi2c);
 800263c:	0020      	movs	r0, r4
 800263e:	f7ff fa8e 	bl	8001b5e <I2C_ITMasterSeqCplt>
 8002642:	e7b7      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002644:	2140      	movs	r1, #64	; 0x40
 8002646:	0020      	movs	r0, r4
 8002648:	f7ff fb92 	bl	8001d70 <I2C_ITError>
 800264c:	e7b2      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800264e:	2301      	movs	r3, #1
 8002650:	0648      	lsls	r0, r1, #25
 8002652:	d513      	bpl.n	800267c <I2C_Master_ISR_DMA+0x104>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002654:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002656:	4218      	tst	r0, r3
 8002658:	d010      	beq.n	800267c <I2C_Master_ISR_DMA+0x104>
    if (hi2c->XferCount == 0U)
 800265a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f1      	bne.n	8002644 <I2C_Master_ISR_DMA+0xcc>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	0192      	lsls	r2, r2, #6
 8002666:	d4a5      	bmi.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002668:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <I2C_Master_ISR_DMA+0x11c>)
 800266c:	4291      	cmp	r1, r2
 800266e:	d1e5      	bne.n	800263c <I2C_Master_ISR_DMA+0xc4>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	01d2      	lsls	r2, r2, #7
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e79b      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800267c:	2301      	movs	r3, #1
 800267e:	0688      	lsls	r0, r1, #26
 8002680:	d400      	bmi.n	8002684 <I2C_Master_ISR_DMA+0x10c>
 8002682:	e797      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002684:	0952      	lsrs	r2, r2, #5
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002686:	421a      	tst	r2, r3
 8002688:	d100      	bne.n	800268c <I2C_Master_ISR_DMA+0x114>
 800268a:	e793      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800268c:	0020      	movs	r0, r4
 800268e:	f7ff fd31 	bl	80020f4 <I2C_ITMasterCplt>
 8002692:	e78f      	b.n	80025b4 <I2C_Master_ISR_DMA+0x3c>
 8002694:	ffff0000 	.word	0xffff0000

08002698 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002698:	6803      	ldr	r3, [r0, #0]
{
 800269a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800269c:	699c      	ldr	r4, [r3, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800269e:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026a0:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026a2:	05e5      	lsls	r5, r4, #23
 80026a4:	d508      	bpl.n	80026b8 <HAL_I2C_ER_IRQHandler+0x20>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026a6:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026a8:	420d      	tst	r5, r1
 80026aa:	d005      	beq.n	80026b8 <HAL_I2C_ER_IRQHandler+0x20>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026ac:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80026ae:	4329      	orrs	r1, r5
 80026b0:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0049      	lsls	r1, r1, #1
 80026b6:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026b8:	2101      	movs	r1, #1
 80026ba:	0565      	lsls	r5, r4, #21
 80026bc:	d509      	bpl.n	80026d2 <HAL_I2C_ER_IRQHandler+0x3a>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026be:	09d5      	lsrs	r5, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026c0:	420d      	tst	r5, r1
 80026c2:	d006      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026c4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80026c6:	3107      	adds	r1, #7
 80026c8:	4329      	orrs	r1, r5
 80026ca:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	00c9      	lsls	r1, r1, #3
 80026d0:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026d2:	2101      	movs	r1, #1
 80026d4:	05a4      	lsls	r4, r4, #22
 80026d6:	d509      	bpl.n	80026ec <HAL_I2C_ER_IRQHandler+0x54>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026d8:	09d2      	lsrs	r2, r2, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026da:	420a      	tst	r2, r1
 80026dc:	d006      	beq.n	80026ec <HAL_I2C_ER_IRQHandler+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026de:	2202      	movs	r2, #2
 80026e0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80026e2:	430a      	orrs	r2, r1
 80026e4:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	61da      	str	r2, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026ec:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80026ee:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026f0:	4219      	tst	r1, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x60>
    I2C_ITError(hi2c, tmperror);
 80026f4:	f7ff fb3c 	bl	8001d70 <I2C_ITError>
}
 80026f8:	bd70      	pop	{r4, r5, r6, pc}

080026fa <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80026fc:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 80026fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002704:	2200      	movs	r2, #0
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8002708:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800270e:	2200      	movs	r2, #0
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
  I2C_TreatErrorCallback(hi2c);
 8002712:	f7ff fb17 	bl	8001d44 <I2C_TreatErrorCallback>
}
 8002716:	bd10      	pop	{r4, pc}

08002718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	0004      	movs	r4, r0
 800271c:	3441      	adds	r4, #65	; 0x41
 800271e:	7822      	ldrb	r2, [r4, #0]
{
 8002720:	0003      	movs	r3, r0
 8002722:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002724:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	b2d6      	uxtb	r6, r2
 8002728:	2a20      	cmp	r2, #32
 800272a:	d118      	bne.n	800275e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800272c:	001d      	movs	r5, r3
 800272e:	3540      	adds	r5, #64	; 0x40
 8002730:	782a      	ldrb	r2, [r5, #0]
 8002732:	2a01      	cmp	r2, #1
 8002734:	d013      	beq.n	800275e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002736:	2224      	movs	r2, #36	; 0x24
 8002738:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3a23      	subs	r2, #35	; 0x23
 800273e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002740:	4807      	ldr	r0, [pc, #28]	; (8002760 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002742:	4391      	bics	r1, r2
 8002744:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800274a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800274c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	4339      	orrs	r1, r7
 8002752:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800275c:	7028      	strb	r0, [r5, #0]
  }
}
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002760:	ffffefff 	.word	0xffffefff

08002764 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002764:	0002      	movs	r2, r0
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	3241      	adds	r2, #65	; 0x41
 800276a:	7814      	ldrb	r4, [r2, #0]
{
 800276c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002770:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	2c20      	cmp	r4, #32
 8002774:	d117      	bne.n	80027a6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002776:	001c      	movs	r4, r3
 8002778:	3440      	adds	r4, #64	; 0x40
 800277a:	7826      	ldrb	r6, [r4, #0]
 800277c:	2e01      	cmp	r6, #1
 800277e:	d012      	beq.n	80027a6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002780:	3022      	adds	r0, #34	; 0x22
 8002782:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3823      	subs	r0, #35	; 0x23
 8002788:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	4f07      	ldr	r7, [pc, #28]	; (80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800278c:	4386      	bics	r6, r0
 800278e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002790:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002792:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002794:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002796:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002798:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	4308      	orrs	r0, r1
 800279e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80027a0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80027a4:	7020      	strb	r0, [r4, #0]
  }
}
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a8:	fffff0ff 	.word	0xfffff0ff

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	0004      	movs	r4, r0
 80027b0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d045      	beq.n	8002842 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	07db      	lsls	r3, r3, #31
 80027ba:	d42f      	bmi.n	800281c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	079b      	lsls	r3, r3, #30
 80027c0:	d500      	bpl.n	80027c4 <HAL_RCC_OscConfig+0x18>
 80027c2:	e081      	b.n	80028c8 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	071b      	lsls	r3, r3, #28
 80027c8:	d500      	bpl.n	80027cc <HAL_RCC_OscConfig+0x20>
 80027ca:	e0bc      	b.n	8002946 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	075b      	lsls	r3, r3, #29
 80027d0:	d500      	bpl.n	80027d4 <HAL_RCC_OscConfig+0x28>
 80027d2:	e0df      	b.n	8002994 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	06db      	lsls	r3, r3, #27
 80027d8:	d51a      	bpl.n	8002810 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027da:	6962      	ldr	r2, [r4, #20]
 80027dc:	2304      	movs	r3, #4
 80027de:	4db5      	ldr	r5, [pc, #724]	; (8002ab4 <HAL_RCC_OscConfig+0x308>)
 80027e0:	2a01      	cmp	r2, #1
 80027e2:	d000      	beq.n	80027e6 <HAL_RCC_OscConfig+0x3a>
 80027e4:	e14a      	b.n	8002a7c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027e6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027e8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80027ea:	430b      	orrs	r3, r1
 80027ec:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80027ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027f0:	431a      	orrs	r2, r3
 80027f2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80027f4:	f7fe fedc 	bl	80015b0 <HAL_GetTick>
 80027f8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027fc:	423b      	tst	r3, r7
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x56>
 8002800:	e135      	b.n	8002a6e <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002802:	21f8      	movs	r1, #248	; 0xf8
 8002804:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002806:	69a3      	ldr	r3, [r4, #24]
 8002808:	438a      	bics	r2, r1
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4313      	orrs	r3, r2
 800280e:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002810:	6a23      	ldr	r3, [r4, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d000      	beq.n	8002818 <HAL_RCC_OscConfig+0x6c>
 8002816:	e159      	b.n	8002acc <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8002818:	2000      	movs	r0, #0
 800281a:	e02a      	b.n	8002872 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800281c:	210c      	movs	r1, #12
 800281e:	4da5      	ldr	r5, [pc, #660]	; (8002ab4 <HAL_RCC_OscConfig+0x308>)
 8002820:	686a      	ldr	r2, [r5, #4]
 8002822:	400a      	ands	r2, r1
 8002824:	2a04      	cmp	r2, #4
 8002826:	d006      	beq.n	8002836 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002828:	686b      	ldr	r3, [r5, #4]
 800282a:	400b      	ands	r3, r1
 800282c:	2b08      	cmp	r3, #8
 800282e:	d10a      	bne.n	8002846 <HAL_RCC_OscConfig+0x9a>
 8002830:	686b      	ldr	r3, [r5, #4]
 8002832:	03db      	lsls	r3, r3, #15
 8002834:	d507      	bpl.n	8002846 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	682b      	ldr	r3, [r5, #0]
 8002838:	039b      	lsls	r3, r3, #14
 800283a:	d5bf      	bpl.n	80027bc <HAL_RCC_OscConfig+0x10>
 800283c:	6863      	ldr	r3, [r4, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1bc      	bne.n	80027bc <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002842:	2001      	movs	r0, #1
 8002844:	e015      	b.n	8002872 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002846:	6863      	ldr	r3, [r4, #4]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d114      	bne.n	8002876 <HAL_RCC_OscConfig+0xca>
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	682a      	ldr	r2, [r5, #0]
 8002850:	025b      	lsls	r3, r3, #9
 8002852:	4313      	orrs	r3, r2
 8002854:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002856:	f7fe feab 	bl	80015b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800285c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	02bf      	lsls	r7, r7, #10
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	423b      	tst	r3, r7
 8002864:	d1aa      	bne.n	80027bc <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002866:	f7fe fea3 	bl	80015b0 <HAL_GetTick>
 800286a:	1b80      	subs	r0, r0, r6
 800286c:	2864      	cmp	r0, #100	; 0x64
 800286e:	d9f7      	bls.n	8002860 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8002870:	2003      	movs	r0, #3
}
 8002872:	b005      	add	sp, #20
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0xfc>
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	4a8e      	ldr	r2, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002880:	4013      	ands	r3, r2
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	4a8d      	ldr	r2, [pc, #564]	; (8002abc <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002888:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288a:	4013      	ands	r3, r2
 800288c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800288e:	f7fe fe8f 	bl	80015b0 <HAL_GetTick>
 8002892:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	423b      	tst	r3, r7
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0xf0>
 800289a:	e78f      	b.n	80027bc <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe fe88 	bl	80015b0 <HAL_GetTick>
 80028a0:	1b80      	subs	r0, r0, r6
 80028a2:	2864      	cmp	r0, #100	; 0x64
 80028a4:	d9f6      	bls.n	8002894 <HAL_RCC_OscConfig+0xe8>
 80028a6:	e7e3      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x10c>
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	682a      	ldr	r2, [r5, #0]
 80028b0:	02db      	lsls	r3, r3, #11
 80028b2:	4313      	orrs	r3, r2
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	e7c9      	b.n	800284c <HAL_RCC_OscConfig+0xa0>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	4a7f      	ldr	r2, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0x30c>)
 80028bc:	4013      	ands	r3, r2
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x310>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	e7c5      	b.n	8002854 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028c8:	220c      	movs	r2, #12
 80028ca:	4d7a      	ldr	r5, [pc, #488]	; (8002ab4 <HAL_RCC_OscConfig+0x308>)
 80028cc:	686b      	ldr	r3, [r5, #4]
 80028ce:	4213      	tst	r3, r2
 80028d0:	d006      	beq.n	80028e0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028d2:	686b      	ldr	r3, [r5, #4]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d110      	bne.n	80028fc <HAL_RCC_OscConfig+0x150>
 80028da:	686b      	ldr	r3, [r5, #4]
 80028dc:	03db      	lsls	r3, r3, #15
 80028de:	d40d      	bmi.n	80028fc <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	079b      	lsls	r3, r3, #30
 80028e4:	d502      	bpl.n	80028ec <HAL_RCC_OscConfig+0x140>
 80028e6:	68e3      	ldr	r3, [r4, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d1aa      	bne.n	8002842 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	21f8      	movs	r1, #248	; 0xf8
 80028ee:	682a      	ldr	r2, [r5, #0]
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	438a      	bics	r2, r1
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	e763      	b.n	80027c4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fc:	68e2      	ldr	r2, [r4, #12]
 80028fe:	2301      	movs	r3, #1
 8002900:	2a00      	cmp	r2, #0
 8002902:	d00f      	beq.n	8002924 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8002904:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002908:	4313      	orrs	r3, r2
 800290a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800290c:	f7fe fe50 	bl	80015b0 <HAL_GetTick>
 8002910:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	423b      	tst	r3, r7
 8002916:	d1e9      	bne.n	80028ec <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe fe4a 	bl	80015b0 <HAL_GetTick>
 800291c:	1b80      	subs	r0, r0, r6
 800291e:	2802      	cmp	r0, #2
 8002920:	d9f7      	bls.n	8002912 <HAL_RCC_OscConfig+0x166>
 8002922:	e7a5      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8002924:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002928:	439a      	bics	r2, r3
 800292a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800292c:	f7fe fe40 	bl	80015b0 <HAL_GetTick>
 8002930:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	423b      	tst	r3, r7
 8002936:	d100      	bne.n	800293a <HAL_RCC_OscConfig+0x18e>
 8002938:	e744      	b.n	80027c4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fe39 	bl	80015b0 <HAL_GetTick>
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	2802      	cmp	r0, #2
 8002942:	d9f6      	bls.n	8002932 <HAL_RCC_OscConfig+0x186>
 8002944:	e794      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002946:	69e2      	ldr	r2, [r4, #28]
 8002948:	2301      	movs	r3, #1
 800294a:	4d5a      	ldr	r5, [pc, #360]	; (8002ab4 <HAL_RCC_OscConfig+0x308>)
 800294c:	2a00      	cmp	r2, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002950:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002954:	4313      	orrs	r3, r2
 8002956:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002958:	f7fe fe2a 	bl	80015b0 <HAL_GetTick>
 800295c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002960:	423b      	tst	r3, r7
 8002962:	d000      	beq.n	8002966 <HAL_RCC_OscConfig+0x1ba>
 8002964:	e732      	b.n	80027cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe fe23 	bl	80015b0 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	2802      	cmp	r0, #2
 800296e:	d9f6      	bls.n	800295e <HAL_RCC_OscConfig+0x1b2>
 8002970:	e77e      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002972:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002976:	439a      	bics	r2, r3
 8002978:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800297a:	f7fe fe19 	bl	80015b0 <HAL_GetTick>
 800297e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002982:	423b      	tst	r3, r7
 8002984:	d100      	bne.n	8002988 <HAL_RCC_OscConfig+0x1dc>
 8002986:	e721      	b.n	80027cc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fe12 	bl	80015b0 <HAL_GetTick>
 800298c:	1b80      	subs	r0, r0, r6
 800298e:	2802      	cmp	r0, #2
 8002990:	d9f6      	bls.n	8002980 <HAL_RCC_OscConfig+0x1d4>
 8002992:	e76d      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002994:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002998:	4d46      	ldr	r5, [pc, #280]	; (8002ab4 <HAL_RCC_OscConfig+0x308>)
 800299a:	0552      	lsls	r2, r2, #21
 800299c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800299e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a0:	4213      	tst	r3, r2
 80029a2:	d108      	bne.n	80029b6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	69eb      	ldr	r3, [r5, #28]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61eb      	str	r3, [r5, #28]
 80029aa:	69eb      	ldr	r3, [r5, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	2780      	movs	r7, #128	; 0x80
 80029b8:	4e41      	ldr	r6, [pc, #260]	; (8002ac0 <HAL_RCC_OscConfig+0x314>)
 80029ba:	007f      	lsls	r7, r7, #1
 80029bc:	6833      	ldr	r3, [r6, #0]
 80029be:	423b      	tst	r3, r7
 80029c0:	d006      	beq.n	80029d0 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	68a3      	ldr	r3, [r4, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d113      	bne.n	80029f0 <HAL_RCC_OscConfig+0x244>
 80029c8:	6a2a      	ldr	r2, [r5, #32]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	622b      	str	r3, [r5, #32]
 80029ce:	e030      	b.n	8002a32 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d0:	6833      	ldr	r3, [r6, #0]
 80029d2:	433b      	orrs	r3, r7
 80029d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80029d6:	f7fe fdeb 	bl	80015b0 <HAL_GetTick>
 80029da:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	6833      	ldr	r3, [r6, #0]
 80029de:	423b      	tst	r3, r7
 80029e0:	d1ef      	bne.n	80029c2 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe fde5 	bl	80015b0 <HAL_GetTick>
 80029e6:	9b01      	ldr	r3, [sp, #4]
 80029e8:	1ac0      	subs	r0, r0, r3
 80029ea:	2864      	cmp	r0, #100	; 0x64
 80029ec:	d9f6      	bls.n	80029dc <HAL_RCC_OscConfig+0x230>
 80029ee:	e73f      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	2201      	movs	r2, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d114      	bne.n	8002a20 <HAL_RCC_OscConfig+0x274>
 80029f6:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fa:	4393      	bics	r3, r2
 80029fc:	622b      	str	r3, [r5, #32]
 80029fe:	6a2b      	ldr	r3, [r5, #32]
 8002a00:	3203      	adds	r2, #3
 8002a02:	4393      	bics	r3, r2
 8002a04:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002a06:	f7fe fdd3 	bl	80015b0 <HAL_GetTick>
 8002a0a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	6a2b      	ldr	r3, [r5, #32]
 8002a0e:	423b      	tst	r3, r7
 8002a10:	d016      	beq.n	8002a40 <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fdcd 	bl	80015b0 <HAL_GetTick>
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x318>)
 8002a18:	1b80      	subs	r0, r0, r6
 8002a1a:	4298      	cmp	r0, r3
 8002a1c:	d9f6      	bls.n	8002a0c <HAL_RCC_OscConfig+0x260>
 8002a1e:	e727      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d116      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2a6>
 8002a24:	6a29      	ldr	r1, [r5, #32]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	622b      	str	r3, [r5, #32]
 8002a2c:	6a2b      	ldr	r3, [r5, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002a32:	f7fe fdbd 	bl	80015b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a36:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002a38:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3a:	6a2b      	ldr	r3, [r5, #32]
 8002a3c:	423b      	tst	r3, r7
 8002a3e:	d00f      	beq.n	8002a60 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8002a40:	9b00      	ldr	r3, [sp, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d000      	beq.n	8002a48 <HAL_RCC_OscConfig+0x29c>
 8002a46:	e6c5      	b.n	80027d4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	69eb      	ldr	r3, [r5, #28]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x31c>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61eb      	str	r3, [r5, #28]
 8002a50:	e6c0      	b.n	80027d4 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	6a2b      	ldr	r3, [r5, #32]
 8002a54:	4393      	bics	r3, r2
 8002a56:	2204      	movs	r2, #4
 8002a58:	622b      	str	r3, [r5, #32]
 8002a5a:	6a2b      	ldr	r3, [r5, #32]
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	e7b5      	b.n	80029cc <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fda6 	bl	80015b0 <HAL_GetTick>
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_RCC_OscConfig+0x318>)
 8002a66:	1b80      	subs	r0, r0, r6
 8002a68:	4298      	cmp	r0, r3
 8002a6a:	d9e6      	bls.n	8002a3a <HAL_RCC_OscConfig+0x28e>
 8002a6c:	e700      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a6e:	f7fe fd9f 	bl	80015b0 <HAL_GetTick>
 8002a72:	1b80      	subs	r0, r0, r6
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d800      	bhi.n	8002a7a <HAL_RCC_OscConfig+0x2ce>
 8002a78:	e6bf      	b.n	80027fa <HAL_RCC_OscConfig+0x4e>
 8002a7a:	e6f9      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a7c:	3205      	adds	r2, #5
 8002a7e:	d103      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002a82:	439a      	bics	r2, r3
 8002a84:	636a      	str	r2, [r5, #52]	; 0x34
 8002a86:	e6bc      	b.n	8002802 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a8a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a8c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002a8e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a90:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002a92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a94:	4393      	bics	r3, r2
 8002a96:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002a98:	f7fe fd8a 	bl	80015b0 <HAL_GetTick>
 8002a9c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002aa0:	423b      	tst	r3, r7
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2fa>
 8002aa4:	e6b4      	b.n	8002810 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002aa6:	f7fe fd83 	bl	80015b0 <HAL_GetTick>
 8002aaa:	1b80      	subs	r0, r0, r6
 8002aac:	2802      	cmp	r0, #2
 8002aae:	d9f6      	bls.n	8002a9e <HAL_RCC_OscConfig+0x2f2>
 8002ab0:	e6de      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	fffeffff 	.word	0xfffeffff
 8002abc:	fffbffff 	.word	0xfffbffff
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	00001388 	.word	0x00001388
 8002ac8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	210c      	movs	r1, #12
 8002ace:	4d34      	ldr	r5, [pc, #208]	; (8002ba0 <HAL_RCC_OscConfig+0x3f4>)
 8002ad0:	686a      	ldr	r2, [r5, #4]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	2a08      	cmp	r2, #8
 8002ad6:	d047      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad8:	4a32      	ldr	r2, [pc, #200]	; (8002ba4 <HAL_RCC_OscConfig+0x3f8>)
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d132      	bne.n	8002b44 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 8002ade:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fd63 	bl	80015b0 <HAL_GetTick>
 8002aea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	04bf      	lsls	r7, r7, #18
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	423b      	tst	r3, r7
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af4:	220f      	movs	r2, #15
 8002af6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afa:	4393      	bics	r3, r2
 8002afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002afe:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4313      	orrs	r3, r2
 8002b02:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b08:	686a      	ldr	r2, [r5, #4]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	4926      	ldr	r1, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x3fc>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	682a      	ldr	r2, [r5, #0]
 8002b18:	045b      	lsls	r3, r3, #17
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fd47 	bl	80015b0 <HAL_GetTick>
 8002b22:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	4233      	tst	r3, r6
 8002b28:	d000      	beq.n	8002b2c <HAL_RCC_OscConfig+0x380>
 8002b2a:	e675      	b.n	8002818 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fd40 	bl	80015b0 <HAL_GetTick>
 8002b30:	1b00      	subs	r0, r0, r4
 8002b32:	2802      	cmp	r0, #2
 8002b34:	d9f6      	bls.n	8002b24 <HAL_RCC_OscConfig+0x378>
 8002b36:	e69b      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fd3a 	bl	80015b0 <HAL_GetTick>
 8002b3c:	1b80      	subs	r0, r0, r6
 8002b3e:	2802      	cmp	r0, #2
 8002b40:	d9d5      	bls.n	8002aee <HAL_RCC_OscConfig+0x342>
 8002b42:	e695      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8002b44:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b46:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4013      	ands	r3, r2
 8002b4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd30 	bl	80015b0 <HAL_GetTick>
 8002b50:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	04b6      	lsls	r6, r6, #18
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	4233      	tst	r3, r6
 8002b58:	d100      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3b0>
 8002b5a:	e65d      	b.n	8002818 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fd28 	bl	80015b0 <HAL_GetTick>
 8002b60:	1b00      	subs	r0, r0, r4
 8002b62:	2802      	cmp	r0, #2
 8002b64:	d9f6      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3a8>
 8002b66:	e683      	b.n	8002870 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8002b68:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d100      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3c4>
 8002b6e:	e680      	b.n	8002872 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002b72:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002b76:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8002b78:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	4019      	ands	r1, r3
 8002b7c:	4281      	cmp	r1, r0
 8002b7e:	d000      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3d6>
 8002b80:	e65f      	b.n	8002842 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b82:	210f      	movs	r1, #15
 8002b84:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b88:	428a      	cmp	r2, r1
 8002b8a:	d000      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3e2>
 8002b8c:	e659      	b.n	8002842 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b8e:	22f0      	movs	r2, #240	; 0xf0
 8002b90:	0392      	lsls	r2, r2, #14
 8002b92:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d100      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3f0>
 8002b9a:	e63d      	b.n	8002818 <HAL_RCC_OscConfig+0x6c>
 8002b9c:	e651      	b.n	8002842 <HAL_RCC_OscConfig+0x96>
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	feffffff 	.word	0xfeffffff
 8002ba8:	ffc2ffff 	.word	0xffc2ffff

08002bac <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_RCC_EnableCSS+0x10>)
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	4770      	bx	lr
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc0:	220c      	movs	r2, #12
{
 8002bc2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x38>)
 8002bc6:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	401a      	ands	r2, r3
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bce:	200f      	movs	r0, #15
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bd2:	0c99      	lsrs	r1, r3, #18
 8002bd4:	4001      	ands	r1, r0
 8002bd6:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002bd8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002bda:	4909      	ldr	r1, [pc, #36]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x40>)
 8002bdc:	4002      	ands	r2, r0
 8002bde:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002be0:	03db      	lsls	r3, r3, #15
 8002be2:	d504      	bpl.n	8002bee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be4:	4807      	ldr	r0, [pc, #28]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x44>)
 8002be6:	f7fd fa8f 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bea:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x48>)
 8002bf0:	e7fb      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8002bf2:	4804      	ldr	r0, [pc, #16]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8002bf4:	e7fa      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x2c>
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08003200 	.word	0x08003200
 8002c00:	08003210 	.word	0x08003210
 8002c04:	007a1200 	.word	0x007a1200
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <HAL_RCC_ClockConfig>:
{
 8002c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c0e:	0004      	movs	r4, r0
 8002c10:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4d37      	ldr	r5, [pc, #220]	; (8002cfc <HAL_RCC_ClockConfig+0xf0>)
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	4013      	ands	r3, r2
 8002c22:	428b      	cmp	r3, r1
 8002c24:	d31c      	bcc.n	8002c60 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	078b      	lsls	r3, r1, #30
 8002c2a:	d422      	bmi.n	8002c72 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2c:	07cb      	lsls	r3, r1, #31
 8002c2e:	d42f      	bmi.n	8002c90 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	2301      	movs	r3, #1
 8002c32:	682a      	ldr	r2, [r5, #0]
 8002c34:	401a      	ands	r2, r3
 8002c36:	42b2      	cmp	r2, r6
 8002c38:	d851      	bhi.n	8002cde <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	4d30      	ldr	r5, [pc, #192]	; (8002d00 <HAL_RCC_ClockConfig+0xf4>)
 8002c3e:	075b      	lsls	r3, r3, #29
 8002c40:	d454      	bmi.n	8002cec <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c42:	f7ff ffbd 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002c46:	686b      	ldr	r3, [r5, #4]
 8002c48:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <HAL_RCC_ClockConfig+0xf8>)
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	0f1b      	lsrs	r3, r3, #28
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	40d8      	lsrs	r0, r3
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_ClockConfig+0xfc>)
 8002c54:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c56:	2003      	movs	r0, #3
 8002c58:	f7fe fc6a 	bl	8001530 <HAL_InitTick>
  return HAL_OK;
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	e7db      	b.n	8002c18 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	4393      	bics	r3, r2
 8002c64:	430b      	orrs	r3, r1
 8002c66:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	d1d2      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xa>
 8002c70:	e7d9      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_RCC_ClockConfig+0xf4>)
 8002c74:	074b      	lsls	r3, r1, #29
 8002c76:	d504      	bpl.n	8002c82 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c78:	23e0      	movs	r3, #224	; 0xe0
 8002c7a:	6850      	ldr	r0, [r2, #4]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4303      	orrs	r3, r0
 8002c80:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c82:	20f0      	movs	r0, #240	; 0xf0
 8002c84:	6853      	ldr	r3, [r2, #4]
 8002c86:	4383      	bics	r3, r0
 8002c88:	68a0      	ldr	r0, [r4, #8]
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	6053      	str	r3, [r2, #4]
 8002c8e:	e7cd      	b.n	8002c2c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	4f1b      	ldr	r7, [pc, #108]	; (8002d00 <HAL_RCC_ClockConfig+0xf4>)
 8002c92:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c94:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	2a01      	cmp	r2, #1
 8002c98:	d119      	bne.n	8002cce <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	039b      	lsls	r3, r3, #14
 8002c9c:	d5bb      	bpl.n	8002c16 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	438b      	bics	r3, r1
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fc82 	bl	80015b0 <HAL_GetTick>
 8002cac:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	230c      	movs	r3, #12
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d0b9      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe fc78 	bl	80015b0 <HAL_GetTick>
 8002cc0:	9b01      	ldr	r3, [sp, #4]
 8002cc2:	1ac0      	subs	r0, r0, r3
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_RCC_ClockConfig+0x100>)
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	d9f1      	bls.n	8002cae <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
 8002ccc:	e7a4      	b.n	8002c18 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cce:	2a02      	cmp	r2, #2
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	019b      	lsls	r3, r3, #6
 8002cd4:	d4e3      	bmi.n	8002c9e <HAL_RCC_ClockConfig+0x92>
 8002cd6:	e79e      	b.n	8002c16 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	079b      	lsls	r3, r3, #30
 8002cda:	d4e0      	bmi.n	8002c9e <HAL_RCC_ClockConfig+0x92>
 8002cdc:	e79b      	b.n	8002c16 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	682a      	ldr	r2, [r5, #0]
 8002ce0:	439a      	bics	r2, r3
 8002ce2:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	682a      	ldr	r2, [r5, #0]
 8002ce6:	421a      	tst	r2, r3
 8002ce8:	d0a7      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x2e>
 8002cea:	e794      	b.n	8002c16 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	686b      	ldr	r3, [r5, #4]
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_RCC_ClockConfig+0x104>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	68e2      	ldr	r2, [r4, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	606b      	str	r3, [r5, #4]
 8002cf8:	e7a3      	b.n	8002c42 <HAL_RCC_ClockConfig+0x36>
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	080031f0 	.word	0x080031f0
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	00001388 	.word	0x00001388
 8002d10:	fffff8ff 	.word	0xfffff8ff

08002d14 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_RCC_NMI_IRQHandler>:
{
 8002d18:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002d1a:	2480      	movs	r4, #128	; 0x80
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_NMI_IRQHandler+0x18>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4223      	tst	r3, r4
 8002d22:	d003      	beq.n	8002d2c <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8002d24:	f7ff fff6 	bl	8002d14 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002d28:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002d2a:	701c      	strb	r4, [r3, #0]
}
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	4002100a 	.word	0x4002100a

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3a:	6803      	ldr	r3, [r0, #0]
{
 8002d3c:	0005      	movs	r5, r0
 8002d3e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d40:	03db      	lsls	r3, r3, #15
 8002d42:	d52a      	bpl.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d44:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d48:	4c38      	ldr	r4, [pc, #224]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002d4a:	0552      	lsls	r2, r2, #21
 8002d4c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d50:	4213      	tst	r3, r2
 8002d52:	d108      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	69e3      	ldr	r3, [r4, #28]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61e3      	str	r3, [r4, #28]
 8002d5a:	69e3      	ldr	r3, [r4, #28]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	2780      	movs	r7, #128	; 0x80
 8002d68:	4e31      	ldr	r6, [pc, #196]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002d6a:	007f      	lsls	r7, r7, #1
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	423b      	tst	r3, r7
 8002d70:	d028      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d72:	6a22      	ldr	r2, [r4, #32]
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	0011      	movs	r1, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4e2e      	ldr	r6, [pc, #184]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002d7c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7e:	421a      	tst	r2, r3
 8002d80:	d132      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d82:	6a23      	ldr	r3, [r4, #32]
 8002d84:	401e      	ands	r6, r3
 8002d86:	686b      	ldr	r3, [r5, #4]
 8002d88:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d103      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	69e3      	ldr	r3, [r4, #28]
 8002d94:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9a:	682a      	ldr	r2, [r5, #0]
 8002d9c:	07d3      	lsls	r3, r2, #31
 8002d9e:	d506      	bpl.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	2003      	movs	r0, #3
 8002da2:	4922      	ldr	r1, [pc, #136]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002da4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002da6:	4383      	bics	r3, r0
 8002da8:	68a8      	ldr	r0, [r5, #8]
 8002daa:	4303      	orrs	r3, r0
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002dae:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db0:	0693      	lsls	r3, r2, #26
 8002db2:	d517      	bpl.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db4:	2110      	movs	r1, #16
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002db8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002dba:	438b      	bics	r3, r1
 8002dbc:	68e9      	ldr	r1, [r5, #12]
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	433b      	orrs	r3, r7
 8002dc8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002dca:	f7fe fbf1 	bl	80015b0 <HAL_GetTick>
 8002dce:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	6833      	ldr	r3, [r6, #0]
 8002dd2:	423b      	tst	r3, r7
 8002dd4:	d1cd      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe fbeb 	bl	80015b0 <HAL_GetTick>
 8002dda:	9b01      	ldr	r3, [sp, #4]
 8002ddc:	1ac0      	subs	r0, r0, r3
 8002dde:	2864      	cmp	r0, #100	; 0x64
 8002de0:	d9f6      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 8002de2:	2003      	movs	r0, #3
}
 8002de4:	b005      	add	sp, #20
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de8:	686a      	ldr	r2, [r5, #4]
 8002dea:	4013      	ands	r3, r2
 8002dec:	428b      	cmp	r3, r1
 8002dee:	d0c8      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	025b      	lsls	r3, r3, #9
 8002dfa:	4303      	orrs	r3, r0
 8002dfc:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfe:	6a23      	ldr	r3, [r4, #32]
 8002e00:	480e      	ldr	r0, [pc, #56]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e02:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4003      	ands	r3, r0
 8002e06:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002e08:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e0a:	07d3      	lsls	r3, r2, #31
 8002e0c:	d5b9      	bpl.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fbcf 	bl	80015b0 <HAL_GetTick>
 8002e12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	2202      	movs	r2, #2
 8002e16:	6a23      	ldr	r3, [r4, #32]
 8002e18:	4213      	tst	r3, r2
 8002e1a:	d1b2      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fbc8 	bl	80015b0 <HAL_GetTick>
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002e22:	1bc0      	subs	r0, r0, r7
 8002e24:	4298      	cmp	r0, r3
 8002e26:	d9f5      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002e28:	e7db      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40007000 	.word	0x40007000
 8002e34:	fffffcff 	.word	0xfffffcff
 8002e38:	efffffff 	.word	0xefffffff
 8002e3c:	fffeffff 	.word	0xfffeffff
 8002e40:	00001388 	.word	0x00001388

08002e44 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e44:	0002      	movs	r2, r0
{
 8002e46:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4a:	323d      	adds	r2, #61	; 0x3d
 8002e4c:	7811      	ldrb	r1, [r2, #0]
 8002e4e:	4281      	cmp	r1, r0
 8002e50:	d112      	bne.n	8002e78 <HAL_TIM_Base_Start+0x34>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	2102      	movs	r1, #2
 8002e54:	7011      	strb	r1, [r2, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_TIM_Base_Start+0x40>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d002      	beq.n	8002e64 <HAL_TIM_Base_Start+0x20>
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <HAL_TIM_Base_Start+0x44>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10a      	bne.n	8002e7a <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e64:	2107      	movs	r1, #7
 8002e66:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002e68:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	2a06      	cmp	r2, #6
 8002e6e:	d003      	beq.n	8002e78 <HAL_TIM_Base_Start+0x34>
      __HAL_TIM_ENABLE(htim);
 8002e70:	2201      	movs	r2, #1
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
}
 8002e78:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4310      	orrs	r0, r2
 8002e7e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002e80:	2000      	movs	r0, #0
 8002e82:	e7f9      	b.n	8002e78 <HAL_TIM_Base_Start+0x34>
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400

08002e8c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	0002      	movs	r2, r0
{
 8002e8e:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002e90:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002e92:	323d      	adds	r2, #61	; 0x3d
 8002e94:	7811      	ldrb	r1, [r2, #0]
 8002e96:	4281      	cmp	r1, r0
 8002e98:	d115      	bne.n	8002ec6 <HAL_TIM_Base_Start_IT+0x3a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	4302      	orrs	r2, r0
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_TIM_Base_Start_IT+0x48>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d002      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0x26>
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_TIM_Base_Start_IT+0x4c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_TIM_Base_Start_IT+0x3c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb2:	2107      	movs	r1, #7
 8002eb4:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	2a06      	cmp	r2, #6
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4310      	orrs	r0, r2
 8002ecc:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	e7f9      	b.n	8002ec6 <HAL_TIM_Base_Start_IT+0x3a>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40000400 	.word	0x40000400

08002edc <HAL_TIM_OC_DelayElapsedCallback>:
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_IC_CaptureCallback>:
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_TriggerCallback>:
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	6803      	ldr	r3, [r0, #0]
{
 8002ee8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eea:	6919      	ldr	r1, [r3, #16]
{
 8002eec:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eee:	4211      	tst	r1, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	4211      	tst	r1, r2
 8002ef6:	d00b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef8:	3a05      	subs	r2, #5
 8002efa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efc:	3204      	adds	r2, #4
 8002efe:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	079b      	lsls	r3, r3, #30
 8002f04:	d100      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x24>
 8002f06:	e079      	b.n	8002ffc <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f08:	f7ff ffe9 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f10:	2204      	movs	r2, #4
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	4211      	tst	r1, r2
 8002f18:	d010      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1a:	68d9      	ldr	r1, [r3, #12]
 8002f1c:	4211      	tst	r1, r2
 8002f1e:	d00d      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f20:	3a09      	subs	r2, #9
 8002f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f24:	3207      	adds	r2, #7
 8002f26:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f30:	421a      	tst	r2, r3
 8002f32:	d069      	beq.n	8003008 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f34:	f7ff ffd3 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	4211      	tst	r1, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	4211      	tst	r1, r2
 8002f4a:	d00b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	3a11      	subs	r2, #17
 8002f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f50:	320d      	adds	r2, #13
 8002f52:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f54:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f58:	079b      	lsls	r3, r3, #30
 8002f5a:	d05b      	beq.n	8003014 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5c:	f7ff ffbf 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f60:	2300      	movs	r3, #0
 8002f62:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f64:	2210      	movs	r2, #16
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	4211      	tst	r1, r2
 8002f6c:	d010      	beq.n	8002f90 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f6e:	68d9      	ldr	r1, [r3, #12]
 8002f70:	4211      	tst	r1, r2
 8002f72:	d00d      	beq.n	8002f90 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	3a21      	subs	r2, #33	; 0x21
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f78:	3219      	adds	r2, #25
 8002f7a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	23c0      	movs	r3, #192	; 0xc0
 8002f80:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	421a      	tst	r2, r3
 8002f86:	d04b      	beq.n	8003020 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f88:	f7ff ffa9 	bl	8002ede <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f90:	2201      	movs	r2, #1
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	6919      	ldr	r1, [r3, #16]
 8002f96:	4211      	tst	r1, r2
 8002f98:	d007      	beq.n	8002faa <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	4211      	tst	r1, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa0:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fa6:	f7fe f921 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	6919      	ldr	r1, [r3, #16]
 8002fb0:	4211      	tst	r1, r2
 8002fb2:	d008      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb4:	68d9      	ldr	r1, [r3, #12]
 8002fb6:	4211      	tst	r1, r2
 8002fb8:	d005      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fba:	3a02      	subs	r2, #2
 8002fbc:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbe:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002fc2:	f000 f89c 	bl	80030fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
 8002fcc:	4211      	tst	r1, r2
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	4211      	tst	r1, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd6:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fdc:	f7ff ff81 	bl	8002ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	4211      	tst	r1, r2
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fea:	68d9      	ldr	r1, [r3, #12]
 8002fec:	4211      	tst	r1, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff0:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff2:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002ff6:	f000 f881 	bl	80030fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ffa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffc:	f7ff ff6e 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	0020      	movs	r0, r4
 8003002:	f7ff ff6d 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003006:	e781      	b.n	8002f0c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003008:	f7ff ff68 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	0020      	movs	r0, r4
 800300e:	f7ff ff67 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003012:	e791      	b.n	8002f38 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003014:	f7ff ff62 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	0020      	movs	r0, r4
 800301a:	f7ff ff61 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
 800301e:	e79f      	b.n	8002f60 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003020:	f7ff ff5c 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	0020      	movs	r0, r4
 8003026:	f7ff ff5b 	bl	8002ee0 <HAL_TIM_PWM_PulseFinishedCallback>
 800302a:	e7af      	b.n	8002f8c <HAL_TIM_IRQHandler+0xa8>

0800302c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <TIM_Base_SetConfig+0x68>)
{
 800302e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003030:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003032:	4290      	cmp	r0, r2
 8003034:	d002      	beq.n	800303c <TIM_Base_SetConfig+0x10>
 8003036:	4c18      	ldr	r4, [pc, #96]	; (8003098 <TIM_Base_SetConfig+0x6c>)
 8003038:	42a0      	cmp	r0, r4
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	2470      	movs	r4, #112	; 0x70
 800303e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003040:	684c      	ldr	r4, [r1, #4]
 8003042:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003044:	4290      	cmp	r0, r2
 8003046:	d00b      	beq.n	8003060 <TIM_Base_SetConfig+0x34>
 8003048:	4c13      	ldr	r4, [pc, #76]	; (8003098 <TIM_Base_SetConfig+0x6c>)
 800304a:	42a0      	cmp	r0, r4
 800304c:	d008      	beq.n	8003060 <TIM_Base_SetConfig+0x34>
 800304e:	4c13      	ldr	r4, [pc, #76]	; (800309c <TIM_Base_SetConfig+0x70>)
 8003050:	42a0      	cmp	r0, r4
 8003052:	d005      	beq.n	8003060 <TIM_Base_SetConfig+0x34>
 8003054:	4c12      	ldr	r4, [pc, #72]	; (80030a0 <TIM_Base_SetConfig+0x74>)
 8003056:	42a0      	cmp	r0, r4
 8003058:	d002      	beq.n	8003060 <TIM_Base_SetConfig+0x34>
 800305a:	4c12      	ldr	r4, [pc, #72]	; (80030a4 <TIM_Base_SetConfig+0x78>)
 800305c:	42a0      	cmp	r0, r4
 800305e:	d103      	bne.n	8003068 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003060:	4c11      	ldr	r4, [pc, #68]	; (80030a8 <TIM_Base_SetConfig+0x7c>)
 8003062:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003064:	68cc      	ldr	r4, [r1, #12]
 8003066:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	2480      	movs	r4, #128	; 0x80
 800306a:	43a3      	bics	r3, r4
 800306c:	694c      	ldr	r4, [r1, #20]
 800306e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8003070:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003072:	688b      	ldr	r3, [r1, #8]
 8003074:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003076:	680b      	ldr	r3, [r1, #0]
 8003078:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307a:	4290      	cmp	r0, r2
 800307c:	d005      	beq.n	800308a <TIM_Base_SetConfig+0x5e>
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <TIM_Base_SetConfig+0x74>)
 8003080:	4298      	cmp	r0, r3
 8003082:	d002      	beq.n	800308a <TIM_Base_SetConfig+0x5e>
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <TIM_Base_SetConfig+0x78>)
 8003086:	4298      	cmp	r0, r3
 8003088:	d101      	bne.n	800308e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800308a:	690b      	ldr	r3, [r1, #16]
 800308c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800308e:	2301      	movs	r3, #1
 8003090:	6143      	str	r3, [r0, #20]
}
 8003092:	bd10      	pop	{r4, pc}
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40002000 	.word	0x40002000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	fffffcff 	.word	0xfffffcff

080030ac <HAL_TIM_Base_Init>:
{
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
  if (htim == NULL)
 80030b2:	2c00      	cmp	r4, #0
 80030b4:	d021      	beq.n	80030fa <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	0025      	movs	r5, r4
 80030b8:	353d      	adds	r5, #61	; 0x3d
 80030ba:	782b      	ldrb	r3, [r5, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80030c2:	0023      	movs	r3, r4
 80030c4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80030c6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80030c8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80030ca:	f7fe f9db 	bl	8001484 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	1d21      	adds	r1, r4, #4
 80030d6:	f7ff ffa9 	bl	800302c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030da:	0022      	movs	r2, r4
 80030dc:	2301      	movs	r3, #1
  return HAL_OK;
 80030de:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	3246      	adds	r2, #70	; 0x46
 80030e2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	3a08      	subs	r2, #8
 80030e8:	7013      	strb	r3, [r2, #0]
 80030ea:	7053      	strb	r3, [r2, #1]
 80030ec:	7093      	strb	r3, [r2, #2]
 80030ee:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	7113      	strb	r3, [r2, #4]
 80030f2:	7153      	strb	r3, [r2, #5]
 80030f4:	7193      	strb	r3, [r2, #6]
 80030f6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	702b      	strb	r3, [r5, #0]
}
 80030fa:	bd70      	pop	{r4, r5, r6, pc}

080030fc <HAL_TIMEx_CommutCallback>:
 80030fc:	4770      	bx	lr

080030fe <HAL_TIMEx_BreakCallback>:
 80030fe:	4770      	bx	lr

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2600      	movs	r6, #0
 8003104:	4d0c      	ldr	r5, [pc, #48]	; (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	2600      	movs	r6, #0
 8003112:	f000 f821 	bl	8003158 <_init>
 8003116:	4d0a      	ldr	r5, [pc, #40]	; (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	; (8003144 <__libc_init_array+0x44>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	00b3      	lsls	r3, r6, #2
 8003126:	58eb      	ldr	r3, [r5, r3]
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	00b3      	lsls	r3, r6, #2
 8003130:	58eb      	ldr	r3, [r5, r3]
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08003220 	.word	0x08003220
 800313c:	08003220 	.word	0x08003220
 8003140:	08003220 	.word	0x08003220
 8003144:	08003224 	.word	0x08003224

08003148 <memset>:
 8003148:	0003      	movs	r3, r0
 800314a:	1882      	adds	r2, r0, r2
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	7019      	strb	r1, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <_init>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr

08003164 <_fini>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr
